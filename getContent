./src/Ivory/GoogleMap/Controls/RotateControl.php:34:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/RotateControl.php:44:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/RotateControl.php:60:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/ZoomControl.php:37:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/ZoomControl.php:38:        $this->setZoomControlStyle($zoomControlStyle);
./src/Ivory/GoogleMap/Controls/ZoomControl.php:48:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/ZoomControl.php:64:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/ZoomControl.php:74:        return $this->zoomControlStyle;
./src/Ivory/GoogleMap/Controls/ZoomControl.php:90:        $this->zoomControlStyle = $zoomControlStyle;
./src/Ivory/GoogleMap/Controls/StreetViewControl.php:34:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/StreetViewControl.php:44:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/StreetViewControl.php:60:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/PanControl.php:34:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/PanControl.php:44:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/PanControl.php:60:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:46:        $this->setMapTypeIds($mapTypeIds);
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:47:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:48:        $this->setMapTypeControlStyle($mapTypeControlStyle);
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:58:        return $this->mapTypeIds;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:68:        $this->mapTypeIds = array();
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:71:            $this->addMapTypeId($mapTypeId);
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:88:        if (!in_array($mapTypeId, $this->mapTypeIds)) {
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:89:            $this->mapTypeIds[] = $mapTypeId;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:100:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:116:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:126:        return $this->mapTypeControlStyle;
./src/Ivory/GoogleMap/Controls/MapTypeControl.php:142:        $this->mapTypeControlStyle = $mapTypeControlStyle;
./src/Ivory/GoogleMap/Controls/ScaleControl.php:40:        $this->setControlPosition($controlPosition);
./src/Ivory/GoogleMap/Controls/ScaleControl.php:41:        $this->setScaleControlStyle($scaleControlStyle);
./src/Ivory/GoogleMap/Controls/ScaleControl.php:51:        return $this->controlPosition;
./src/Ivory/GoogleMap/Controls/ScaleControl.php:67:        $this->controlPosition = $controlPosition;
./src/Ivory/GoogleMap/Controls/ScaleControl.php:77:        return $this->scaleControlStyle;
./src/Ivory/GoogleMap/Controls/ScaleControl.php:93:        $this->scaleControlStyle = $scaleControlStyle;
./src/Ivory/GoogleMap/Controls/OverviewMapControl.php:34:        $this->setOpened($opened);
./src/Ivory/GoogleMap/Controls/OverviewMapControl.php:44:        return $this->opened;
./src/Ivory/GoogleMap/Controls/OverviewMapControl.php:60:        $this->opened = $opened;
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:52:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:53:        $this->setScaleControlStyleHelper($scaleControlStyleHelper);
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:63:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:73:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:83:        return $this->scaleControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:94:        $this->scaleControlStyleHelper = $scaleControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:106:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:107:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:108:            ->setValue('[position]', $this->controlPositionHelper->render($scaleControl->getControlPosition()), false)
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:109:            ->setValue('[style]', $this->scaleControlStyleHelper->render($scaleControl->getScaleControlStyle()), false)
./src/Ivory/GoogleMap/Helper/Controls/ScaleControlHelper.php:110:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:40:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:50:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:60:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:72:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:73:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:74:            ->setValue('[position]', $this->controlPositionHelper->render($panControl->getControlPosition()), false)
./src/Ivory/GoogleMap/Helper/Controls/PanControlHelper.php:75:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:52:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:53:        $this->setZoomControlStyleHelper($zoomControlStyleHelper);
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:63:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:73:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:83:        return $this->zoomControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:94:        $this->zoomControlStyleHelper = $zoomControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:106:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:107:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:108:            ->setValue('[position]', $this->controlPositionHelper->render($zoomControl->getControlPosition()), false)
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:109:            ->setValue('[style]', $this->zoomControlStyleHelper->render($zoomControl->getZoomControlStyle()), false)
./src/Ivory/GoogleMap/Helper/Controls/ZoomControlHelper.php:110:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:40:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:50:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:60:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:71:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:72:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:73:            ->setValue(
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:75:                $this->controlPositionHelper->render($streetViewControl->getControlPosition()),
./src/Ivory/GoogleMap/Helper/Controls/StreetViewControlHelper.php:78:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:60:        $this->setMapTypeIdHelper($mapTypeIdHelper);
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:61:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:62:        $this->setMapTypeControlStyleHelper($mapTypeControlStyleHelper);
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:72:        return $this->mapTypeIdHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:82:        $this->mapTypeIdHelper = $mapTypeIdHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:92:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:102:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:112:        return $this->mapTypeControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:124:        $this->mapTypeControlStyleHelper = $mapTypeControlStyleHelper;
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:136:        $this->jsonBuilder->reset();
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:138:        foreach ($mapTypeControl->getMapTypeIds() as $index => $mapTypeId) {
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:139:            $this->jsonBuilder->setValue(
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:141:                $this->mapTypeIdHelper->render($mapTypeId),
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:146:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:147:            ->setValue(
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:149:                $this->controlPositionHelper->render($mapTypeControl->getControlPosition()),
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:152:            ->setValue(
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:154:                $this->mapTypeControlStyleHelper->render($mapTypeControl->getMapTypeControlStyle()),
./src/Ivory/GoogleMap/Helper/Controls/MapTypeControlHelper.php:157:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:40:        $this->setControlPositionHelper($controlPositionHelper);
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:50:        return $this->controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:60:        $this->controlPositionHelper = $controlPositionHelper;
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:72:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:73:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:74:            ->setValue('[position]', $this->controlPositionHelper->render($rotateControl->getControlPosition()), false)
./src/Ivory/GoogleMap/Helper/Controls/RotateControlHelper.php:75:            ->build();
./src/Ivory/GoogleMap/Helper/Controls/OverviewMapControlHelper.php:33:        return $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Controls/OverviewMapControlHelper.php:34:            ->reset()
./src/Ivory/GoogleMap/Helper/Controls/OverviewMapControlHelper.php:35:            ->setValue('[opened]', $overviewMapControl->isOpened())
./src/Ivory/GoogleMap/Helper/Controls/OverviewMapControlHelper.php:36:            ->build();
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:47:        $this->setApiHelper($apiHelper);
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:48:        $this->setMarkerClusterHelper($markerClusterHelper);
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:58:        return $this->apiHelper;
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:68:        $this->apiHelper = $apiHelper;
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:78:        return $this->markerClusterHelper;
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:88:        $this->markerClusterHelper = $markerClusterHelper;
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:96:        if ($this->apiHelper->isLoaded()) {
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:102:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:108:        $output[] = $this->apiHelper->render($map->getLanguage(), $this->getLibraries($map), $callback);
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:109:        $output[] = $this->markerClusterHelper->renderLibraries($map->getMarkerCluster(), $map);
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:119:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:129:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:143:        $libraries = $map->getLibraries();
./src/Ivory/GoogleMap/Helper/Extension/CoreExtensionHelper.php:145:        $encodedPolylines = $map->getEncodedPolylines();
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:36:        $source = '//google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox_packed.js',
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:39:        $this->setSource($source);
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:40:        $this->setCallback($callback);
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:50:        return $this->source;
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:60:        $this->source = $source;
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:70:        return $this->callback;
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:80:        $this->callback = $callback;
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:88:        if (!$map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:89:            return $this->renderLibrary($this->source);
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:98:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:99:            return sprintf('function %s () {'.PHP_EOL, $this->callback);
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:108:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/Extension/InfoBoxExtensionHelper.php:109:            return '}'.PHP_EOL.$this->renderLibrary($this->source, $this->callback);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:41:        $this->setAnimationHelper($animationHelper);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:51:        return $this->animationHelper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:61:        $this->animationHelper = $animationHelper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:74:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:75:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:76:            ->setValue('[position]', $marker->getPosition()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:79:            $this->jsonBuilder->setValue('[map]', $map->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:82:        if ($marker->hasAnimation()) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:83:            $this->jsonBuilder->setValue('[animation]', $this->animationHelper->render($marker->getAnimation()), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:86:        if ($marker->hasIcon()) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:87:            $this->jsonBuilder->setValue('[icon]', $marker->getIcon()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:90:        if ($marker->hasShadow()) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:91:            $this->jsonBuilder->setValue('[shadow]', $marker->getShadow()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:94:        if ($marker->hasShape()) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:95:            $this->jsonBuilder->setValue('[shape]', $marker->getShape()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:98:        $this->jsonBuilder->setValues($marker->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:102:            $marker->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerHelper.php:103:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:38:            ->setValue('[paths]', array());
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:40:        foreach ($polygon->getCoordinates() as $index => $coordinate) {
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:41:            $this->jsonBuilder->setValue(sprintf('[paths][%d]', $index), $coordinate->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:44:        $this->jsonBuilder->setValues($polygon->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:48:            $polygon->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/PolygonHelper.php:49:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:42:        $this->setEncodingHelper($encodingHelper);
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:52:        return $this->encodingHelper;
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:62:        $this->encodingHelper = $encodingHelper;
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:75:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:76:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:77:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:78:            ->setValue('[path]', $this->encodingHelper->renderDecodePath($encodedPolyline->getValue()), false)
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:79:            ->setValues($encodedPolyline->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:83:            $encodedPolyline->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/EncodedPolylineHelper.php:84:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:45:        $this->setInfoWindowHelper($infoWindowHelper);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:55:        return $this->infoWindowHelper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:65:        $this->infoWindowHelper = $infoWindowHelper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:91:        foreach ($markerCluster->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:92:            $output[] = $this->renderMarker($marker, $map);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:94:            if ($marker->hasInfoWindow() && $marker->getInfoWindow()->isAutoOpen()) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:95:                $this->registerInfoWindowEvent($marker, $map);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:114:            $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:115:            $marker->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:116:            $this->markerHelper->render($marker, $map)
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:128:        $closableInfoWindows = sprintf('%s.closable_info_windows', $this->getJsContainerName($map));
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:135:    {$this->infoWindowHelper->renderOpen($marker->getInfoWindow(), $map, $marker)}
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:140:        $event->setJavascriptVariable(sprintf('%s_%s', $marker->getJavascriptVariable(), 'info_window_event'));
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:141:        $event->setInstance($marker->getJavascriptVariable());
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:142:        $event->setEventName($marker->getInfoWindow()->getOpenEvent());
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:143:        $event->setHandle($handle);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelper.php:145:        $map->getEventManager()->addEvent($event);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:30:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:31:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:32:            ->setValues($markerCluster->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:35:            $markerCluster->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:36:            $map->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:39:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:40:                $this->getJsContainerName($map)
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:42:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:51:        $url = '//google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer_compiled.js';
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:68:            $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:69:            $marker->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelper.php:70:            $this->markerHelper->render($marker)
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:40:        $this->setHelpers($helpers);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:50:        return !empty($this->helpers);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:60:        return $this->helpers;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:70:        $this->helpers = array();
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:73:            $this->setHelper($name, $helper);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:86:        return isset($this->helpers[$name]);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:100:        if (!$this->hasHelper($name)) {
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:104:        return $this->helpers[$name];
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:115:        $this->helpers[$name] = $helper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:123:        return $this->getHelper($markerCluster->getType())->render($markerCluster, $map);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:131:        return $this->getHelper($markerCluster->getType())->renderMarkers($markerCluster, $map);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelper.php:139:        return $this->getHelper($markerCluster->getType())->renderLibraries($markerCluster, $map);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelper.php:40:        $this->setMarkerHelper($markerHelper);
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelper.php:50:        return $this->markerHelper;
./src/Ivory/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelper.php:60:        $this->markerHelper = $markerHelper;
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:38:            ->setValue('[center]', $circle->getCenter()->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:39:            ->setValue('[radius]', $circle->getRadius())
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:40:            ->setValues($circle->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:44:            $circle->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/CircleHelper.php:45:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:38:            ->setValue('[path]', array());
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:40:        foreach ($polyline->getCoordinates() as $index => $coordinate) {
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:41:            $this->jsonBuilder->setValue(sprintf('[path][%d]', $index), $coordinate->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:44:        $this->jsonBuilder->setValues($polyline->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:48:            $polyline->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/PolylineHelper.php:49:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:34:            $markerImage->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:35:            $markerImage->getUrl(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:36:            $markerImage->hasSize() ? $markerImage->getSize()->getJavascriptVariable() : 'null',
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:37:            $markerImage->hasOrigin() ? $markerImage->getOrigin()->getJavascriptVariable() : 'null',
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:38:            $markerImage->hasAnchor() ? $markerImage->getAnchor()->getJavascriptVariable() : 'null',
./src/Ivory/GoogleMap/Helper/Overlays/MarkerImageHelper.php:39:            $markerImage->hasScaledSize() ? $markerImage->getScaledSize()->getJavascriptVariable() : 'null'
./src/Ivory/GoogleMap/Helper/Overlays/InfoBoxHelper.php:28:        $this->doRender($infoWindow, $renderPosition);
./src/Ivory/GoogleMap/Helper/Overlays/InfoBoxHelper.php:32:            $infoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/InfoBoxHelper.php:33:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/MarkerShapeHelper.php:34:            $markerShape->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/MarkerShapeHelper.php:35:            json_encode(array('type' => $markerShape->getType(), 'coords' => $markerShape->getCoordinates()))
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:38:            ->setValues($groundOverlay->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:42:            $groundOverlay->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:43:            $groundOverlay->getUrl(),
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:44:            $groundOverlay->getBound()->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/GroundOverlayHelper.php:45:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:38:            ->setValue('[bounds]', $rectangle->getBound()->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:39:            ->setValues($rectangle->getOptions());
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:43:            $rectangle->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/RectangleHelper.php:44:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:36:        $this->doRender($infoWindow, $renderPosition);
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:40:            $infoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:41:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:59:                $infoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:60:                $map->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:61:                $marker->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:65:        return sprintf('%s.open(%s);'.PHP_EOL, $infoWindow->getJavascriptVariable(), $map->getJavascriptVariable());
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:76:        $this->jsonBuilder->reset();
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:79:            $this->jsonBuilder->setValue('[position]', $infoWindow->getPosition()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:82:        if ($infoWindow->hasPixelOffset()) {
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:83:            $this->jsonBuilder->setValue(
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:85:                $infoWindow->getPixelOffset()->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:90:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:91:            ->setValue('[content]', $infoWindow->getContent())
./src/Ivory/GoogleMap/Helper/Overlays/InfoWindowHelper.php:92:            ->setValues($infoWindow->getOptions());
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:35:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:36:            ->reset()
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:37:            ->setValue('[map]', $map->getJavascriptVariable(), false)
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:38:            ->setValues($kmlLayer->getOptions());
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:42:            $kmlLayer->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:43:            $kmlLayer->getUrl(),
./src/Ivory/GoogleMap/Helper/Layers/KMLLayerHelper.php:44:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:34:            $domEvent->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:35:            $domEvent->getInstance(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:36:            $domEvent->getEventName(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:37:            $domEvent->getHandle(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:38:            json_encode($domEvent->isCapture())
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:53:            $domEventOnce->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:54:            $domEventOnce->getInstance(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:55:            $domEventOnce->getEventName(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:56:            $domEventOnce->getHandle(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:57:            json_encode($domEventOnce->isCapture())
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:72:            $event->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:73:            $event->getInstance(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:74:            $event->getEventName(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:75:            $event->getHandle()
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:90:            $eventOnce->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:91:            $eventOnce->getInstance(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:92:            $eventOnce->getEventName(),
./src/Ivory/GoogleMap/Helper/Events/EventManagerHelper.php:93:            $eventOnce->getHandle()
./src/Ivory/GoogleMap/Helper/MapHelper.php:284:        $this->setCoordinateHelper($coordinateHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:285:        $this->setBoundHelper($boundHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:286:        $this->setPointHelper($pointHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:287:        $this->setSizeHelper($sizeHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:289:        $this->setMapTypeIdHelper($mapTypeIdHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:290:        $this->setMapTypeControlHelper($mapTypeControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:291:        $this->setOverviewMapControlHelper($overviewMapControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:292:        $this->setPanControlHelper($panControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:293:        $this->setRotateControlHelper($rotateControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:294:        $this->setScaleControlHelper($scaleControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:295:        $this->setStreetViewControlHelper($streetViewControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:296:        $this->setZoomControlHelper($zoomControlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:298:        $this->setMarkerClusterHelper($markerClusterHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:299:        $this->setMarkerImageHelper($markerImageHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:300:        $this->setMarkerShapeHelper($markerShapeHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:301:        $this->setInfoWindowHelper($infoWindowHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:302:        $this->setPolylineHelper($polylineHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:303:        $this->setEncodedPolylineHelper($encodedPolylineHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:304:        $this->setPolygonHelper($polygonHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:305:        $this->setRectangleHelper($rectangleHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:306:        $this->setCircleHelper($circleHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:307:        $this->setGroundOverlayHelper($groundOverlayHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:309:        $this->setKmlLayerHelper($kmlLayerHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:311:        $this->setEventManagerHelper($eventManagerHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:313:        $this->setExtensionHelpers($extensionHelpers);
./src/Ivory/GoogleMap/Helper/MapHelper.php:323:        return $this->coordinateHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:333:        $this->coordinateHelper = $coordinateHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:343:        return $this->boundHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:353:        $this->boundHelper = $boundHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:363:        return $this->pointHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:373:        $this->pointHelper = $pointHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:383:        return $this->sizeHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:393:        $this->sizeHelper = $sizeHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:403:        return $this->mapTypeIdHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:413:        $this->mapTypeIdHelper = $mapTypeIdHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:423:        return $this->mapTypeControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:433:        $this->mapTypeControlHelper = $mapTypeControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:443:        return $this->overviewMapControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:454:        $this->overviewMapControlHelper = $overviewMapControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:464:        return $this->panControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:474:        $this->panControlHelper = $panControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:484:        return $this->rotateControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:494:        $this->rotateControlHelper = $rotateControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:504:        return $this->scaleControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:514:        $this->scaleControlHelper = $scaleControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:524:        return $this->streetViewControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:535:        $this->streetViewControlHelper = $streetViewControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:545:        return $this->zoomControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:555:        $this->zoomControlHelper = $zoomControlHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:565:        return $this->markerClusterHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:575:        $this->markerClusterHelper = $markerClusterHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:585:        return $this->markerImageHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:595:        $this->markerImageHelper = $markerImageHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:605:        return $this->markerShapeHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:615:        $this->markerShapeHelper = $markerShapeHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:625:        return $this->infoWindowHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:635:        $this->infoWindowHelper = $infoWindowHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:645:        return $this->polylineHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:655:        $this->polylineHelper = $polylineHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:665:        return $this->encodedPolylineHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:675:        $this->encodedPolylineHelper = $encodedPolylineHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:685:        return $this->polygonHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:695:        $this->polygonHelper = $polygonHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:705:        return $this->rectangleHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:715:        $this->rectangleHelper = $rectangleHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:725:        return $this->circleHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:735:        $this->circleHelper = $circleHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:745:        return $this->groundOverlayHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:755:        $this->groundOverlayHelper = $groundOverlayHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:765:        return $this->kmlLayerHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:775:        $this->kmlLayerHelper = $kmlLayerHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:785:        return $this->eventManagerHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:795:        $this->eventManagerHelper = $eventManagerHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:805:        return !empty($this->extensionHelpers);
./src/Ivory/GoogleMap/Helper/MapHelper.php:815:        return $this->extensionHelpers;
./src/Ivory/GoogleMap/Helper/MapHelper.php:825:        $this->extensionHelpers = array();
./src/Ivory/GoogleMap/Helper/MapHelper.php:828:            $this->setExtensionHelper($name, $extensionHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:841:        return isset($this->extensionHelpers[$name]);
./src/Ivory/GoogleMap/Helper/MapHelper.php:855:        if (!$this->hasExtensionHelper($name)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:859:        return $this->extensionHelpers[$name];
./src/Ivory/GoogleMap/Helper/MapHelper.php:870:        $this->extensionHelpers[$name] = $extensionHelper;
./src/Ivory/GoogleMap/Helper/MapHelper.php:882:        if (!$this->hasExtensionHelper($name)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:886:        unset($this->extensionHelpers[$name]);
./src/Ivory/GoogleMap/Helper/MapHelper.php:899:            $this->renderHtmlContainer($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:900:            $this->renderStylesheets($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:901:            $this->renderJavascripts($map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:916:            $map->getHtmlContainerId(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:917:            $map->getStylesheetOption('width'),
./src/Ivory/GoogleMap/Helper/MapHelper.php:918:            $map->getStylesheetOption('height')
./src/Ivory/GoogleMap/Helper/MapHelper.php:934:        $html[] = '#'.$map->getHtmlContainerId().'{'.PHP_EOL;
./src/Ivory/GoogleMap/Helper/MapHelper.php:936:        foreach ($map->getStylesheetOptions() as $option => $value) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:957:        if (!$map->isAsync()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:958:            $output[] = $this->renderJsLibraries($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:962:        $output[] = $this->renderJsBefore($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:963:        $output[] = $this->renderJsContainer($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:964:        $output[] = $this->renderJsAfter($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:967:        if ($map->isAsync()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:968:            $output[] = $this->renderJsLibraries($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:985:        foreach ($this->getExtensionHelpers() as $extension) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:986:            $output[] = $extension->renderLibraries($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1003:        foreach ($this->getExtensionHelpers() as $extension) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1004:            $output[] = $extension->renderBefore($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1021:        foreach (array_reverse($this->getExtensionHelpers()) as $extension) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1022:            $output[] = $extension->renderAfter($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1039:        $output[] = $this->renderJsContainerInit($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1041:        $output[] = $this->renderJsContainerCoordinates($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1042:        $output[] = $this->renderJsContainerBounds($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1043:        $output[] = $this->renderJsContainerPoints($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1044:        $output[] = $this->renderJsContainerSizes($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1046:        $output[] = $this->renderJsContainerMap($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1048:        $output[] = $this->renderJsContainerCircles($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1049:        $output[] = $this->renderJsContainerEncodedPolylines($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1050:        $output[] = $this->renderJsContainerGroundOverlays($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1051:        $output[] = $this->renderJsContainerPolygons($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1052:        $output[] = $this->renderJsContainerPolylines($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1053:        $output[] = $this->renderJsContainerRectangles($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1054:        $output[] = $this->renderJsContainerInfoWindows($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1055:        $output[] = $this->renderJsContainerMarkerImages($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1056:        $output[] = $this->renderJsContainerMarkerShapes($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1057:        $output[] = $this->renderJsContainerMarkerCluster($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1059:        $output[] = $this->renderJsContainerKMLLayers($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1061:        $output[] = $this->renderJsContainerEventManager($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1063:        $output[] = $this->renderJsContainerExtra($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1077:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/MapHelper.php:1078:            ->reset()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1079:            ->setJsonEncodeOptions(JSON_FORCE_OBJECT)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1081:            ->setValue('[map]', null)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1083:            ->setValue('[coordinates]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1084:            ->setValue('[bounds]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1085:            ->setValue('[points]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1086:            ->setValue('[sizes]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1088:            ->setValue('[circles]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1089:            ->setValue('[encoded_polylines]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1090:            ->setValue('[ground_overlays]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1091:            ->setValue('[polygons]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1092:            ->setValue('[polylines]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1093:            ->setValue('[rectangles]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1094:            ->setValue('[info_windows]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1095:            ->setValue('[marker_images]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1096:            ->setValue('[marker_shapes]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1097:            ->setValue('[markers]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1098:            ->setValue('[marker_cluster]', null)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1100:            ->setValue('[kml_layers]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1102:            ->setValue('[event_manager][dom_events]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1103:            ->setValue('[event_manager][dom_events_once]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1104:            ->setValue('[event_manager][events]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1105:            ->setValue('[event_manager][events_once]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1107:            ->setValue('[closable_info_windows]', array())
./src/Ivory/GoogleMap/Helper/MapHelper.php:1108:            ->setValue(
./src/Ivory/GoogleMap/Helper/MapHelper.php:1114:        return sprintf('%s = %s;'.PHP_EOL, $this->getJsContainerName($map), $this->jsonBuilder->build());
./src/Ivory/GoogleMap/Helper/MapHelper.php:1128:        foreach ($this->computeCoordinates($map) as $coordinate) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1131:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1132:                $coordinate->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1133:                $this->coordinateHelper->render($coordinate)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1151:        foreach ($this->computeBounds($map) as $bound) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1154:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1155:                $bound->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1156:                $this->boundHelper->render($bound)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1174:        foreach ($this->computePoints($map) as $point) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1177:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1178:                $point->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1179:                $this->pointHelper->render($point)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1197:        foreach ($this->computeSizes($map) as $size) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1200:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1201:                $size->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1202:                $this->sizeHelper->render($size)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1218:        return sprintf('%s.map = %s', $this->getJsContainerName($map), $this->renderMap($map));
./src/Ivory/GoogleMap/Helper/MapHelper.php:1232:        foreach ($map->getCircles() as $circle) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1235:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1236:                $circle->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1237:                $this->circleHelper->render($circle, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1255:        foreach ($map->getEncodedPolylines() as $encodedPolyline) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1258:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1259:                $encodedPolyline->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1260:                $this->encodedPolylineHelper->render($encodedPolyline, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1278:        foreach ($map->getGroundOverlays() as $groundOverlay) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1281:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1282:                $groundOverlay->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1283:                $this->groundOverlayHelper->render($groundOverlay, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1301:        foreach ($map->getPolygons() as $polygon) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1304:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1305:                $polygon->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1306:                $this->polygonHelper->render($polygon, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1324:        foreach ($map->getPolylines() as $polyline) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1327:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1328:                $polyline->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1329:                $this->polylineHelper->render($polyline, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1347:        foreach ($map->getRectangles() as $rectangle) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1350:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1351:                $rectangle->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1352:                $this->rectangleHelper->render($rectangle, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1370:        $mapInfoWindows = $map->getInfoWindows();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1371:        $markerInfoWindows = $this->computeMarkerInfoWindows($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1376:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1377:                $mapInfoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1378:                $this->infoWindowHelper->render($mapInfoWindow)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1385:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1386:                $markerInfoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1387:                $this->infoWindowHelper->render($markerInfoWindow, false)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1392:            if ($infoWindow->isAutoClose()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1395:                    $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1396:                    $infoWindow->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1397:                    $infoWindow->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1416:        foreach ($this->computeMarkerImages($map) as $markerImage) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1419:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1420:                $markerImage->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1421:                $this->markerImageHelper->render($markerImage)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1439:        foreach ($this->computeMarkerShapes($map) as $markerShape) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1442:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1443:                $markerShape->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1444:                $this->markerShapeHelper->render($markerShape)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1461:            $this->markerClusterHelper->renderMarkers($map->getMarkerCluster(), $map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1462:            $this->markerClusterHelper->render($map->getMarkerCluster(), $map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1479:        foreach ($map->getKMLLayers() as $kmlLayer) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1482:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1483:                $kmlLayer->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1484:                $this->kmlLayerHelper->render($kmlLayer, $map)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1502:        foreach ($map->getEventManager()->getDomEvents() as $domEvent) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1505:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1506:                $domEvent->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1507:                $this->eventManagerHelper->renderDomEvent($domEvent)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1511:        foreach ($map->getEventManager()->getDomEventsOnce() as $domEventOnce) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1514:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1515:                $domEventOnce->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1516:                $this->eventManagerHelper->renderDomEventOnce($domEventOnce)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1520:        foreach ($map->getEventManager()->getEvents() as $event) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1523:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1524:                $event->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1525:                $this->eventManagerHelper->renderEvent($event)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1529:        foreach ($map->getEventManager()->getEventsOnce() as $eventOnce) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1532:                $this->getJsContainerName($map),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1533:                $eventOnce->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1534:                $this->eventManagerHelper->renderEventOnce($eventOnce)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1552:        foreach ($map->getInfoWindows() as $infoWindow) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1553:            if ($infoWindow->isOpen()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1554:                $output[] = $this->infoWindowHelper->renderOpen($infoWindow, $map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1558:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1559:            if ($marker->hasInfoWindow() && $marker->getInfoWindow()->isOpen()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1560:                $output[] = $this->infoWindowHelper->renderOpen($marker->getInfoWindow(), $map, $marker);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1564:        foreach ($this->computeBounds($map) as $bound) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1565:            if ($bound->hasExtends()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1566:                $output[] = $this->boundHelper->renderExtends($bound);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1570:        if ($map->isAutoZoom()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1571:            $output[] = $this->renderMapBound($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1573:            $output[] = $this->renderMapCenter($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1588:        $mapTypeId = $map->getMapOption('mapTypeId');
./src/Ivory/GoogleMap/Helper/MapHelper.php:1589:        $map->removeMapOption('mapTypeId');
./src/Ivory/GoogleMap/Helper/MapHelper.php:1591:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/MapHelper.php:1592:            ->reset()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1593:            ->setValue('[mapTypeId]', $this->mapTypeIdHelper->render($mapTypeId), false);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1595:        $this->renderMapControls($map);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1597:        if ($map->isAutoZoom()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1598:            $map->removeMapOption('zoom');
./src/Ivory/GoogleMap/Helper/MapHelper.php:1601:        $this->jsonBuilder->setValues($map->getMapOptions());
./src/Ivory/GoogleMap/Helper/MapHelper.php:1605:            $map->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1606:            $map->getHtmlContainerId(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1607:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1622:            $map->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1623:            $map->getCenter()->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1638:            $map->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1639:            $map->getBound()->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/MapHelper.php:1654:        if (!$map->isAutoZoom() && !in_array($map->getCenter(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1655:            $coordinates[] = $map->getCenter();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1658:        foreach ($this->computeBounds($map) as $bound) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1659:            if (!$bound->hasExtends() && $bound->hasCoordinates()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1660:                if (!in_array($bound->getSouthWest(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1661:                    $coordinates[] = $bound->getSouthWest();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1664:                if (!in_array($bound->getNorthEast(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1665:                    $coordinates[] = $bound->getNorthEast();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1670:        foreach ($map->getCircles() as $circle) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1671:            if (!in_array($circle->getCenter(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1672:                $coordinates[] = $circle->getCenter();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1676:        foreach ($map->getInfoWindows() as $infoWindow) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1677:            if (!in_array($infoWindow->getPosition(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1678:                $coordinates[] = $infoWindow->getPosition();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1682:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1683:            if (!in_array($marker->getPosition(), $coordinates)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1684:                $coordinates[] = $marker->getPosition();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1688:        foreach ($map->getPolygons() as $polygon) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1689:            foreach ($polygon->getCoordinates() as $polygonCoordinate) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1696:        foreach ($map->getPolylines() as $polyline) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1697:            foreach ($polyline->getCoordinates() as $polylineCoordinate) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1718:        if ($map->isAutoZoom() && !in_array($map->getBound(), $bounds)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1719:            $bounds[] = $map->getBound();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1722:        foreach ($map->getGroundOverlays() as $groundOverlay) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1723:            if (!in_array($groundOverlay->getBound(), $bounds)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1724:                $bounds[] = $groundOverlay->getBound();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1728:        foreach ($map->getRectangles() as $rectangle) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1729:            if (!in_array($rectangle->getBound(), $bounds)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1730:                $bounds[] = $rectangle->getBound();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1748:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1749:            if ($marker->hasIcon()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1750:                if ($marker->getIcon()->hasAnchor() && !in_array($marker->getIcon()->getAnchor(), $points)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1751:                    $points[] = $marker->getIcon()->getAnchor();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1754:                if ($marker->getIcon()->hasOrigin() && !in_array($marker->getIcon()->getOrigin(), $points)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1755:                    $points[] = $marker->getIcon()->getOrigin();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1759:            if ($marker->hasShadow()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1760:                if ($marker->getShadow()->hasAnchor() && !in_array($marker->getShadow()->getAnchor(), $points)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1761:                    $points[] = $marker->getShadow()->getAnchor();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1764:                if ($marker->getShadow()->hasOrigin() && !in_array($marker->getShadow()->getOrigin(), $points)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1765:                    $points[] = $marker->getShadow()->getOrigin();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1784:        foreach (array_merge($map->getInfoWindows(), $this->computeMarkerInfoWindows($map)) as $infoWindow) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1785:            if ($infoWindow->hasPixelOffset() && !in_array($infoWindow->getPixelOffset(), $sizes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1786:                $sizes[] = $infoWindow->getPixelOffset();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1790:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1791:            if ($marker->hasIcon()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1792:                if ($marker->getIcon()->hasSize() && !in_array($marker->getIcon()->getSize(), $sizes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1793:                    $sizes[] = $marker->getIcon()->getSize();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1796:                if ($marker->getIcon()->hasScaledSize() && !in_array($marker->getIcon()->getScaledSize(), $sizes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1797:                    $sizes[] = $marker->getIcon()->getScaledSize();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1801:            if ($marker->hasShadow()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1802:                if ($marker->getShadow()->hasSize() && !in_array($marker->getShadow()->getSize(), $sizes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1803:                    $sizes[] = $marker->getShadow()->getSize();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1806:                if ($marker->getShadow()->hasScaledSize() && !in_array($marker->getShadow()->getScaledSize(), $sizes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1807:                    $sizes[] = $marker->getShadow()->getScaledSize();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1826:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1827:            if ($marker->hasIcon() && !in_array($marker->getIcon(), $markerImages)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1828:                $markerImages[] = $marker->getIcon();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1831:            if ($marker->hasShadow() && !in_array($marker->getShadow(), $markerImages)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1832:                $markerImages[] = $marker->getShadow();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1850:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1851:            if ($marker->hasShape() && !in_array($marker->getShape(), $markerShapes)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1852:                $markerShapes[] = $marker->getShape();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1870:        foreach ($map->getMarkers() as $marker) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1871:            if ($marker->hasInfoWindow() && !in_array($marker->getInfoWindow(), $infoWinfows)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1872:                $infoWinfows[] = $marker->getInfoWindow();
./src/Ivory/GoogleMap/Helper/MapHelper.php:1898:            $this->renderMapControl($map, $controlName, $this->$controlHelper);
./src/Ivory/GoogleMap/Helper/MapHelper.php:1913:        if (!$map->hasMapOption($lcFirstControlName)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1917:        $this->jsonBuilder->setValue(
./src/Ivory/GoogleMap/Helper/MapHelper.php:1919:            (bool) $map->getMapOption($lcFirstControlName)
./src/Ivory/GoogleMap/Helper/MapHelper.php:1922:        if ($map->getMapOption($lcFirstControlName)) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1924:            if ($map->$hasControlMethod()) {
./src/Ivory/GoogleMap/Helper/MapHelper.php:1927:                $this->jsonBuilder->setValue(
./src/Ivory/GoogleMap/Helper/MapHelper.php:1929:                    $controlHelper->render($map->$getControlMethod()),
./src/Ivory/GoogleMap/Helper/MapHelper.php:1935:        $map->removeMapOption($lcFirstControlName);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:64:        $this->setApiHelper($apiHelper);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:65:        $this->setCoordinateHelper($coordinateHelper);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:66:        $this->setBoundHelper($boundHelper);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:76:        return $this->apiHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:86:        $this->apiHelper = $apiHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:96:        return $this->coordinateHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:106:        $this->coordinateHelper = $coordinateHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:116:        return $this->boundHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:126:        $this->boundHelper = $boundHelper;
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:138:        $inputAttributes = $autocomplete->getInputAttributes();
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:140:        $inputAttributes['id'] = $autocomplete->getInputId();
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:142:        if ($autocomplete->hasValue()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:143:            $inputAttributes['value'] = $autocomplete->getValue();
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:167:        if (!$this->apiHelper->isLoaded() && !$autocomplete->isAsync()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:168:            $output[] = $this->apiHelper->render($autocomplete->getLanguage(), array('places'));
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:173:        if ($autocomplete->isAsync()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:177:        if ($autocomplete->hasBound()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:178:            if (!$autocomplete->getBound()->hasCoordinates()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:182:            $output[] = $this->coordinateHelper->render($autocomplete->getBound()->getSouthWest());
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:183:            $output[] = $this->coordinateHelper->render($autocomplete->getBound()->getNorthEast());
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:184:            $output[] = $this->boundHelper->render($autocomplete->getBound());
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:187:        $output[] = $this->renderAutocomplete($autocomplete);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:189:        if ($autocomplete->isAsync()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:195:        if (!$this->apiHelper->isLoaded() && $autocomplete->isAsync()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:196:            $output[] = $this->apiHelper->render(
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:197:                $autocomplete->getLanguage(),
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:215:        $this->jsonBuilder->reset();
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:217:        if ($autocomplete->hasTypes()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:218:            $this->jsonBuilder->setValue('[types]', $autocomplete->getTypes());
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:221:        if ($autocomplete->hasBound()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:222:            $this->jsonBuilder->setValue('[bounds]', $autocomplete->getBound()->getJavascriptVariable(), false);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:225:        if ($autocomplete->hasComponentRestrictions()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:226:            $this->jsonBuilder->setValue('[componentRestrictions]', $autocomplete->getComponentRestrictions());
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:229:        if (!$this->jsonBuilder->hasValues()) {
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:230:            $this->jsonBuilder->setJsonEncodeOptions(JSON_FORCE_OBJECT);
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:235:            $autocomplete->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:236:            $autocomplete->getInputId(),
./src/Ivory/GoogleMap/Helper/Places/AutocompleteHelper.php:237:            $this->jsonBuilder->build()
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:32:        if ($size->hasUnits()) {
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:35:                $size->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:36:                $size->getWidth(),
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:37:                $size->getHeight(),
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:38:                $size->getWidthUnit(),
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:39:                $size->getHeightUnit()
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:45:            $size->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/SizeHelper.php:46:            $size->getWidth(), $size->getHeight()
./src/Ivory/GoogleMap/Helper/Base/CoordinateHelper.php:34:            $coordinate->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/CoordinateHelper.php:35:            $coordinate->getLatitude(),
./src/Ivory/GoogleMap/Helper/Base/CoordinateHelper.php:36:            $coordinate->getLongitude(),
./src/Ivory/GoogleMap/Helper/Base/CoordinateHelper.php:37:            json_encode($coordinate->isNoWrap())
./src/Ivory/GoogleMap/Helper/Base/PointHelper.php:34:            $point->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/PointHelper.php:35:            $point->getX(),
./src/Ivory/GoogleMap/Helper/Base/PointHelper.php:36:            $point->getY()
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:40:        if ($bound->hasExtends() || !$bound->hasCoordinates()) {
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:41:            return sprintf('%s = new google.maps.LatLngBounds();'.PHP_EOL, $bound->getJavascriptVariable());
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:46:            $bound->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:47:            $bound->getSouthWest()->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:48:            $bound->getNorthEast()->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:63:        foreach ($bound->getExtends() as $extend) {
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:67:                    $bound->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:68:                    $extend->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:76:                    $extend->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:77:                    $bound->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:82:                    $bound->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:83:                    $extend->getBound()->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:88:                    $bound->getJavascriptVariable(),
./src/Ivory/GoogleMap/Helper/Base/BoundHelper.php:89:                    $extend->getJavascriptVariable()
./src/Ivory/GoogleMap/Helper/ApiHelper.php:31:        $this->loaded = false;
./src/Ivory/GoogleMap/Helper/ApiHelper.php:44:            $this->loaded = (bool) $loaded;
./src/Ivory/GoogleMap/Helper/ApiHelper.php:47:        return $this->loaded;
./src/Ivory/GoogleMap/Helper/ApiHelper.php:76:        $this->jsonBuilder
./src/Ivory/GoogleMap/Helper/ApiHelper.php:77:            ->reset()
./src/Ivory/GoogleMap/Helper/ApiHelper.php:78:            ->setValue('[other_params]', urldecode(http_build_query($otherParameters)));
./src/Ivory/GoogleMap/Helper/ApiHelper.php:81:            $this->jsonBuilder->setValue('[callback]', $callback, false);
./src/Ivory/GoogleMap/Helper/ApiHelper.php:86:        $loader = sprintf('google.load("maps", "3", %s);', $this->jsonBuilder->build());
./src/Ivory/GoogleMap/Helper/ApiHelper.php:94:        $this->loaded = true;
./src/Ivory/GoogleMap/Helper/AbstractHelper.php:38:        $this->setJsonBuilder($jsonBuilder);
./src/Ivory/GoogleMap/Helper/AbstractHelper.php:48:        return $this->jsonBuilder;
./src/Ivory/GoogleMap/Helper/AbstractHelper.php:58:        $this->jsonBuilder = $jsonBuilder;
./src/Ivory/GoogleMap/Helper/AbstractHelper.php:70:        return $map->getJavascriptVariable().'_container';
./src/Ivory/GoogleMap/Map.php:128:        $this->setPrefixJavascriptVariable('map_');
./src/Ivory/GoogleMap/Map.php:130:        $this->htmlContainerId = 'map_canvas';
./src/Ivory/GoogleMap/Map.php:131:        $this->async = false;
./src/Ivory/GoogleMap/Map.php:132:        $this->autoZoom = false;
./src/Ivory/GoogleMap/Map.php:134:        $this->center = new Coordinate();
./src/Ivory/GoogleMap/Map.php:135:        $this->bound = new Bound();
./src/Ivory/GoogleMap/Map.php:136:        $this->eventManager = new EventManager();
./src/Ivory/GoogleMap/Map.php:138:        $this->mapOptions = array(
./src/Ivory/GoogleMap/Map.php:143:        $this->stylesheetOptions = array(
./src/Ivory/GoogleMap/Map.php:148:        $this->markerCluster = new MarkerCluster();
./src/Ivory/GoogleMap/Map.php:150:        $this->infoWindows = array();
./src/Ivory/GoogleMap/Map.php:151:        $this->polylines = array();
./src/Ivory/GoogleMap/Map.php:152:        $this->encodedPolylines = array();
./src/Ivory/GoogleMap/Map.php:153:        $this->polygons = array();
./src/Ivory/GoogleMap/Map.php:154:        $this->rectangles = array();
./src/Ivory/GoogleMap/Map.php:155:        $this->circles = array();
./src/Ivory/GoogleMap/Map.php:156:        $this->groundOverlays = array();
./src/Ivory/GoogleMap/Map.php:157:        $this->kmlLayers = array();
./src/Ivory/GoogleMap/Map.php:159:        $this->libraries = array();
./src/Ivory/GoogleMap/Map.php:160:        $this->language = 'en';
./src/Ivory/GoogleMap/Map.php:170:        return $this->htmlContainerId;
./src/Ivory/GoogleMap/Map.php:186:        $this->htmlContainerId = $htmlContainerId;
./src/Ivory/GoogleMap/Map.php:196:        return $this->async;
./src/Ivory/GoogleMap/Map.php:212:        $this->async = $async;
./src/Ivory/GoogleMap/Map.php:222:        return $this->autoZoom;
./src/Ivory/GoogleMap/Map.php:238:        $this->autoZoom = $autoZoom;
./src/Ivory/GoogleMap/Map.php:248:        return $this->center;
./src/Ivory/GoogleMap/Map.php:255:     *  - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)
./src/Ivory/GoogleMap/Map.php:256:     *  - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Map.php:265:            $this->center = $args[0];
./src/Ivory/GoogleMap/Map.php:267:            $this->center->setLatitude($args[0]);
./src/Ivory/GoogleMap/Map.php:268:            $this->center->setLongitude($args[1]);
./src/Ivory/GoogleMap/Map.php:271:                $this->center->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Map.php:285:        return $this->bound;
./src/Ivory/GoogleMap/Map.php:292:     *  - function setBound(Ivory\GoogleMap\Base\Bound $bound = null)
./src/Ivory/GoogleMap/Map.php:293:     *  - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./src/Ivory/GoogleMap/Map.php:294:     *  - function setBound(
./src/Ivory/GoogleMap/Map.php:310:            $this->bound = $args[0];
./src/Ivory/GoogleMap/Map.php:314:            $this->bound->setSouthWest($args[0]);
./src/Ivory/GoogleMap/Map.php:315:            $this->bound->setNorthEast($args[1]);
./src/Ivory/GoogleMap/Map.php:321:            $this->bound->setSouthWest(new Coordinate($args[0], $args[1]));
./src/Ivory/GoogleMap/Map.php:322:            $this->bound->setNorthEast(new Coordinate($args[2], $args[3]));
./src/Ivory/GoogleMap/Map.php:325:                $this->bound->getSouthWest()->setNoWrap($args[4]);
./src/Ivory/GoogleMap/Map.php:329:                $this->bound->getNorthEast()->setNoWrap($args[5]);
./src/Ivory/GoogleMap/Map.php:332:            $this->bound->setSouthWest(null);
./src/Ivory/GoogleMap/Map.php:333:            $this->bound->setNorthEast(null);
./src/Ivory/GoogleMap/Map.php:354:        return isset($this->mapOptions[$mapOption]);
./src/Ivory/GoogleMap/Map.php:364:        return $this->mapOptions;
./src/Ivory/GoogleMap/Map.php:375:            $this->setMapOption($mapOption, $value);
./src/Ivory/GoogleMap/Map.php:390:        if (!$this->hasMapOption($mapOption)) {
./src/Ivory/GoogleMap/Map.php:394:        return $this->mapOptions[$mapOption];
./src/Ivory/GoogleMap/Map.php:411:        $this->mapOptions[$mapOption] = $value;
./src/Ivory/GoogleMap/Map.php:423:        if (!$this->hasMapOption($mapOption)) {
./src/Ivory/GoogleMap/Map.php:427:        unset($this->mapOptions[$mapOption]);
./src/Ivory/GoogleMap/Map.php:445:        return isset($this->stylesheetOptions[$stylesheetOption]);
./src/Ivory/GoogleMap/Map.php:455:        return $this->stylesheetOptions;
./src/Ivory/GoogleMap/Map.php:466:            $this->setStylesheetOption($stylesheetOption, $value);
./src/Ivory/GoogleMap/Map.php:481:        if (!$this->hasStylesheetOption($stylesheetOption)) {
./src/Ivory/GoogleMap/Map.php:485:        return $this->stylesheetOptions[$stylesheetOption];
./src/Ivory/GoogleMap/Map.php:502:        $this->stylesheetOptions[$stylesheetOption] = $value;
./src/Ivory/GoogleMap/Map.php:514:        if (!$this->hasStylesheetOption($stylesheetOption)) {
./src/Ivory/GoogleMap/Map.php:518:        unset($this->stylesheetOptions[$stylesheetOption]);
./src/Ivory/GoogleMap/Map.php:528:        return $this->mapTypeControl !== null;
./src/Ivory/GoogleMap/Map.php:538:        return $this->mapTypeControl;
./src/Ivory/GoogleMap/Map.php:545:     *  - function setMapTypeControl(Ivory\GoogleMap\Controls\MapTypeControl $mapTypeControl = null)
./src/Ivory/GoogleMap/Map.php:546:     *  - function setMaptypeControl(array $mapTypeIds, string $controlPosition, string $mapTypeControlStyle)
./src/Ivory/GoogleMap/Map.php:555:            $this->mapTypeControl = $args[0];
./src/Ivory/GoogleMap/Map.php:556:            $this->mapOptions['mapTypeControl'] = true;
./src/Ivory/GoogleMap/Map.php:561:            if ($this->mapTypeControl === null) {
./src/Ivory/GoogleMap/Map.php:562:                $this->mapTypeControl = new MapTypeControl();
./src/Ivory/GoogleMap/Map.php:565:            $this->mapTypeControl->setMapTypeIds($args[0]);
./src/Ivory/GoogleMap/Map.php:566:            $this->mapTypeControl->setControlPosition($args[1]);
./src/Ivory/GoogleMap/Map.php:567:            $this->mapTypeControl->setMapTypeControlStyle($args[2]);
./src/Ivory/GoogleMap/Map.php:569:            $this->mapOptions['mapTypeControl'] = true;
./src/Ivory/GoogleMap/Map.php:571:            $this->mapTypeControl = null;
./src/Ivory/GoogleMap/Map.php:573:            if (isset($this->mapOptions['mapTypeControl'])) {
./src/Ivory/GoogleMap/Map.php:574:                unset($this->mapOptions['mapTypeControl']);
./src/Ivory/GoogleMap/Map.php:588:        return $this->overviewMapControl !== null;
./src/Ivory/GoogleMap/Map.php:598:        return $this->overviewMapControl;
./src/Ivory/GoogleMap/Map.php:605:     *  - function setOverviewMapControl(Ivory\GoogleMap\Controls\OverviewMapControl $overviewMapControl = null)
./src/Ivory/GoogleMap/Map.php:606:     *  - function setOverviewMapControl(boolean $opened)
./src/Ivory/GoogleMap/Map.php:615:            $this->overviewMapControl = $args[0];
./src/Ivory/GoogleMap/Map.php:616:            $this->mapOptions['overviewMapControl'] = true;
./src/Ivory/GoogleMap/Map.php:618:            if ($this->overviewMapControl === null) {
./src/Ivory/GoogleMap/Map.php:619:                $this->overviewMapControl = new OverviewMapControl();
./src/Ivory/GoogleMap/Map.php:622:            $this->overviewMapControl->setOpened($args[0]);
./src/Ivory/GoogleMap/Map.php:623:            $this->mapOptions['overviewMapControl'] = true;
./src/Ivory/GoogleMap/Map.php:625:            $this->overviewMapControl = null;
./src/Ivory/GoogleMap/Map.php:627:            if (isset($this->mapOptions['overviewMapControl'])) {
./src/Ivory/GoogleMap/Map.php:628:                unset($this->mapOptions['overviewMapControl']);
./src/Ivory/GoogleMap/Map.php:642:        return $this->panControl !== null;
./src/Ivory/GoogleMap/Map.php:652:        return $this->panControl;
./src/Ivory/GoogleMap/Map.php:659:     *  - function setPanControl(Ivory\GoogleMap\Controls\PanControl $panControl = null)
./src/Ivory/GoogleMap/Map.php:660:     *  - function setPanControl(string $controlPosition)
./src/Ivory/GoogleMap/Map.php:669:            $this->panControl = $args[0];
./src/Ivory/GoogleMap/Map.php:670:            $this->mapOptions['panControl'] = true;
./src/Ivory/GoogleMap/Map.php:672:            if ($this->panControl === null) {
./src/Ivory/GoogleMap/Map.php:673:                $this->panControl = new PanControl();
./src/Ivory/GoogleMap/Map.php:676:            $this->panControl->setControlPosition($args[0]);
./src/Ivory/GoogleMap/Map.php:677:            $this->mapOptions['panControl'] = true;
./src/Ivory/GoogleMap/Map.php:679:            $this->panControl = null;
./src/Ivory/GoogleMap/Map.php:681:            if (isset($this->mapOptions['panControl'])) {
./src/Ivory/GoogleMap/Map.php:682:                unset($this->mapOptions['panControl']);
./src/Ivory/GoogleMap/Map.php:696:        return $this->rotateControl !== null;
./src/Ivory/GoogleMap/Map.php:706:        return $this->rotateControl;
./src/Ivory/GoogleMap/Map.php:713:     *  - function setRotateControl(Ivory\GoogleMap\Controls\RotateControl $rotateControl = null)
./src/Ivory/GoogleMap/Map.php:714:     *  - function setRotateControl(string $controlPosition)
./src/Ivory/GoogleMap/Map.php:723:            $this->rotateControl = $args[0];
./src/Ivory/GoogleMap/Map.php:724:            $this->mapOptions['rotateControl'] = true;
./src/Ivory/GoogleMap/Map.php:726:            if ($this->rotateControl === null) {
./src/Ivory/GoogleMap/Map.php:727:                $this->rotateControl = new RotateControl();
./src/Ivory/GoogleMap/Map.php:730:            $this->rotateControl->setControlPosition($args[0]);
./src/Ivory/GoogleMap/Map.php:731:            $this->mapOptions['rotateControl'] = true;
./src/Ivory/GoogleMap/Map.php:733:            $this->rotateControl = null;
./src/Ivory/GoogleMap/Map.php:735:            if (isset($this->mapOptions['rotateControl'])) {
./src/Ivory/GoogleMap/Map.php:736:                unset($this->mapOptions['rotateControl']);
./src/Ivory/GoogleMap/Map.php:750:        return $this->scaleControl !== null;
./src/Ivory/GoogleMap/Map.php:760:        return $this->scaleControl;
./src/Ivory/GoogleMap/Map.php:767:     *  - function setScaleControl(Ivory\GoogleMap\Controls\ScaleControl $scaleControl = null)
./src/Ivory/GoogleMap/Map.php:768:     *  - function setScaleControl(string $controlPosition, string $scaleControlStyle)
./src/Ivory/GoogleMap/Map.php:777:            $this->scaleControl = $args[0];
./src/Ivory/GoogleMap/Map.php:778:            $this->mapOptions['scaleControl'] = true;
./src/Ivory/GoogleMap/Map.php:780:            if ($this->scaleControl === null) {
./src/Ivory/GoogleMap/Map.php:781:                $this->scaleControl = new ScaleControl();
./src/Ivory/GoogleMap/Map.php:784:            $this->scaleControl->setControlPosition($args[0]);
./src/Ivory/GoogleMap/Map.php:785:            $this->scaleControl->setScaleControlStyle($args[1]);
./src/Ivory/GoogleMap/Map.php:787:            $this->mapOptions['scaleControl'] = true;
./src/Ivory/GoogleMap/Map.php:789:            $this->scaleControl = null;
./src/Ivory/GoogleMap/Map.php:791:            if (isset($this->mapOptions['scaleControl'])) {
./src/Ivory/GoogleMap/Map.php:792:                unset($this->mapOptions['scaleControl']);
./src/Ivory/GoogleMap/Map.php:806:        return $this->streetViewControl !== null;
./src/Ivory/GoogleMap/Map.php:816:        return $this->streetViewControl;
./src/Ivory/GoogleMap/Map.php:823:     *  - function setStreetViewControl(Ivory\GoogleMap\Controls\StreetViewControl $streetViewControl = null)
./src/Ivory/GoogleMap/Map.php:824:     *  - function setStreetViewControl(string $controlPosition)
./src/Ivory/GoogleMap/Map.php:833:            $this->streetViewControl = $args[0];
./src/Ivory/GoogleMap/Map.php:834:            $this->mapOptions['streetViewControl'] = true;
./src/Ivory/GoogleMap/Map.php:836:            if ($this->streetViewControl === null) {
./src/Ivory/GoogleMap/Map.php:837:                $this->streetViewControl = new StreetViewControl();
./src/Ivory/GoogleMap/Map.php:840:            $this->streetViewControl->setControlPosition($args[0]);
./src/Ivory/GoogleMap/Map.php:841:            $this->mapOptions['streetViewControl'] = true;
./src/Ivory/GoogleMap/Map.php:843:            $this->streetViewControl = null;
./src/Ivory/GoogleMap/Map.php:845:            if (isset($this->mapOptions['streetViewControl'])) {
./src/Ivory/GoogleMap/Map.php:846:                unset($this->mapOptions['streetViewControl']);
./src/Ivory/GoogleMap/Map.php:860:        return $this->zoomControl !== null;
./src/Ivory/GoogleMap/Map.php:870:        return $this->zoomControl;
./src/Ivory/GoogleMap/Map.php:877:     *  - function setZoomControl(Ivory\GoogleMap\Controls\ZoomControl $zoomControl = null)
./src/Ivory/GoogleMap/Map.php:878:     *  - function setZoomControl(string $controlPosition, string $zoomControlStyle)
./src/Ivory/GoogleMap/Map.php:887:            $this->zoomControl = $args[0];
./src/Ivory/GoogleMap/Map.php:888:            $this->mapOptions['zoomControl'] = true;
./src/Ivory/GoogleMap/Map.php:890:            if ($this->zoomControl === null) {
./src/Ivory/GoogleMap/Map.php:891:                $this->zoomControl = new ZoomControl();
./src/Ivory/GoogleMap/Map.php:894:            $this->zoomControl->setControlPosition($args[0]);
./src/Ivory/GoogleMap/Map.php:895:            $this->zoomControl->setZoomControlStyle($args[1]);
./src/Ivory/GoogleMap/Map.php:897:            $this->mapOptions['zoomControl'] = true;
./src/Ivory/GoogleMap/Map.php:899:            $this->zoomControl = null;
./src/Ivory/GoogleMap/Map.php:901:            if (isset($this->mapOptions['zoomControl'])) {
./src/Ivory/GoogleMap/Map.php:902:                unset($this->mapOptions['zoomControl']);
./src/Ivory/GoogleMap/Map.php:916:        return $this->eventManager;
./src/Ivory/GoogleMap/Map.php:926:        $this->eventManager = $eventManager;
./src/Ivory/GoogleMap/Map.php:936:        return $this->markerCluster;
./src/Ivory/GoogleMap/Map.php:946:        $this->markerCluster = $markerCluster;
./src/Ivory/GoogleMap/Map.php:956:        return $this->markerCluster->getMarkers();
./src/Ivory/GoogleMap/Map.php:966:        $this->markerCluster->addMarker($marker);
./src/Ivory/GoogleMap/Map.php:968:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:969:            $this->bound->extend($marker);
./src/Ivory/GoogleMap/Map.php:980:        return $this->infoWindows;
./src/Ivory/GoogleMap/Map.php:990:        $this->infoWindows[] = $infoWindow;
./src/Ivory/GoogleMap/Map.php:992:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:993:            $this->bound->extend($infoWindow);
./src/Ivory/GoogleMap/Map.php:1004:        return $this->polylines;
./src/Ivory/GoogleMap/Map.php:1014:        $this->polylines[] = $polyline;
./src/Ivory/GoogleMap/Map.php:1016:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1017:            $this->bound->extend($polyline);
./src/Ivory/GoogleMap/Map.php:1028:        return $this->encodedPolylines;
./src/Ivory/GoogleMap/Map.php:1038:        $this->encodedPolylines[] = $encodedPolyline;
./src/Ivory/GoogleMap/Map.php:1040:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1041:            $this->bound->extend($encodedPolyline);
./src/Ivory/GoogleMap/Map.php:1052:        return $this->polygons;
./src/Ivory/GoogleMap/Map.php:1062:        $this->polygons[] = $polygon;
./src/Ivory/GoogleMap/Map.php:1064:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1065:            $this->bound->extend($polygon);
./src/Ivory/GoogleMap/Map.php:1076:        return $this->rectangles;
./src/Ivory/GoogleMap/Map.php:1086:        $this->rectangles[] = $rectangle;
./src/Ivory/GoogleMap/Map.php:1088:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1089:            $this->bound->extend($rectangle);
./src/Ivory/GoogleMap/Map.php:1100:        return $this->circles;
./src/Ivory/GoogleMap/Map.php:1110:        $this->circles[] = $circle;
./src/Ivory/GoogleMap/Map.php:1112:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1113:            $this->bound->extend($circle);
./src/Ivory/GoogleMap/Map.php:1124:        return $this->groundOverlays;
./src/Ivory/GoogleMap/Map.php:1134:        $this->groundOverlays[] = $groundOverlay;
./src/Ivory/GoogleMap/Map.php:1136:        if ($this->autoZoom) {
./src/Ivory/GoogleMap/Map.php:1137:            $this->bound->extend($groundOverlay);
./src/Ivory/GoogleMap/Map.php:1148:        return $this->kmlLayers;
./src/Ivory/GoogleMap/Map.php:1158:        $this->kmlLayers[] = $kmlLayer;
./src/Ivory/GoogleMap/Map.php:1168:        return !empty($this->libraries);
./src/Ivory/GoogleMap/Map.php:1178:        return $this->libraries;
./src/Ivory/GoogleMap/Map.php:1188:        $this->libraries = $libraries;
./src/Ivory/GoogleMap/Map.php:1198:        return $this->language;
./src/Ivory/GoogleMap/Map.php:1208:        $this->language = $language;
./src/Ivory/GoogleMap/Overlays/Marker.php:64:        $this->setPrefixJavascriptVariable('marker_');
./src/Ivory/GoogleMap/Overlays/Marker.php:70:        $this->setPosition($position);
./src/Ivory/GoogleMap/Overlays/Marker.php:73:            $this->setAnimation($animation);
./src/Ivory/GoogleMap/Overlays/Marker.php:77:            $this->setIcon($icon);
./src/Ivory/GoogleMap/Overlays/Marker.php:81:            $this->setShadow($shadow);
./src/Ivory/GoogleMap/Overlays/Marker.php:85:            $this->setShape($shape);
./src/Ivory/GoogleMap/Overlays/Marker.php:89:            $this->setInfoWindow($infoWindow);
./src/Ivory/GoogleMap/Overlays/Marker.php:100:        return $this->position;
./src/Ivory/GoogleMap/Overlays/Marker.php:107:     * - function setPosition(Ivory\GoogleMap\Base\Coordinate $position = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:108:     * - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Overlays/Marker.php:117:            $this->position = $args[0];
./src/Ivory/GoogleMap/Overlays/Marker.php:119:            $this->position->setLatitude($args[0]);
./src/Ivory/GoogleMap/Overlays/Marker.php:120:            $this->position->setLongitude($args[1]);
./src/Ivory/GoogleMap/Overlays/Marker.php:123:                $this->position->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Overlays/Marker.php:126:            $this->position = null;
./src/Ivory/GoogleMap/Overlays/Marker.php:139:        return $this->animation !== null;
./src/Ivory/GoogleMap/Overlays/Marker.php:149:        return $this->animation;
./src/Ivory/GoogleMap/Overlays/Marker.php:165:        $this->animation = $animation;
./src/Ivory/GoogleMap/Overlays/Marker.php:175:        return $this->icon !== null;
./src/Ivory/GoogleMap/Overlays/Marker.php:185:        return $this->icon;
./src/Ivory/GoogleMap/Overlays/Marker.php:192:     *  - function setIcon(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:193:     *  - function setIcon(string $url = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:202:            if ($args[0]->getUrl() === null) {
./src/Ivory/GoogleMap/Overlays/Marker.php:206:            $this->icon = $args[0];
./src/Ivory/GoogleMap/Overlays/Marker.php:208:            if ($this->icon === null) {
./src/Ivory/GoogleMap/Overlays/Marker.php:209:                $this->icon = new MarkerImage();
./src/Ivory/GoogleMap/Overlays/Marker.php:212:            $this->icon->setUrl($args[0]);
./src/Ivory/GoogleMap/Overlays/Marker.php:214:            $this->icon = null;
./src/Ivory/GoogleMap/Overlays/Marker.php:227:        return $this->shadow !== null;
./src/Ivory/GoogleMap/Overlays/Marker.php:237:        return $this->shadow;
./src/Ivory/GoogleMap/Overlays/Marker.php:244:     *  - function setShadow(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:245:     *  - function setShadow(string $url = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:254:            if ($args[0]->getUrl() === null) {
./src/Ivory/GoogleMap/Overlays/Marker.php:258:            $this->shadow = $args[0];
./src/Ivory/GoogleMap/Overlays/Marker.php:260:            if ($this->shadow === null) {
./src/Ivory/GoogleMap/Overlays/Marker.php:261:                $this->shadow = new MarkerImage();
./src/Ivory/GoogleMap/Overlays/Marker.php:264:            $this->shadow->setUrl($args[0]);
./src/Ivory/GoogleMap/Overlays/Marker.php:266:            $this->shadow = null;
./src/Ivory/GoogleMap/Overlays/Marker.php:279:        return $this->shape !== null;
./src/Ivory/GoogleMap/Overlays/Marker.php:289:        return $this->shape;
./src/Ivory/GoogleMap/Overlays/Marker.php:296:     *  - function setShape(Ivory\GoogleMap\Overlays\MarkerShape $shape = null)
./src/Ivory/GoogleMap/Overlays/Marker.php:297:     *  - function setShape(string $type, array $coordinates)
./src/Ivory/GoogleMap/Overlays/Marker.php:306:            if (!$args[0]->hasCoordinates()) {
./src/Ivory/GoogleMap/Overlays/Marker.php:310:            $this->shape = $args[0];
./src/Ivory/GoogleMap/Overlays/Marker.php:312:            if ($this->shape === null) {
./src/Ivory/GoogleMap/Overlays/Marker.php:313:                $this->shape = new MarkerShape();
./src/Ivory/GoogleMap/Overlays/Marker.php:316:            $this->shape->setType($args[0]);
./src/Ivory/GoogleMap/Overlays/Marker.php:317:            $this->shape->setCoordinates($args[1]);
./src/Ivory/GoogleMap/Overlays/Marker.php:319:            $this->shape = null;
./src/Ivory/GoogleMap/Overlays/Marker.php:332:        return $this->infoWindow !== null;
./src/Ivory/GoogleMap/Overlays/Marker.php:342:        return $this->infoWindow;
./src/Ivory/GoogleMap/Overlays/Marker.php:352:        $this->infoWindow = $infoWindow;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:52:        $this->setPrefixJavascriptVariable('marker_image_');
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:53:        $this->setUrl($url);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:56:            $this->setAnchor($anchor);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:60:            $this->setOrigin($origin);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:64:            $this->setScaledSize($scaledSize);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:68:            $this->setSize($size);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:79:        return $this->url;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:95:        $this->url = $url;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:105:        return $this->anchor !== null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:115:        return $this->anchor;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:122:     *  - function setAnchor(Ivory\GoogleMap\Base\Point $anchor = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:123:     *  - function setAnchor(double x, double y)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:132:            $this->anchor = $args[0];
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:134:            if ($this->anchor === null) {
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:135:                $this->anchor = new Point();
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:138:            $this->anchor->setX($args[0]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:139:            $this->anchor->setY($args[1]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:141:            $this->anchor = null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:154:        return $this->origin !== null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:164:        return $this->origin;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:171:     *  - function setOrigin(Ivory\GoogleMap\Base\Point $origin = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:172:     *  - function setOrigin(double x, double y)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:181:            $this->origin = $args[0];
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:183:            if ($this->origin === null) {
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:184:                $this->origin = new Point();
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:187:            $this->origin->setX($args[0]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:188:            $this->origin->setY($args[1]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:190:            $this->origin = null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:203:        return $this->scaledSize !== null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:213:        return $this->scaledSize;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:220:     *  - function setScaledSize(Ivory\GoogleMap\Base\Size $scaledSize = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:221:     *  - function setScaledSize(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:230:            $this->scaledSize = $args[0];
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:232:            if ($this->scaledSize === null) {
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:233:                $this->scaledSize = new Size();
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:236:            $this->scaledSize->setWidth($args[0]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:237:            $this->scaledSize->setHeight($args[1]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:240:                $this->scaledSize->setWidthUnit($args[2]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:244:                $this->scaledSize->setHeightUnit($args[3]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:247:            $this->scaledSize = null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:260:        return $this->size !== null;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:270:        return $this->size;
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:277:     *  - function setSize(Ivory\GoogleMap\Base\Size $size = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:278:     *  - function setSize(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:287:            $this->size = $args[0];
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:289:            if ($this->size === null) {
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:290:                $this->size = new Size($args[0], $args[1]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:293:            $this->size->setWidth($args[0]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:294:            $this->size->setHeight($args[1]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:297:                $this->size->setWidthUnit($args[2]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:301:                $this->size->setHeightUnit($args[3]);
./src/Ivory/GoogleMap/Overlays/MarkerImage.php:304:            $this->size = null;
./src/Ivory/GoogleMap/Overlays/EncodedPolyline.php:37:        $this->setPrefixJavascriptVariable('encoded_polyline_');
./src/Ivory/GoogleMap/Overlays/EncodedPolyline.php:40:            $this->setValue($value);
./src/Ivory/GoogleMap/Overlays/EncodedPolyline.php:51:        return $this->value;
./src/Ivory/GoogleMap/Overlays/EncodedPolyline.php:67:        $this->value = $value;
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:43:        $this->setPrefixJavascriptVariable('ground_overlay_');
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:46:            $this->setUrl($url);
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:50:            $bound = new Bound(new Coordinate(-1, -1), new Coordinate(1, 1));
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:53:        $this->setBound($bound);
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:63:        return $this->url;
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:77:        $this->url = $url;
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:87:        return $this->bound;
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:94:     *  - function setBound(Ivory\GoogleMap\Base\Bound $bound)
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:95:     *  - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:96:     *  - function setBound(
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:112:            if ($args[0]->hasCoordinates()) {
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:113:                $this->bound = $args[0];
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:120:            $this->bound->setSouthWest($args[0]);
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:121:            $this->bound->setNorthEast($args[1]);
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:127:            $this->bound->setSouthWest(new Coordinate($args[0], $args[1]));
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:128:            $this->bound->setNorthEast(new Coordinate($args[2], $args[3]));
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:131:                $this->bound->getSouthWest()->setNoWrap($args[4]);
./src/Ivory/GoogleMap/Overlays/GroundOverlay.php:135:                $this->bound->getNorthEast()->setNoWrap($args[5]);
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:42:        $this->setPrefixJavascriptVariable('marker_cluster_');
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:43:        $this->setType(self::_DEFAULT);
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:44:        $this->markers = array();
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:54:        return $this->type;
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:64:        $this->type = $type;
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:74:        return !empty($this->markers);
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:84:        return $this->markers;
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:94:        $this->markers = array();
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:97:            $this->addMarker($marker);
./src/Ivory/GoogleMap/Overlays/MarkerCluster.php:108:        $this->markers[] = $marker;
./src/Ivory/GoogleMap/Overlays/Circle.php:42:        $this->setPrefixJavascriptVariable('circle_');
./src/Ivory/GoogleMap/Overlays/Circle.php:48:        $this->setCenter($center);
./src/Ivory/GoogleMap/Overlays/Circle.php:49:        $this->setRadius($radius);
./src/Ivory/GoogleMap/Overlays/Circle.php:59:        return $this->center;
./src/Ivory/GoogleMap/Overlays/Circle.php:66:     *  - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)
./src/Ivory/GoogleMap/Overlays/Circle.php:67:     *  - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Overlays/Circle.php:76:            $this->center = $args[0];
./src/Ivory/GoogleMap/Overlays/Circle.php:78:            $this->center->setLatitude($args[0]);
./src/Ivory/GoogleMap/Overlays/Circle.php:79:            $this->center->setLongitude($args[1]);
./src/Ivory/GoogleMap/Overlays/Circle.php:82:                $this->center->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Overlays/Circle.php:96:        return $this->radius;
./src/Ivory/GoogleMap/Overlays/Circle.php:112:        $this->radius = $radius;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:37:    public function __construct($type = 'poly', array $coordinates = array(1, 1, 1, -1, -1, -1, -1, 1))
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:39:        $this->setPrefixJavascriptVariable('marker_shape_');
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:40:        $this->setType($type);
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:41:        $this->setCoordinates($coordinates);
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:51:        return $this->type;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:69:                $this->type = $type;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:81:        $this->coordinates = array();
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:91:        return !empty($this->coordinates);
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:101:        return $this->coordinates;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:113:        switch (strtolower($this->type)) {
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:120:                    $this->coordinates = $coordinates;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:136:                $this->coordinates = $coordinates;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:145:                    $this->coordinates = $coordinates;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:164:        if ($this->type !== 'poly') {
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:172:        $this->coordinates[] = $x;
./src/Ivory/GoogleMap/Overlays/MarkerShape.php:173:        $this->coordinates[] = $y;
./src/Ivory/GoogleMap/Overlays/Polygon.php:38:        $this->setPrefixJavascriptVariable('polygon_');
./src/Ivory/GoogleMap/Overlays/Polygon.php:39:        $this->setCoordinates($coordinates);
./src/Ivory/GoogleMap/Overlays/Polygon.php:49:        return !empty($this->coordinates);
./src/Ivory/GoogleMap/Overlays/Polygon.php:59:        return $this->coordinates;
./src/Ivory/GoogleMap/Overlays/Polygon.php:69:        $this->coordinates = array();
./src/Ivory/GoogleMap/Overlays/Polygon.php:72:            $this->addCoordinate($coordinate);
./src/Ivory/GoogleMap/Overlays/Polygon.php:80:     *  - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)
./src/Ivory/GoogleMap/Overlays/Polygon.php:81:     *  - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Overlays/Polygon.php:90:            $this->coordinates[] = $args[0];
./src/Ivory/GoogleMap/Overlays/Polygon.php:95:                $coordinate->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Overlays/Polygon.php:98:            $this->coordinates[] = $coordinate;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:71:        $this->setPrefixJavascriptVariable('info_window_');
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:73:        $this->setContent($content);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:76:            $this->setPosition($position);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:80:            $this->setPixelOffset($pixelOffset);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:83:        $this->setOpen($open);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:84:        $this->setOpenEvent($openEvent);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:86:        $this->setAutoOpen($autoOpen);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:87:        $this->setAutoClose($autoClose);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:97:        return $this->position;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:104:     *  - function setPosition(Ivory\GoogleMap\Base\Coordinate $position = null)
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:105:     *  - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:114:            $this->position = $args[0];
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:116:            if ($this->position === null) {
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:117:                $this->position = new Coordinate();
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:120:            $this->position->setLatitude($args[0]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:121:            $this->position->setLongitude($args[1]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:124:                $this->position->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:127:            $this->position = null;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:140:        return $this->pixedOffset !== null;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:150:        return $this->pixedOffset;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:157:     *  - function setPixelOffset(Ivory\GoogleMap\Base\Size $scaledSize)
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:158:     *  - function setPixelOffset(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:167:            $this->pixedOffset = $args[0];
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:169:            if ($this->pixedOffset === null) {
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:170:                $this->pixedOffset = new Size();
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:173:            $this->pixedOffset->setWidth($args[0]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:174:            $this->pixedOffset->setHeight($args[1]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:177:                $this->pixedOffset->setWidthUnit($args[2]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:181:                $this->pixedOffset->setHeightUnit($args[3]);
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:184:            $this->pixedOffset = null;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:197:        return $this->content;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:213:        $this->content = $content;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:223:        return $this->open;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:239:        $this->open = $open;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:249:        return $this->autoOpen;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:265:        $this->autoOpen = $autoOpen;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:275:        return $this->openEvent;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:291:        $this->openEvent = $openEvent;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:301:        return $this->autoClose;
./src/Ivory/GoogleMap/Overlays/InfoWindow.php:317:        $this->autoClose = $autoClose;
./src/Ivory/GoogleMap/Overlays/Polyline.php:38:        $this->setPrefixJavascriptVariable('polyline_');
./src/Ivory/GoogleMap/Overlays/Polyline.php:39:        $this->setCoordinates($coordinates);
./src/Ivory/GoogleMap/Overlays/Polyline.php:49:        return !empty($this->coordinates);
./src/Ivory/GoogleMap/Overlays/Polyline.php:59:        return $this->coordinates;
./src/Ivory/GoogleMap/Overlays/Polyline.php:69:        $this->coordinates = array();
./src/Ivory/GoogleMap/Overlays/Polyline.php:72:            $this->addCoordinate($coordinate);
./src/Ivory/GoogleMap/Overlays/Polyline.php:80:     *  - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)
./src/Ivory/GoogleMap/Overlays/Polyline.php:81:     *  - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Overlays/Polyline.php:90:            $this->coordinates[] = $args[0];
./src/Ivory/GoogleMap/Overlays/Polyline.php:95:                $coordinate->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Overlays/Polyline.php:98:            $this->coordinates[] = $coordinate;
./src/Ivory/GoogleMap/Overlays/Rectangle.php:36:        $this->setPrefixJavascriptVariable('rectangle_');
./src/Ivory/GoogleMap/Overlays/Rectangle.php:39:            $bound = new Bound(new Coordinate(-1, -1), new Coordinate(1, 1));
./src/Ivory/GoogleMap/Overlays/Rectangle.php:42:        $this->setBound($bound);
./src/Ivory/GoogleMap/Overlays/Rectangle.php:52:        return $this->bound;
./src/Ivory/GoogleMap/Overlays/Rectangle.php:59:     *  - function setBound(Ivory\GoogleMap\Base\Bound $bound)
./src/Ivory/GoogleMap/Overlays/Rectangle.php:60:     *  - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./src/Ivory/GoogleMap/Overlays/Rectangle.php:61:     *  - function setBound(
./src/Ivory/GoogleMap/Overlays/Rectangle.php:77:            if (!$args[0]->hasCoordinates()) {
./src/Ivory/GoogleMap/Overlays/Rectangle.php:81:            $this->bound = $args[0];
./src/Ivory/GoogleMap/Overlays/Rectangle.php:85:            $this->bound->setSouthWest($args[0]);
./src/Ivory/GoogleMap/Overlays/Rectangle.php:86:            $this->bound->setNorthEast($args[1]);
./src/Ivory/GoogleMap/Overlays/Rectangle.php:92:            $this->bound->setSouthWest(new Coordinate($args[0], $args[1]));
./src/Ivory/GoogleMap/Overlays/Rectangle.php:93:            $this->bound->setNorthEast(new Coordinate($args[2], $args[3]));
./src/Ivory/GoogleMap/Overlays/Rectangle.php:96:                $this->bound->getSouthWest()->setNoWrap($args[4]);
./src/Ivory/GoogleMap/Overlays/Rectangle.php:100:                $this->bound->getNorthEast()->setNoWrap($args[5]);
./src/Ivory/GoogleMap/Assets/AbstractJavascriptVariableAsset.php:32:            $javascriptVariable = $this->generateJavascriptVariable();
./src/Ivory/GoogleMap/Assets/AbstractJavascriptVariableAsset.php:35:        $this->setJavascriptVariable($javascriptVariable);
./src/Ivory/GoogleMap/Assets/AbstractJavascriptVariableAsset.php:51:        $this->javascriptVariable = $this->generateJavascriptVariable($prefixJavascriptVariable);
./src/Ivory/GoogleMap/Assets/AbstractJavascriptVariableAsset.php:61:        return $this->javascriptVariable;
./src/Ivory/GoogleMap/Assets/AbstractJavascriptVariableAsset.php:77:        $this->javascriptVariable = $javascriptVariable;
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:36:        $this->setOptions($options);
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:46:        return !empty($this->options);
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:64:        return isset($this->options[$option]);
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:74:        return $this->options;
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:84:        $this->options = array();
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:87:            $this->setOption($option, $value);
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:102:        if (!$this->hasOption($option)) {
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:106:        return $this->options[$option];
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:123:        $this->options[$option] = $value;
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:135:        if (!$this->hasOption($option)) {
./src/Ivory/GoogleMap/Assets/AbstractOptionsAsset.php:139:        unset($this->options[$option]);
./src/Ivory/GoogleMap/Layers/KMLLayer.php:36:        $this->setPrefixJavascriptVariable('kml_layer_');
./src/Ivory/GoogleMap/Layers/KMLLayer.php:39:            $this->setUrl($url);
./src/Ivory/GoogleMap/Layers/KMLLayer.php:50:        return $this->url;
./src/Ivory/GoogleMap/Layers/KMLLayer.php:66:        $this->url = $url;
./src/Ivory/GoogleMap/Exception/GeocodingException.php:114:            ' - function geocode(string $address)',
./src/Ivory/GoogleMap/Exception/GeocodingException.php:115:            ' - function geocode(Ivory\GoogleMap\Services\Geocoding\GeocoderRequest $request)'
./src/Ivory/GoogleMap/Exception/GeocodingException.php:150:            ' - function setBound(Ivory\GoogleMap\Base\Bound $bound = null)',
./src/Ivory/GoogleMap/Exception/GeocodingException.php:151:            ' - function setBound('.
./src/Ivory/GoogleMap/Exception/GeocodingException.php:155:            ' - function setBound('.
./src/Ivory/GoogleMap/Exception/GeocodingException.php:177:            ' - function setCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate = null)',
./src/Ivory/GoogleMap/Exception/GeocodingException.php:178:            ' - function setCoordinate(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:48:            '- function process(array $origins, array $destinations)',
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:49:            '- function process(Ivory\GoogleMap\Services\DistanceMatrix\DistanceMatrixRequest $request)'
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:64:            ' - function addDestination(string $destination)',
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:65:            ' - function addDestination(Ivory\GoogleMap\Base\Coordinate $destination)',
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:66:            ' - function addDestination(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:81:            ' - function addOrigin(string $origin)',
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:82:            ' - function addOrigin(Ivory\GoogleMap\Base\Coordinate $origin)',
./src/Ivory/GoogleMap/Exception/DistanceMatrixException.php:83:            ' - function addOrigin(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:35:            ' - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:36:            ' - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:91:            ' - public function setBound(Ivory\GoogleMapBundle\Model\Base\Bound $bound)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:92:            ' - public function setBount('.
./src/Ivory/GoogleMap/Exception/OverlayException.php:96:            ' - public function setBound('.
./src/Ivory/GoogleMap/Exception/OverlayException.php:171:            ' - function setPosition(Ivory\GoogleMap\Base\Coordinate $position)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:172:            ' - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:187:            ' - function setPixelOffset(Ivory\GoogleMap\Base\Size $scaledSize)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:188:            ' - function setPixelOffset('.
./src/Ivory/GoogleMap/Exception/OverlayException.php:221:            ' - function setIcon(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:222:            ' - function setIcon(string $url = null)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:247:            ' - function setAnchor(Ivory\GoogleMap\Base\Point $anchor)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:248:            ' - function setAnchor(double x, double y)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:263:            ' - function setOrigin(Ivory\GoogleMap\Base\Point $origin)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:264:            ' - function setOrigin(double x, double y)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:279:            ' - function setScaledSize(Ivory\GoogleMap\Base\Size $scaledSize = null)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:280:            ' - function setScaledSize('.
./src/Ivory/GoogleMap/Exception/OverlayException.php:300:            ' - function setSize(Ivory\GoogleMap\Base\Size $size = null)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:301:            ' - function setSize(double $width, double $height, string $widthUnit = null, string $heightUnit = null)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:326:            ' - function setPosition(Ivory\GoogleMap\Base\Coordinate $position)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:327:            ' - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:352:            ' - function setShadow(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:353:            ' - function setShadow(string $url = null)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:368:            ' - function setShape(Ivory\GoogleMap\Overlays\MarkerShape $shape = null)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:369:            ' - function setShape(string $type, array $coordinates)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:479:            ' - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:480:            ' - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:495:            ' - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:496:            ' - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/OverlayException.php:511:            ' - function setBound(Ivory\GoogleMap\Base\Bound $bound)',
./src/Ivory/GoogleMap/Exception/OverlayException.php:512:            ' - function setBount('.
./src/Ivory/GoogleMap/Exception/OverlayException.php:516:            ' - function setBound('.
./src/Ivory/GoogleMap/Exception/PlaceException.php:93:            ' - function setBound(Ivory\GoogleMap\Base\Bound $bound)',
./src/Ivory/GoogleMap/Exception/PlaceException.php:94:            ' - function setBount('.
./src/Ivory/GoogleMap/Exception/PlaceException.php:98:            ' - function setBound('.
./src/Ivory/GoogleMap/Exception/DirectionsException.php:71:            '- function route(string $origin, string $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:72:            '- function route(Ivory\GoogleMap\Services\Directions\DirectionsRequest $request)'
./src/Ivory/GoogleMap/Exception/DirectionsException.php:107:            ' - function setDestination(string $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:108:            ' - function setDestination(Ivory\GoogleMap\Base\Coordinate $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:109:            ' - function setDestination(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/DirectionsException.php:135:            ' - function setOrigin(string $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:136:            ' - function setOrigin(Ivory\GoogleMap\Base\Coordinate $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:137:            ' - function setOrigin(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/DirectionsException.php:219:            ' - function addWaypoint(Ivory\GoogleMap\Services\Directions\DirectionsWaypoint $waypoint)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:220:            ' - function addWaypoint(string $location)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:221:            ' - function addWaypoint(Ivory\GoogleMap\Base\Coordinate $location)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:222:            ' - function addWaypoint(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/DirectionsException.php:313:            ' - function setLocation(string $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:314:            ' - function setLocation(Ivory\GoogleMap\Base\Coordinate $destination)',
./src/Ivory/GoogleMap/Exception/DirectionsException.php:315:            ' - function setLocation(double $latitude, double $longitude, boolean $noWrap)'
./src/Ivory/GoogleMap/Exception/MapException.php:52:            ' - function setBound(Ivory\GoogleMap\Base\Bound $bound)',
./src/Ivory/GoogleMap/Exception/MapException.php:53:            ' - function setBount('.
./src/Ivory/GoogleMap/Exception/MapException.php:57:            ' - function setBound('.
./src/Ivory/GoogleMap/Exception/MapException.php:79:            ' - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)',
./src/Ivory/GoogleMap/Exception/MapException.php:80:            ' - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/MapException.php:115:            ' - function setMapTypeControl(Ivory\GoogleMap\Controls\MapTypeControl $mapTypeControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:116:            ' - function setMaptypeControl(array $mapTypeIds, string $controlPosition, string $mapTypeControlStyle)'
./src/Ivory/GoogleMap/Exception/MapException.php:131:            ' - function setOverviewMapControl(Ivory\GoogleMap\Controls\OverviewMapControl $overviewMapControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:132:            ' - function setOverviewMapControl(boolean $opened)'
./src/Ivory/GoogleMap/Exception/MapException.php:147:            ' - function setPanControl(Ivory\GoogleMap\Controls\PanControl $panControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:148:            ' - function setPanControl(string $controlPosition)'
./src/Ivory/GoogleMap/Exception/MapException.php:163:            ' - function setRotateControl(Ivory\GoogleMap\Controls\RotateControl $rotateControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:164:            ' - function setRotateControl(string $controlPosition)'
./src/Ivory/GoogleMap/Exception/MapException.php:179:            ' - function setScaleControl(Ivory\GoogleMap\Controls\ScaleControl $scaleControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:180:            ' - function setScaleControl(string $controlPosition, string $scaleControlStyle)'
./src/Ivory/GoogleMap/Exception/MapException.php:195:            ' - function setStreetViewControl(Ivory\GoogleMap\Controls\StreetViewControl $streetViewControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:196:            ' - function setStreetViewControl(string $controlPosition)'
./src/Ivory/GoogleMap/Exception/MapException.php:211:            ' - function setZoomControl(Ivory\GoogleMap\Controls\ZoomControl $zoomControl = null)',
./src/Ivory/GoogleMap/Exception/MapException.php:212:            ' - function setZoomControl(string $controlPosition, string $zoomControlStyle)'
./src/Ivory/GoogleMap/Exception/BaseException.php:32:            ' - function setNorthEast(Ivory\GoogleMap\Base\Coordinate $northEast)',
./src/Ivory/GoogleMap/Exception/BaseException.php:33:            ' - function setNorthEast(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Exception/BaseException.php:48:            ' - function setSouthWest(Ivory\GoogleMap\Base\Coordinate $southWest)',
./src/Ivory/GoogleMap/Exception/BaseException.php:49:            ' - function setSouthWest(double $latitude, double $longitude, boolean $noWrap = true)'
./src/Ivory/GoogleMap/Events/EventManager.php:48:        $this->domEvents = array();
./src/Ivory/GoogleMap/Events/EventManager.php:50:            $this->addDomEvent($domEvent);
./src/Ivory/GoogleMap/Events/EventManager.php:53:        $this->domEventsOnce = array();
./src/Ivory/GoogleMap/Events/EventManager.php:55:            $this->addDomEventOnce($domEventOnce);
./src/Ivory/GoogleMap/Events/EventManager.php:58:        $this->events = array();
./src/Ivory/GoogleMap/Events/EventManager.php:60:            $this->addEvent($event);
./src/Ivory/GoogleMap/Events/EventManager.php:63:        $this->eventsOnce = array();
./src/Ivory/GoogleMap/Events/EventManager.php:65:            $this->addEventOnce($eventOnce);
./src/Ivory/GoogleMap/Events/EventManager.php:76:        return $this->domEvents;
./src/Ivory/GoogleMap/Events/EventManager.php:86:        $this->domEvents[] = $domEvent;
./src/Ivory/GoogleMap/Events/EventManager.php:96:        return $this->domEventsOnce;
./src/Ivory/GoogleMap/Events/EventManager.php:106:        $this->domEventsOnce[] = $domEventOnce;
./src/Ivory/GoogleMap/Events/EventManager.php:116:        return $this->events;
./src/Ivory/GoogleMap/Events/EventManager.php:126:        $this->events[] = $event;
./src/Ivory/GoogleMap/Events/EventManager.php:136:        return $this->eventsOnce;
./src/Ivory/GoogleMap/Events/EventManager.php:146:        $this->eventsOnce[] = $eventOnce;
./src/Ivory/GoogleMap/Events/Event.php:47:        $this->setPrefixJavascriptVariable('event_');
./src/Ivory/GoogleMap/Events/Event.php:50:            $this->setInstance($instance);
./src/Ivory/GoogleMap/Events/Event.php:54:            $this->setEventName($eventName);
./src/Ivory/GoogleMap/Events/Event.php:58:            $this->setHandle($handle);
./src/Ivory/GoogleMap/Events/Event.php:61:        $this->setCapture($capture);
./src/Ivory/GoogleMap/Events/Event.php:71:        return $this->instance;
./src/Ivory/GoogleMap/Events/Event.php:87:        $this->instance = $instance;
./src/Ivory/GoogleMap/Events/Event.php:97:        return $this->eventName;
./src/Ivory/GoogleMap/Events/Event.php:113:        $this->eventName = $eventName;
./src/Ivory/GoogleMap/Events/Event.php:123:        return $this->handle;
./src/Ivory/GoogleMap/Events/Event.php:139:        $this->handle = $handle;
./src/Ivory/GoogleMap/Events/Event.php:149:        return $this->capture;
./src/Ivory/GoogleMap/Events/Event.php:165:        $this->capture = $capture;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:38:        return $this->location !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:48:        return $this->location;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:55:     * - function setLocation(string $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:56:     * - function setLocation(Ivory\GoogleMap\Base\Coordinate $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:57:     * - function setLocation(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:66:            $this->location = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:68:            $this->location = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:70:            if ($this->location === null) {
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:71:                $this->location = new Coordinate();
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:74:            $this->location->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:75:            $this->location->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:78:                $this->location->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:92:        return $this->stopover !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:102:        return $this->stopover;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:116:        $this->stopover = $stopover;
./src/Ivory/GoogleMap/Services/Directions/DirectionsWaypoint.php:126:        return $this->hasLocation();
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:73:        $this->setDistance($distance);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:74:        $this->setDuration($duration);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:75:        $this->setEndAddress($endAddress);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:76:        $this->setEndLocation($endLocation);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:77:        $this->setStartAddress($startAddress);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:78:        $this->setStartLocation($startLocation);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:79:        $this->setSteps($steps);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:80:        $this->setViaWaypoints($viaWaypoint);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:90:        return $this->distance;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:100:        $this->distance = $distance;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:110:        return $this->duration;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:120:        $this->duration = $duration;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:130:        return $this->endAddress;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:146:        $this->endAddress = $endAddress;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:156:        return $this->endLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:166:        $this->endLocation = $endLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:176:        return $this->startAddress;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:192:        $this->startAddress = $startAddress;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:202:        return $this->startLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:212:        $this->startLocation = $startLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:222:        return $this->steps;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:232:        $this->steps = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:235:            $this->addStep($step);
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:246:        $this->steps[] = $step;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:256:        return $this->viaWaypoints;
./src/Ivory/GoogleMap/Services/Directions/DirectionsLeg.php:266:        $this->viaWaypoints = $viaWaypoints;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:75:        $this->waypoints = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:76:        $this->sensor = false;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:86:        return $this->avoidHighways !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:96:        return $this->avoidHighways;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:112:        $this->avoidHighways = $avoidHighways;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:122:        return $this->avoidTolls !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:132:        return $this->avoidTolls;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:148:        $this->avoidTolls = $avoidTolls;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:158:        return $this->destination !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:168:        return $this->destination;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:175:     * - function setDestination(string $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:176:     * - function setDestination(Ivory\GoogleMap\Base\Coordinate $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:177:     * - function setDestination(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:186:            $this->destination = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:188:            $this->destination = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:190:            if ($this->destination === null) {
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:191:                $this->destination = new Coordinate();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:194:            $this->destination->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:195:            $this->destination->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:198:                $this->destination->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:212:        return $this->optimizeWaypoints !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:222:        return $this->optimizeWaypoints;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:238:        $this->optimizeWaypoints = $optimizeWaypoints;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:248:        return $this->origin !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:258:        return $this->origin;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:265:     * - function setOrigin(string $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:266:     * - function setOrigin(Ivory\GoogleMap\Base\Coordinate $destination)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:267:     * - function setOrigin(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:276:            $this->origin = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:278:            $this->origin = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:280:            if ($this->origin === null) {
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:281:                $this->origin = new Coordinate();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:284:            $this->origin->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:285:            $this->origin->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:288:                $this->origin->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:302:        return $this->departureTime !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:312:        return $this->departureTime;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:322:        $this->departureTime = $departureTime;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:332:        return $this->arrivalTime !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:342:        return $this->arrivalTime;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:352:        $this->arrivalTime = $arrivalTime;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:362:        return $this->provideRouteAlternatives !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:372:        return $this->provideRouteAlternatives;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:388:        $this->provideRouteAlternatives = $provideRouteAlternatives;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:398:        return $this->region !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:408:        return $this->region;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:424:        $this->region = $region;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:434:        return $this->language !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:444:        return $this->language;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:460:        $this->language = $language;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:470:        return $this->travelMode !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:480:        return $this->travelMode;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:496:        $this->travelMode = $travelMode;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:506:        return $this->unitSystem !== null;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:516:        return $this->unitSystem;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:532:        $this->unitSystem = $unitSystem;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:542:        return !empty($this->waypoints);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:552:        return $this->waypoints;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:562:        $this->waypoints = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:565:            $this->addWaypoint($waypoint);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:573:     * - function addWaypoint(Ivory\GoogleMap\Services\Directions\DirectionsWaypoint $waypoint)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:574:     * - function addWaypoint(string $location)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:575:     * - function addWaypoint(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:576:     * - function addWaypoint(Ivory\GoogleMap\Base\Coordinate $location)
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:585:            $this->waypoints[] = $args[0];
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:588:            $waypoint->setLocation($args[0], $args[1]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:591:                $waypoint->getLocation()->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:594:            $this->waypoints[] = $waypoint;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:597:            $waypoint->setLocation($args[0]);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:599:            $this->waypoints[] = $waypoint;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:612:        return $this->sensor;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:628:        $this->sensor = $sensor;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:638:        $isValid = $this->hasDestination() && $this->hasOrigin();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:640:        for ($i = 0; $isValid && ($i < count($this->waypoints)); $i++) {
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:641:            $isValid = $this->waypoints[$i]->isValid();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:644:        if ($this->getTravelMode() === TravelMode::TRANSIT) {
./src/Ivory/GoogleMap/Services/Directions/DirectionsRequest.php:645:            $isValid = $this->hasArrivalTime() || $this->hasDepartureTime();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:44:     * - function route(string $origin, string $destination)
./src/Ivory/GoogleMap/Services/Directions/Directions.php:45:     * - function route(Ivory\GoogleMap\Services\Directions\DirectionsRequest $request)
./src/Ivory/GoogleMap/Services/Directions/Directions.php:58:            $directionsRequest->setOrigin($args[0]);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:59:            $directionsRequest->setDestination($args[1]);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:64:        if (!$directionsRequest->isValid()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:68:        $url = $this->generateUrl($directionsRequest);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:69:        $response = $this->httpAdapter->getContent($url)->getBody();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:75:        $directionsResponse = $this->buildDirectionsResponse($this->parse($response));
./src/Ivory/GoogleMap/Services/Directions/Directions.php:91:        if (is_string($directionsRequest->getOrigin())) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:92:            $httpQuery['origin'] = $directionsRequest->getOrigin();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:96:                $directionsRequest->getOrigin()->getLatitude(),
./src/Ivory/GoogleMap/Services/Directions/Directions.php:97:                $directionsRequest->getOrigin()->getLongitude()
./src/Ivory/GoogleMap/Services/Directions/Directions.php:101:        if (is_string($directionsRequest->getDestination())) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:102:            $httpQuery['destination'] = $directionsRequest->getDestination();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:106:                $directionsRequest->getDestination()->getLatitude(),
./src/Ivory/GoogleMap/Services/Directions/Directions.php:107:                $directionsRequest->getDestination()->getLongitude()
./src/Ivory/GoogleMap/Services/Directions/Directions.php:111:        if ($directionsRequest->hasWaypoints()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:114:            if ($directionsRequest->hasOptimizeWaypoints() && $directionsRequest->getOptimizeWaypoints()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:118:            foreach ($directionsRequest->getWaypoints() as $waypoint) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:119:                $stopover = $waypoint->getStopover() ? 'via:' : '';
./src/Ivory/GoogleMap/Services/Directions/Directions.php:121:                if (is_string($waypoint->getLocation())) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:122:                    $waypoints[] = $stopover.$waypoint->getLocation();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:127:                        $waypoint->getLocation()->getLatitude(),
./src/Ivory/GoogleMap/Services/Directions/Directions.php:128:                        $waypoint->getLocation()->getLongitude()
./src/Ivory/GoogleMap/Services/Directions/Directions.php:136:        if ($directionsRequest->hasTravelMode()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:137:            $httpQuery['mode'] = strtolower($directionsRequest->getTravelMode());
./src/Ivory/GoogleMap/Services/Directions/Directions.php:140:        if ($directionsRequest->hasProvideRouteAlternatives()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:141:            $httpQuery['alternatives'] = $directionsRequest->getProvideRouteAlternatives() ? 'true' : 'false';
./src/Ivory/GoogleMap/Services/Directions/Directions.php:144:        if ($directionsRequest->hasAvoidTolls() && $directionsRequest->getAvoidTolls()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:146:        } elseif ($directionsRequest->hasAvoidHighways() && $directionsRequest->getAvoidHighways()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:150:        if ($directionsRequest->hasUnitSystem()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:151:            $httpQuery['units'] = strtolower($directionsRequest->getUnitSystem());
./src/Ivory/GoogleMap/Services/Directions/Directions.php:154:        if ($directionsRequest->hasRegion()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:155:            $httpQuery['region'] = $directionsRequest->getRegion();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:158:        if ($directionsRequest->hasLanguage()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:159:            $httpQuery['language'] = $directionsRequest->getLanguage();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:162:        if ($directionsRequest->hasDepartureTime()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:163:            $httpQuery['departure_time'] = $directionsRequest->getDepartureTime()->getTimestamp();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:166:        if ($directionsRequest->hasArrivalTime()) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:167:            $httpQuery['arrival_time'] = $directionsRequest->getArrivalTime()->getTimestamp();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:170:        $httpQuery['sensor'] = $directionsRequest->hasSensor() ? 'true' : 'false';
./src/Ivory/GoogleMap/Services/Directions/Directions.php:172:        $url = sprintf('%s/%s?%s', $this->getUrl(), $this->getFormat(), http_build_query($httpQuery));
./src/Ivory/GoogleMap/Services/Directions/Directions.php:174:        return $this->signUrl($url);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:186:        if ($this->format === 'json') {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:187:            return $this->parseJSON($response);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:190:        return $this->parseXML($response);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:220:        return $this->xmlParser->parse($response, $rules);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:232:        $routes = $this->buildDirectionsRoutes($directionsResponse->routes);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:233:        $status = $directionsResponse->status;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:249:            $results[] = $this->buildDirectionsRoute($directionsRoute);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:265:            new Coordinate($directionsRoute->bounds->southwest->lat, $directionsRoute->bounds->southwest->lng),
./src/Ivory/GoogleMap/Services/Directions/Directions.php:266:            new Coordinate($directionsRoute->bounds->northeast->lat, $directionsRoute->bounds->northeast->lng)
./src/Ivory/GoogleMap/Services/Directions/Directions.php:271:        if (!isset($directionsRoute->copyrights)) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:272:            $directionsRoute->copyrights = '';
./src/Ivory/GoogleMap/Services/Directions/Directions.php:275:        if (!isset($directionsRoute->summary)) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:276:            $directionsRoute->summary = '';
./src/Ivory/GoogleMap/Services/Directions/Directions.php:280:        $summary = $directionsRoute->summary;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:281:        $copyrights = $directionsRoute->copyrights;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:283:        $directionsLegs = $this->buildDirectionsLegs($directionsRoute->legs);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:284:        $overviewPolyline = new EncodedPolyline($directionsRoute->overview_polyline->points);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:287:        if (!isset($directionsRoute->warnings)) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:288:            $directionsRoute->warnings = array();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:291:        if (!isset($directionsRoute->waypoint_order)) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:292:            $directionsRoute->waypoint_order = array();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:295:        $warnings = $directionsRoute->warnings;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:296:        $waypointOrder = $directionsRoute->waypoint_order;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:320:            $results[] = $this->buildDirectionsLeg($directionsLeg);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:335:        $distance = new Distance($directionsLeg->distance->text, $directionsLeg->distance->value);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:336:        $duration = new Duration($directionsLeg->duration->text, $directionsLeg->duration->value);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:337:        $endAddress = $directionsLeg->end_address;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:338:        $endLocation = new Coordinate($directionsLeg->end_location->lat, $directionsLeg->end_location->lng);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:339:        $startAddress = $directionsLeg->start_address;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:340:        $startLocation = new Coordinate($directionsLeg->start_location->lat, $directionsLeg->start_location->lng);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:341:        $steps = $this->buildDirectionsSteps($directionsLeg->steps);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:344:        if (!isset($directionsLeg->via_waypoint)) {
./src/Ivory/GoogleMap/Services/Directions/Directions.php:345:            $directionsLeg->via_waypoint = array();
./src/Ivory/GoogleMap/Services/Directions/Directions.php:348:        $viaWaypoint = $directionsLeg->via_waypoint;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:373:            $results[] = $this->buildDirectionsStep($directionsStep);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:388:        $distance = new Distance($directionsStep->distance->text, $directionsStep->distance->value);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:389:        $duration = new Duration($directionsStep->duration->text, $directionsStep->duration->value);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:390:        $endLocation = new Coordinate($directionsStep->end_location->lat, $directionsStep->end_location->lng);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:391:        $instructions = $directionsStep->html_instructions;
./src/Ivory/GoogleMap/Services/Directions/Directions.php:392:        $encodedPolyline = new EncodedPolyline($directionsStep->polyline->points);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:393:        $startLocation = new Coordinate($directionsStep->start_location->lat, $directionsStep->start_location->lng);
./src/Ivory/GoogleMap/Services/Directions/Directions.php:394:        $travelMode = $directionsStep->travel_mode;
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:37:        $this->setRoutes($routes);
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:38:        $this->setStatus($status);
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:48:        return $this->routes;
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:58:        $this->routes = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:61:            $this->addRoute($route);
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:72:        $this->routes[] = $route;
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:82:        return $this->status;
./src/Ivory/GoogleMap/Services/Directions/DirectionsResponse.php:98:        $this->status = $status;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:67:        $this->setBound($bound);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:68:        $this->setCopyrights($copyrights);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:69:        $this->setLegs($legs);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:70:        $this->setOverviewPolyline($overviewPolyline);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:71:        $this->setSummary($summary);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:72:        $this->setWarnings($warnings);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:73:        $this->setWaypointOrder($waypointOrder);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:83:        return $this->bound;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:93:        $this->bound = $bound;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:103:        return $this->copyrights;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:119:        $this->copyrights = $copyrights;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:129:        return $this->legs;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:139:        $this->legs = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:142:            $this->addLeg($leg);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:153:        $this->legs[] = $leg;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:163:        return $this->overviewPolyline;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:173:        $this->overviewPolyline = $overviewPolyline;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:183:        return $this->summary;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:199:        $this->summary = $summary;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:209:        return $this->warnings;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:219:        $this->warnings = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:222:            $this->addWarning($warning);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:239:        $this->warnings[] = $warning;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:249:        return $this->waypointOrder;
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:259:        $this->waypointOrder = array();
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:262:            $this->addWaypointOrder($waypointOrder);
./src/Ivory/GoogleMap/Services/Directions/DirectionsRoute.php:279:        $this->waypointOrder[] = $waypointOrder;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:70:        $this->setDistance($distance);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:71:        $this->setDuration($duration);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:72:        $this->setEndLocation($endLocation);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:73:        $this->setInstructions($instructions);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:74:        $this->setEncodedPolyline($encodedPolyline);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:75:        $this->setStartLocation($startLocation);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:76:        $this->setTravelMode($travelMode);
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:86:        return $this->distance;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:96:        $this->distance = $distance;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:106:        return $this->duration;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:116:        $this->duration = $duration;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:126:        return $this->endLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:136:        $this->endLocation = $endLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:146:        return $this->instructions;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:162:        $this->instructions = $instructions;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:172:        return $this->encodedPolyline;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:182:        $this->encodedPolyline = $encodedPolyline;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:192:        return $this->startLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:202:        $this->startLocation = $startLocation;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:212:        return $this->travelMode;
./src/Ivory/GoogleMap/Services/Directions/DirectionsStep.php:228:        $this->travelMode = $travelMode;
./src/Ivory/GoogleMap/Services/AbstractService.php:65:        $this->setHttpAdapter($httpAdapter);
./src/Ivory/GoogleMap/Services/AbstractService.php:66:        $this->setUrl($url);
./src/Ivory/GoogleMap/Services/AbstractService.php:67:        $this->setHttps($https);
./src/Ivory/GoogleMap/Services/AbstractService.php:68:        $this->setFormat($format);
./src/Ivory/GoogleMap/Services/AbstractService.php:69:        $this->setXmlParser($xmlParser);
./src/Ivory/GoogleMap/Services/AbstractService.php:70:        $this->setBusinessAccount($businessAccount);
./src/Ivory/GoogleMap/Services/AbstractService.php:80:        return $this->httpAdapter;
./src/Ivory/GoogleMap/Services/AbstractService.php:90:        $this->httpAdapter = $httpAdapter;
./src/Ivory/GoogleMap/Services/AbstractService.php:100:        if ($this->isHttps()) {
./src/Ivory/GoogleMap/Services/AbstractService.php:101:            return str_replace('http://', 'https://', $this->url);
./src/Ivory/GoogleMap/Services/AbstractService.php:104:        return $this->url;
./src/Ivory/GoogleMap/Services/AbstractService.php:120:        $this->url = $url;
./src/Ivory/GoogleMap/Services/AbstractService.php:130:        return $this->https;
./src/Ivory/GoogleMap/Services/AbstractService.php:146:        $this->https = $https;
./src/Ivory/GoogleMap/Services/AbstractService.php:156:        return $this->format;
./src/Ivory/GoogleMap/Services/AbstractService.php:172:        $this->format = $format;
./src/Ivory/GoogleMap/Services/AbstractService.php:182:        return $this->xmlParser;
./src/Ivory/GoogleMap/Services/AbstractService.php:192:        $this->xmlParser = $xmlParser;
./src/Ivory/GoogleMap/Services/AbstractService.php:202:        return $this->businessAccount !== null;
./src/Ivory/GoogleMap/Services/AbstractService.php:212:        return $this->businessAccount;
./src/Ivory/GoogleMap/Services/AbstractService.php:222:        $this->businessAccount = $businessAccount;
./src/Ivory/GoogleMap/Services/AbstractService.php:234:        if (!$this->hasBusinessAccount()) {
./src/Ivory/GoogleMap/Services/AbstractService.php:238:        return $this->businessAccount->signUrl($url);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:39:        $this->setClientId($clientId);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:40:        $this->setSecret($secret);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:41:        $this->setChannel($channel);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:51:        return $this->clientId;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:61:        $this->clientId = $clientId;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:71:        return $this->secret;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:81:        $this->secret = $secret;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:91:        return $this->channel !== null;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:101:        return $this->channel;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:111:        $this->channel = $channel;
./src/Ivory/GoogleMap/Services/BusinessAccount.php:123:        $url .= sprintf('&client=gme-%s', $this->clientId);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:125:        if ($this->hasChannel()) {
./src/Ivory/GoogleMap/Services/BusinessAccount.php:126:            $url .= sprintf('&channel=%s', $this->channel);
./src/Ivory/GoogleMap/Services/BusinessAccount.php:131:        $key = base64_decode(str_replace(array('-', '_'), array('+', '/'), $this->secret));
./src/Ivory/GoogleMap/Services/BusinessAccount.php:134:        $url .= sprintf('&signature=%s', str_replace(array('+', '/'), array('-', '_'), $signature));
./src/Ivory/GoogleMap/Services/Utils/XmlParser.php:33:        return $this->pluralize($parsedXml, $pluralizationRules);
./src/Ivory/GoogleMap/Services/Utils/XmlParser.php:59:                $xml[$attribute] = $this->pluralize($xml[$attribute], $rules);
./src/Ivory/GoogleMap/Services/Utils/XmlParser.php:63:        return $this->normalize($xml);
./src/Ivory/GoogleMap/Services/Base/Duration.php:38:        $this->setText($text);
./src/Ivory/GoogleMap/Services/Base/Duration.php:39:        $this->setValue($value);
./src/Ivory/GoogleMap/Services/Base/Duration.php:49:        return $this->text;
./src/Ivory/GoogleMap/Services/Base/Duration.php:65:        $this->text = $text;
./src/Ivory/GoogleMap/Services/Base/Duration.php:75:        return $this->value;
./src/Ivory/GoogleMap/Services/Base/Duration.php:91:        $this->value = $value;
./src/Ivory/GoogleMap/Services/Base/Distance.php:38:        $this->setText($text);
./src/Ivory/GoogleMap/Services/Base/Distance.php:39:        $this->setValue($value);
./src/Ivory/GoogleMap/Services/Base/Distance.php:49:        return $this->text;
./src/Ivory/GoogleMap/Services/Base/Distance.php:65:        $this->text = $text;
./src/Ivory/GoogleMap/Services/Base/Distance.php:75:        return $this->value;
./src/Ivory/GoogleMap/Services/Base/Distance.php:91:        $this->value = $value;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRow.php:32:        $this->setElements($elements);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRow.php:42:        return $this->elements;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRow.php:52:        $this->elements = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRow.php:55:            $this->addElement($element);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRow.php:66:        $this->elements[] = $element;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:45:        $this->setStatus($status);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:48:            $this->setDistance($distance);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:52:            $this->setDuration($duration);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:63:        return $this->status;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:79:        $this->status = $status;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:89:        return $this->distance;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:99:        $this->distance = $distance;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:109:        return $this->duration;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElement.php:119:        $this->duration = $duration;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:42:     * - function process(array $origins, array $destinations)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:43:     * - function process(Ivory\GoogleMap\Services\DistanceMatrix\DistanceMatrixRequest $request)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:56:            $distanceMatrixRequest->setOrigins($args[0]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:57:            $distanceMatrixRequest->setDestinations($args[1]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:62:        if (!$distanceMatrixRequest->isValid()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:66:        $url = $this->generateUrl($distanceMatrixRequest);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:67:        $response = $this->httpAdapter->getContent($url)->getBody();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:73:        $distanceMatrixResponse = $this->buildDistanceMatrixResponse($this->parse($response));
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:92:        foreach ($distanceMatrixRequest->getOrigins() as $origin) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:98:                    $origin->getLatitude(),
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:99:                    $origin->getLongitude()
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:104:        foreach ($distanceMatrixRequest->getDestinations() as $destination) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:110:                    $destination->getLatitude(),
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:111:                    $destination->getLongitude()
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:119:        if ($distanceMatrixRequest->hasTravelMode()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:120:            $httpQuery['mode'] = strtolower($distanceMatrixRequest->getTravelMode());
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:123:        if ($distanceMatrixRequest->hasAvoidTolls() && $distanceMatrixRequest->getAvoidTolls()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:127:        if ($distanceMatrixRequest->hasAvoidHighways() && $distanceMatrixRequest->getAvoidHighways()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:131:        if ($distanceMatrixRequest->hasUnitSystem()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:132:            $httpQuery['units'] = strtolower($distanceMatrixRequest->getUnitSystem());
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:135:        if ($distanceMatrixRequest->hasRegion()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:136:            $httpQuery['region'] = $distanceMatrixRequest->getRegion();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:139:        if ($distanceMatrixRequest->hasLanguage()) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:140:            $httpQuery['language'] = $distanceMatrixRequest->getLanguage();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:143:        $httpQuery['sensor'] = $distanceMatrixRequest->hasSensor() ? 'true' : 'false';
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:145:        $url = sprintf('%s/%s?%s', $this->getUrl(), $this->getFormat(), http_build_query($httpQuery));
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:147:        return $this->signUrl($url);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:159:        if ($this->format === 'json') {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:160:            return $this->parseJSON($response);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:163:        return $this->parseXML($response);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:194:        return $this->xmlParser->parse($response, $rules);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:206:        $status = $distanceMatrixResponse->status;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:207:        $destinations = $distanceMatrixResponse->destination_addresses;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:208:        $origins = $distanceMatrixResponse->origin_addresses;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:209:        $rows = $this->buildDistanceMatrixRows($distanceMatrixResponse->rows);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:226:            $results[] = $this->buildDistanceMatrixRow($row);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:243:        foreach ($row->elements as $element) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:244:            $elements[] = $this->buildDistanceMatrixResponseElement($element);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:259:        $status = $element->status;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:263:        if ($element->status === DistanceMatrixElementStatus::OK) {
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:264:            $distance = new Distance($element->distance->text, $element->distance->value);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrix.php:265:            $duration = new Duration($element->duration->text, $element->duration->value);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:60:        $this->origins = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:61:        $this->destinations = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:62:        $this->sensor = false;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:72:        return $this->avoidHighways !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:82:        return $this->avoidHighways;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:98:        $this->avoidHighways = $avoidHighways;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:108:        return $this->avoidTolls !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:118:        return $this->avoidTolls;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:134:        $this->avoidTolls = $avoidTolls;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:144:        return !empty($this->destinations);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:154:        return $this->destinations;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:164:        $this->destinations = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:167:            $this->addDestination($destination);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:175:     * - function addDestination(string $destination)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:176:     * - function addDestination(Ivory\GoogleMap\Base\Coordinate $destination)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:177:     * - function addDestination(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:186:            $this->destinations[] = $args[0];
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:188:            $this->destinations[] = $args[0];
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:191:            $destination->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:192:            $destination->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:195:                $destination->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:198:            $this->destinations[] = $destination;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:211:        return !empty($this->origins);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:221:        return $this->origins;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:231:        $this->origins = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:234:            $this->addOrigin($origin);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:242:     * - function addOrigin(string $destination)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:243:     * - function addOrigin(Ivory\GoogleMap\Base\Coordinate $destination)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:244:     * - function addOrigin(double $latitude, double $longitude, boolean $noWrap)
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:253:            $this->origins[] = $args[0];
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:255:            $this->origins[] = $args[0];
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:258:            $origin->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:259:            $origin->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:262:                $origin->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:265:            $this->origins[] = $origin;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:278:        return $this->region !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:288:        return $this->region;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:304:        $this->region = $region;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:314:        return $this->language !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:324:        return $this->language;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:340:        $this->language = $language;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:350:        return $this->travelMode !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:360:        return $this->travelMode;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:378:        $this->travelMode = $travelMode;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:388:        return $this->unitSystem !== null;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:398:        return $this->unitSystem;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:414:        $this->unitSystem = $unitSystem;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:424:        return $this->sensor;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:440:        $this->sensor = $sensor;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequest.php:450:        return $this->hasDestinations() && $this->hasOrigins();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:47:        $this->setStatus($status);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:48:        $this->setOrigins($origins);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:49:        $this->setDestinations($destinations);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:50:        $this->setRows($rows);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:60:        return $this->origins;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:70:        $this->origins = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:73:            $this->addOrigin($origin);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:84:        $this->origins[] = $origin;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:94:        return $this->destinations;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:104:        $this->destinations = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:107:            $this->addDestination($destination);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:118:        $this->destinations[] = $destination;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:128:        return $this->rows;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:138:        $this->rows = array();
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:141:            $this->addRow($row);
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:152:        $this->rows[] = $row;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:162:        return $this->status;
./src/Ivory/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponse.php:178:        $this->status = $status;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:48:        $this->setLocation($location);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:49:        $this->setLocationType($locationType);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:50:        $this->setViewport($viewport);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:51:        $this->setBound($bound);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:61:        return $this->location;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:71:        $this->location = $location;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:81:        return $this->locationType;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:97:        $this->locationType = $locationType;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:107:        return $this->viewport;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:117:        $this->viewport = $viewport;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:127:        return $this->bound;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderGeometry.php:137:        $this->bound = $bound;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:37:        $this->setResults($results);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:38:        $this->setStatus($status);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:48:        return $this->results;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:58:        $this->results = array();
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:61:            $this->addResult($result);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:72:        $this->results[] = $result;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:82:        return $this->status;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResponse.php:98:        $this->status = $status;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:42:        $this->setLongName($longName);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:43:        $this->setShortName($shortName);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:44:        $this->setTypes($types);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:54:        return $this->longName;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:70:        $this->longName = $longName;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:80:        return $this->shortName;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:96:        $this->shortName = $shortName;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:106:        return $this->types;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:116:        $this->types = array();
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:119:            $this->addType($type);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponent.php:136:        $this->types[] = $type;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:55:        $this->setAddressComponents($addressComponents);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:56:        $this->setFormattedAddress($formattedAddress);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:57:        $this->setGeometry($geometry);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:58:        $this->setTypes($types);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:59:        $this->setPartialMatch($partialMatch);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:72:            return $this->addressComponents;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:77:        foreach ($this->addressComponents as $addressComponent) {
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:78:            if (in_array($type, $addressComponent->getTypes())) {
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:93:        $this->addressComponents = array();
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:96:            $this->addAddressComponent($addressComponent);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:108:        $this->addressComponents[] = $addressComponent;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:118:        return $this->formattedAddress;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:134:        $this->formattedAddress = $formattedAddress;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:144:        return $this->geometry;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:154:        $this->geometry = $geometry;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:164:        return $this->partialMatch;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:180:        $this->partialMatch = $partialMatch;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:190:        return $this->types;
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:200:        $this->types = array();
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:203:            $this->addType($type);
./src/Ivory/GoogleMap/Services/Geocoding/Result/GeocoderResult.php:220:        $this->types[] = $type;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:56:        $this->setUrl('http://maps.googleapis.com/maps/api/geocode');
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:57:        $this->setHttps(false);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:58:        $this->setFormat('json');
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:59:        $this->setXmlParser(new XmlParser());
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:69:        if ($this->isHttps()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:70:            return str_replace('http://', 'https://', $this->url);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:73:        return $this->url;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:89:        $this->url = $url;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:99:        return $this->https;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:115:        $this->https = $https;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:125:        return $this->format;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:141:        $this->format = $format;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:151:        return $this->xmlParser;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:161:        $this->xmlParser = $xmlParser;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:171:        return $this->businessAccount !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:181:        return $this->businessAccount;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:191:        $this->businessAccount = $businessAccount;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:203:            $geocoderRequest->setAddress($request);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:210:        if (!$geocoderRequest->isValid()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:214:        $url = $this->generateUrl($geocoderRequest);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:215:        $response = $this->getAdapter()->getContent($url);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:221:        $normalizedResponse = $this->parse($response);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:223:        return $this->buildGeocoderResponse($normalizedResponse);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:232:        $request->setCoordinate($coordinates[0], $coordinates[1]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:234:        return $this->getGeocodedData($request);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:256:        if ($geocoderRequest->hasAddress()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:257:            $httpQuery['address'] = $geocoderRequest->getAddress();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:261:                $geocoderRequest->getCoordinate()->getLatitude(),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:262:                $geocoderRequest->getCoordinate()->getLongitude()
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:266:        if ($geocoderRequest->hasBound()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:269:                $geocoderRequest->getBound()->getSouthWest()->getLatitude(),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:270:                $geocoderRequest->getBound()->getSouthWest()->getLongitude(),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:271:                $geocoderRequest->getBound()->getNorthEast()->getLatitude(),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:272:                $geocoderRequest->getBound()->getNorthEast()->getLongitude()
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:276:        if ($geocoderRequest->hasRegion()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:277:            $httpQuery['region'] = $geocoderRequest->getRegion();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:280:        if ($geocoderRequest->hasLanguage()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:281:            $httpQuery['language'] = $geocoderRequest->getLanguage();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:284:        $httpQuery['sensor'] = $geocoderRequest->hasSensor() ? 'true' : 'false';
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:286:        $url = sprintf('%s/%s?%s', $this->getUrl(), $this->getFormat(), http_build_query($httpQuery));
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:288:        return $this->signUrl($url);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:300:        if (!$this->hasBusinessAccount()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:304:        return $this->businessAccount->signUrl($url);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:316:        if ($this->format == 'json') {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:317:            return $this->parseJSON($response);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:320:        return $this->parseXML($response);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:350:        return $this->xmlParser->parse($response, $rules);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:363:        foreach ($geocoderResponse->results as $geocoderResult) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:364:            $results[] = $this->buildGeocoderResult($geocoderResult);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:367:        $status = $geocoderResponse->status;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:381:        $addressComponents = $this->buildGeocoderAddressComponents($geocoderResult->address_components);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:382:        $formattedAddress = $geocoderResult->formatted_address;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:383:        $geometry = $this->buildGeocoderGeometry($geocoderResult->geometry);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:384:        $types = $geocoderResult->types;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:385:        $partialMatch = isset($geocoderResult->partial_match) ? $geocoderResult->partial_match : null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:402:            $results[] = $this->buildGeocoderAddressComponent($geocoderAddressComponent);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:418:        $longName = $geocoderAddressComponent->long_name;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:419:        $shortName = $geocoderAddressComponent->short_name;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:420:        $types = $geocoderAddressComponent->types;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:435:            $geocoderGeometry->location->lat,
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:436:            $geocoderGeometry->location->lng
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:439:        $locationType = $geocoderGeometry->location_type;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:442:            new Coordinate($geocoderGeometry->viewport->southwest->lat, $geocoderGeometry->viewport->southwest->lng),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:443:            new Coordinate($geocoderGeometry->viewport->northeast->lat, $geocoderGeometry->viewport->northeast->lng)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:447:        if (isset($geocoderGeometry->bounds)) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:449:                new Coordinate($geocoderGeometry->bounds->southwest->lat, $geocoderGeometry->bounds->southwest->lng),
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderProvider.php:450:                new Coordinate($geocoderGeometry->bounds->northeast->lat, $geocoderGeometry->bounds->northeast->lng)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:49:        $this->sensor = false;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:59:        return $this->address !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:69:        return $this->address;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:85:        $this->address = $address;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:95:        return $this->coordinate !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:105:        return $this->coordinate;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:112:     *  - function setCoordinate(\Ivory\GoogleMap\Base\Coordinate $coordinate = null)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:113:     *  - function setCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:122:            $this->coordinate = $args[0];
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:124:            if (!$this->hasCoordinate()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:125:                $this->coordinate = new Coordinate();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:128:            $this->coordinate->setLatitude($args[0]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:129:            $this->coordinate->setLongitude($args[1]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:132:                $this->coordinate->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:135:            $this->coordinate = null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:150:        return $this->bound !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:160:        return $this->bound;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:167:     *  - function setBound(Ivory\GoogleMap\Base\Bound $bound = null)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:168:     *  - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:169:     *  - function setBound(
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:185:            $this->bound = $args[0];
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:189:            if (!$this->hasBound()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:190:                $this->bound = new Bound();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:193:            $this->bound->setSouthWest($args[0]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:194:            $this->bound->setNorthEast($args[1]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:200:            if (!$this->hasBound()) {
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:201:                $this->bound = new Bound();
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:204:            $this->bound->setSouthWest(new Coordinate($args[0], $args[1]));
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:205:            $this->bound->setNorthEast(new Coordinate($args[2], $args[3]));
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:208:                $this->bound->getSouthWest()->setNoWrap($args[4]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:212:                $this->bound->getNorthEast()->setNoWrap($args[5]);
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:215:            $this->bound = null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:228:        return $this->region !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:238:        return $this->region;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:254:        $this->region = $region;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:264:        return $this->language !== null;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:274:        return $this->language;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:290:        $this->language = $language;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:300:        return $this->sensor;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:316:        $this->sensor = $sensor;
./src/Ivory/GoogleMap/Services/Geocoding/GeocoderRequest.php:326:        return $this->hasAddress() || $this->hasCoordinate();
./src/Ivory/GoogleMap/Services/Geocoding/Geocoder.php:29:        if ($this->getProvider() instanceof GeocoderProvider) {
./src/Ivory/GoogleMap/Services/Geocoding/Geocoder.php:30:            return $this->getProvider()->getGeocodedData($request);
./src/Ivory/GoogleMap/Services/Geocoding/Geocoder.php:41:        if ($this->getProvider() instanceof GeocoderProvider) {
./src/Ivory/GoogleMap/Services/Geocoding/Geocoder.php:42:            return $this->getProvider()->getReversedData(array($latitude, $longitude));
./src/Ivory/GoogleMap/Places/Autocomplete.php:55:        $this->setPrefixJavascriptVariable('place_autocomplete_');
./src/Ivory/GoogleMap/Places/Autocomplete.php:57:        $this->inputId = 'place_input';
./src/Ivory/GoogleMap/Places/Autocomplete.php:58:        $this->inputAttributes = array(
./src/Ivory/GoogleMap/Places/Autocomplete.php:63:        $this->types = array();
./src/Ivory/GoogleMap/Places/Autocomplete.php:64:        $this->componentRestrictions = array();
./src/Ivory/GoogleMap/Places/Autocomplete.php:66:        $this->async = false;
./src/Ivory/GoogleMap/Places/Autocomplete.php:67:        $this->language = 'en';
./src/Ivory/GoogleMap/Places/Autocomplete.php:77:        return $this->inputId;
./src/Ivory/GoogleMap/Places/Autocomplete.php:93:        $this->inputId = $inputId;
./src/Ivory/GoogleMap/Places/Autocomplete.php:103:        return $this->bound !== null;
./src/Ivory/GoogleMap/Places/Autocomplete.php:113:        return $this->bound;
./src/Ivory/GoogleMap/Places/Autocomplete.php:120:     *  - function setBound(Ivory\GoogleMap\Base\Bound $bound = null)
./src/Ivory/GoogleMap/Places/Autocomplete.php:121:     *  - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./src/Ivory/GoogleMap/Places/Autocomplete.php:122:     *  - function setBound(
./src/Ivory/GoogleMap/Places/Autocomplete.php:138:            $this->bound = $args[0];
./src/Ivory/GoogleMap/Places/Autocomplete.php:142:            if ($this->bound === null) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:143:                $this->bound = new Bound();
./src/Ivory/GoogleMap/Places/Autocomplete.php:146:            $this->bound->setSouthWest($args[0]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:147:            $this->bound->setNorthEast($args[1]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:153:            if ($this->bound === null) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:154:                $this->bound = new Bound();
./src/Ivory/GoogleMap/Places/Autocomplete.php:157:            $this->bound->setSouthWest(new Coordinate($args[0], $args[1]));
./src/Ivory/GoogleMap/Places/Autocomplete.php:158:            $this->bound->setNorthEast(new Coordinate($args[2], $args[3]));
./src/Ivory/GoogleMap/Places/Autocomplete.php:161:                $this->bound->getSouthWest()->setNoWrap($args[4]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:165:                $this->bound->getNorthEast()->setNoWrap($args[5]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:168:            $this->bound = null;
./src/Ivory/GoogleMap/Places/Autocomplete.php:181:        return !empty($this->types);
./src/Ivory/GoogleMap/Places/Autocomplete.php:193:        return array_search($type, $this->types) !== false;
./src/Ivory/GoogleMap/Places/Autocomplete.php:203:        return $this->types;
./src/Ivory/GoogleMap/Places/Autocomplete.php:213:        $this->types = array();
./src/Ivory/GoogleMap/Places/Autocomplete.php:216:            $this->addType($type);
./src/Ivory/GoogleMap/Places/Autocomplete.php:234:        if ($this->hasType($type)) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:238:        $this->types[] = $type;
./src/Ivory/GoogleMap/Places/Autocomplete.php:250:        if (!$this->hasType($type)) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:254:        $index = array_search($type, $this->types);
./src/Ivory/GoogleMap/Places/Autocomplete.php:255:        unset($this->types[$index]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:265:        return !empty($this->componentRestrictions);
./src/Ivory/GoogleMap/Places/Autocomplete.php:277:        return isset($this->componentRestrictions[$type]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:287:        return $this->componentRestrictions;
./src/Ivory/GoogleMap/Places/Autocomplete.php:301:        if (!$this->hasComponentRestriction($type)) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:305:        return $this->componentRestrictions[$type];
./src/Ivory/GoogleMap/Places/Autocomplete.php:315:        $this->componentRestrictions = array();
./src/Ivory/GoogleMap/Places/Autocomplete.php:318:            $this->addComponentRestriction($type, $value);
./src/Ivory/GoogleMap/Places/Autocomplete.php:337:        if ($this->hasComponentRestriction($type)) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:341:        $this->componentRestrictions[$type] = $value;
./src/Ivory/GoogleMap/Places/Autocomplete.php:353:        if (!$this->hasComponentRestriction($type)) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:357:        unset($this->componentRestrictions[$type]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:367:        return $this->value !== null;
./src/Ivory/GoogleMap/Places/Autocomplete.php:377:        return $this->value;
./src/Ivory/GoogleMap/Places/Autocomplete.php:387:        $this->value = $value;
./src/Ivory/GoogleMap/Places/Autocomplete.php:397:        return $this->inputAttributes;
./src/Ivory/GoogleMap/Places/Autocomplete.php:407:        $this->inputAttributes = array();
./src/Ivory/GoogleMap/Places/Autocomplete.php:410:            $this->setInputAttribute($name, $value);
./src/Ivory/GoogleMap/Places/Autocomplete.php:425:            if (isset($this->inputAttributes[$name])) {
./src/Ivory/GoogleMap/Places/Autocomplete.php:426:                unset($this->inputAttributes[$name]);
./src/Ivory/GoogleMap/Places/Autocomplete.php:429:            $this->inputAttributes[$name] = $value;
./src/Ivory/GoogleMap/Places/Autocomplete.php:440:        return $this->async;
./src/Ivory/GoogleMap/Places/Autocomplete.php:454:        $this->async = $async;
./src/Ivory/GoogleMap/Places/Autocomplete.php:464:        return $this->language;
./src/Ivory/GoogleMap/Places/Autocomplete.php:474:        $this->language = $language;
./src/Ivory/GoogleMap/Base/Size.php:47:        $this->setPrefixJavascriptVariable('size_');
./src/Ivory/GoogleMap/Base/Size.php:49:        $this->setWidth($width);
./src/Ivory/GoogleMap/Base/Size.php:50:        $this->setHeight($height);
./src/Ivory/GoogleMap/Base/Size.php:52:        $this->setWidthUnit($widthUnit);
./src/Ivory/GoogleMap/Base/Size.php:53:        $this->setHeightUnit($heightUnit);
./src/Ivory/GoogleMap/Base/Size.php:63:        return $this->width;
./src/Ivory/GoogleMap/Base/Size.php:79:        $this->width = $width;
./src/Ivory/GoogleMap/Base/Size.php:89:        return $this->height;
./src/Ivory/GoogleMap/Base/Size.php:105:        $this->height = $height;
./src/Ivory/GoogleMap/Base/Size.php:115:        return ($this->widthUnit !== null) && ($this->heightUnit !== null);
./src/Ivory/GoogleMap/Base/Size.php:125:        return $this->widthUnit;
./src/Ivory/GoogleMap/Base/Size.php:141:        $this->widthUnit = $widthUnit;
./src/Ivory/GoogleMap/Base/Size.php:151:        return $this->heightUnit;
./src/Ivory/GoogleMap/Base/Size.php:167:        $this->heightUnit = $heightUnit;
./src/Ivory/GoogleMap/Base/Point.php:39:        $this->setPrefixJavascriptVariable('point_');
./src/Ivory/GoogleMap/Base/Point.php:41:        $this->setX($x);
./src/Ivory/GoogleMap/Base/Point.php:42:        $this->setY($y);
./src/Ivory/GoogleMap/Base/Point.php:52:        return $this->x;
./src/Ivory/GoogleMap/Base/Point.php:68:        $this->x = $x;
./src/Ivory/GoogleMap/Base/Point.php:78:        return $this->y;
./src/Ivory/GoogleMap/Base/Point.php:94:        $this->y = $y;
./src/Ivory/GoogleMap/Base/Coordinate.php:43:        $this->setPrefixJavascriptVariable('coordinate_');
./src/Ivory/GoogleMap/Base/Coordinate.php:45:        $this->setLatitude($latitude);
./src/Ivory/GoogleMap/Base/Coordinate.php:46:        $this->setLongitude($longitude);
./src/Ivory/GoogleMap/Base/Coordinate.php:47:        $this->setNoWrap($noWrap);
./src/Ivory/GoogleMap/Base/Coordinate.php:57:        return $this->latitude;
./src/Ivory/GoogleMap/Base/Coordinate.php:73:        $this->latitude = $latitude;
./src/Ivory/GoogleMap/Base/Coordinate.php:83:        return $this->longitude;
./src/Ivory/GoogleMap/Base/Coordinate.php:99:        $this->longitude = $longitude;
./src/Ivory/GoogleMap/Base/Coordinate.php:109:        return $this->noWrap;
./src/Ivory/GoogleMap/Base/Coordinate.php:125:        $this->noWrap = $noWrap;
./src/Ivory/GoogleMap/Base/Bound.php:40:        $this->setPrefixJavascriptVariable('bound_');
./src/Ivory/GoogleMap/Base/Bound.php:42:        $this->setSouthWest($southWest);
./src/Ivory/GoogleMap/Base/Bound.php:43:        $this->setNorthEast($northEast);
./src/Ivory/GoogleMap/Base/Bound.php:44:        $this->setExtends($extends);
./src/Ivory/GoogleMap/Base/Bound.php:54:        return ($this->southWest !== null) && ($this->northEast !== null);
./src/Ivory/GoogleMap/Base/Bound.php:64:        return $this->southWest;
./src/Ivory/GoogleMap/Base/Bound.php:71:     *  - function setSouthWest(Ivory\GoogleMap\Base\Coordinate $southWest = null)
./src/Ivory/GoogleMap/Base/Bound.php:72:     *  - function setSouthWest(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Base/Bound.php:81:            $this->southWest = $args[0];
./src/Ivory/GoogleMap/Base/Bound.php:83:            if ($this->southWest === null) {
./src/Ivory/GoogleMap/Base/Bound.php:84:                $this->southWest = new Coordinate();
./src/Ivory/GoogleMap/Base/Bound.php:87:            $this->southWest->setLatitude($args[0]);
./src/Ivory/GoogleMap/Base/Bound.php:88:            $this->southWest->setLongitude($args[1]);
./src/Ivory/GoogleMap/Base/Bound.php:91:                $this->southWest->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Base/Bound.php:94:            $this->southWest = null;
./src/Ivory/GoogleMap/Base/Bound.php:107:        return $this->northEast;
./src/Ivory/GoogleMap/Base/Bound.php:114:     *  - function setNorthEast(Ivory\GoogleMap\Base\Coordinate $northEast = null)
./src/Ivory/GoogleMap/Base/Bound.php:115:     *  - function setNorthEast(double $latitude, double $longitude, boolean $noWrap = true)
./src/Ivory/GoogleMap/Base/Bound.php:124:            $this->northEast = $args[0];
./src/Ivory/GoogleMap/Base/Bound.php:126:            if ($this->northEast === null) {
./src/Ivory/GoogleMap/Base/Bound.php:127:                $this->northEast = new Coordinate();
./src/Ivory/GoogleMap/Base/Bound.php:130:            $this->northEast->setLatitude($args[0]);
./src/Ivory/GoogleMap/Base/Bound.php:131:            $this->northEast->setLongitude($args[1]);
./src/Ivory/GoogleMap/Base/Bound.php:134:                $this->northEast->setNoWrap($args[2]);
./src/Ivory/GoogleMap/Base/Bound.php:137:            $this->northEast = null;
./src/Ivory/GoogleMap/Base/Bound.php:150:        return !empty($this->extends);
./src/Ivory/GoogleMap/Base/Bound.php:160:        return $this->extends;
./src/Ivory/GoogleMap/Base/Bound.php:170:        $this->extends = array();
./src/Ivory/GoogleMap/Base/Bound.php:173:            $this->extend($extend);
./src/Ivory/GoogleMap/Base/Bound.php:184:        $this->extends[] = $extend;
./src/Ivory/GoogleMap/Base/Bound.php:194:        $centerLatitude = ($this->getSouthWest()->getLatitude() + $this->getNorthEast()->getLatitude()) / 2;
./src/Ivory/GoogleMap/Base/Bound.php:195:        $centerLongitude = ($this->getSouthWest()->getLongitude() + $this->getNorthEast()->getLongitude()) / 2;
./LICENSE:1:Copyright (c) 2011-2014 Eric GELOEN
./doc/usage.md:24:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/map.md).
./doc/usage.md:32: 1.  [Marker](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker.md)
./doc/usage.md:33: 2.  [Info window](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_window.md)
./doc/usage.md:34: 3.  [Info box](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_box.md)
./doc/usage.md:35: 4.  [Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polyline.md)
./doc/usage.md:36: 5.  [Encoded Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md)
./doc/usage.md:37: 6.  [Polygon](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polygon.md)
./doc/usage.md:38: 7.  [Rectangle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/rectangle.md)
./doc/usage.md:39: 8.  [Circle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/circle.md)
./doc/usage.md:40: 9.  [Ground overlay](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/ground_overlay.md)
./doc/usage.md:41: 10. [Marker cluster](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_cluster.md)
./doc/usage.md:49: 1. [Map type control](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/map_type.md)
./doc/usage.md:50: 2. [Overview](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/overview.md)
./doc/usage.md:51: 3. [Pan](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/pan.md)
./doc/usage.md:52: 4. [Rotate](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/rotate.md)
./doc/usage.md:53: 5. [Scale](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/scale.md)
./doc/usage.md:54: 6. [Street view](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/street_view.md)
./doc/usage.md:55: 7. [Zoom](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/zoom.md)
./doc/usage.md:60:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/events.md).
./doc/usage.md:68:$map->setLibraries(array('places', 'geometry'));
./doc/usage.md:69:$libraries = $map->getLibraries();
./doc/usage.md:70:$hasLibraries = $map->hasLibraries();
./doc/usage.md:88:echo $mapHelper->renderHtmlContainer($map);
./doc/usage.md:100:echo $mapHelper->renderJavascripts($map);
./doc/usage.md:112:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/helper/container.md).
./doc/usage.md:116:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/helper/extension.md).
./doc/usage.md:123:echo $mapHelper->renderStylesheets($map);
./doc/usage.md:137:echo $mapHelper->render($map);
./doc/installation.md:12:$ curl -s https://getcomposer.org/installer | php
./doc/installation.md:21:``egeloen/google-map`` package:
./doc/installation.md:26:        "egeloen/google-map": "dev-master"
./doc/installation.md:44:[http adapter](http://github.com/widop/http-adapter):
./doc/installation.md:49:        "widop/http-adapter": "1.0.*"
./doc/installation.md:78:The Ivory Google Map library follows the [PSR-0 Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md).
./doc/usage/services/index.md:3: 1. [Directions API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/directions/directions.md)
./doc/usage/services/index.md:6: 4. [Geocoding API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/geocoding/geocoder.md)
./doc/usage/services/index.md:8: 6. [Business Account](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/business_account.md)
./doc/usage/services/business_account.md:12:$clientId = $businessAccount->getClientId();
./doc/usage/services/business_account.md:13:$businessAccount->setClientId($clientId);
./doc/usage/services/business_account.md:15:$secret = $businessAccount->getSecret();
./doc/usage/services/business_account.md:16:$businessAccount->setSecret($secret);
./doc/usage/services/business_account.md:19:Note that the client identifier is not prefixed by `gme-` (it is automatically prepended by the library).
./doc/usage/services/business_account.md:26:$channel = $businessAccount->getChannel();
./doc/usage/services/business_account.md:27:$businessAccount->setChannel($channel);
./doc/usage/services/business_account.md:44:$provider->setBusinessAccount(new BusinessAccount('client_id', 'secret'));
./doc/usage/services/business_account.md:45:$businessAccount = $provider->getBusinessAccount();
./doc/usage/services/business_account.md:48:$geocoder->registerProviders(array($provider));
./doc/usage/services/business_account.md:50:$response = $geocoder->geocode('1600 Amphitheatre Parkway, Mountain View, CA');
./doc/usage/services/business_account.md:56:$geocoder->setBusinessAccount(null);
./doc/usage/services/business_account.md:67:$directions->setBusinessAccount(new BusinessAccount('client_id', 'secret'));
./doc/usage/services/business_account.md:68:$businessAccount = $directions->getBusinessAccount();
./doc/usage/services/business_account.md:70:$response = $directions->route('Lille', 'Paris')
./doc/usage/services/business_account.md:76:$directions->setBusinessAccount(null);
./doc/usage/services/business_account.md:87:$distanceMatrix->setBusinessAccount(new BusinessAccount('client_id', 'secret'));
./doc/usage/services/business_account.md:88:$businessAccount = $distanceMatrix->getBusinessAccount();
./doc/usage/services/business_account.md:90:$response = $distanceMatrix->process(array('Vancouver BC'), array('San Francisco'));
./doc/usage/services/business_account.md:96:$distanceMatrix->setBusinessAccount(null);
./doc/usage/services/geocoding/geocoder_request.md:11:$request->setAddress('1600 Amphitheatre Parkway, Mountain View, CA');
./doc/usage/services/geocoding/geocoder_request.md:14:$request->setCoordinate(1.1, 2.1, true);
./doc/usage/services/geocoding/geocoder_request.md:16:$request->setBound(-1.1, -2.1, 2.1, 1.1, true, true);
./doc/usage/services/geocoding/geocoder_request.md:17:$request->setRegion('en');
./doc/usage/services/geocoding/geocoder_request.md:18:$request->setLanguage('en');
./doc/usage/services/geocoding/geocoder_request.md:19:$request->setSensor(false);
./doc/usage/services/geocoding/geocoder_request.md:32:$response = $geocoder->geocode($request);
./doc/usage/services/geocoding/geocoder.md:7:coordinates (like latitude 37.423021 and longitude -122.083739), which you can use to place markers or position the map.
./doc/usage/services/geocoding/geocoder.md:23:   - ``Geocoder\Provider\BindMapsProvider``
./doc/usage/services/geocoding/geocoder.md:24:   - ``Geocoder\Provider\FreeGeoIpProvider``
./doc/usage/services/geocoding/geocoder.md:25:   - ``Geocoder\Provider\GoogleMapsProvider``
./doc/usage/services/geocoding/geocoder.md:26:   - ``Geocoder\Provider\HostIpProvider``
./doc/usage/services/geocoding/geocoder.md:27:   - ``Geocoder\Provider\IpInfoDbProvider``
./doc/usage/services/geocoding/geocoder.md:28:   - ``Geocoder\Provider\YahooProvider``
./doc/usage/services/geocoding/geocoder.md:29:   - ``Ivory\GoogleMapBundle\Model\Services\Geocoding\Provider``
./doc/usage/services/geocoding/geocoder.md:33:   - ``Geocoder\HttpAdapter\BuzzHttpAdapter``
./doc/usage/services/geocoding/geocoder.md:34:   - ``Geocoder\HttpAdapter\CurlHttpAdapter``
./doc/usage/services/geocoding/geocoder.md:35:   - ``Geocoder\HttpAdapter\GuzzleHttpAdapter``
./doc/usage/services/geocoding/geocoder.md:36:   - ``Geocoder\HttpAdapter\ZendHttpAdapter``
./doc/usage/services/geocoding/geocoder.md:46:$geocoder->registerProviders(array(
./doc/usage/services/geocoding/geocoder.md:54:[here](http://www.geocoder-php.org/).
./doc/usage/services/geocoding/geocoder.md:60:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/geocoding/ivory_geocoder.md).
./doc/usage/services/geocoding/ivory_geocoder.md:11:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/business_account.md).
./doc/usage/services/geocoding/ivory_geocoder.md:21:$geocoder->registerProviders(array(
./doc/usage/services/geocoding/ivory_geocoder.md:26:$response = $geocoder->geocode('1600 Amphitheatre Parkway, Mountain View, CA');
./doc/usage/services/geocoding/ivory_geocoder.md:32:[documenation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/geocoding/geocoder_request.md).
./doc/usage/services/geocoding/ivory_geocoder.md:45:$status = $response->getStatus();
./doc/usage/services/geocoding/ivory_geocoder.md:54:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:64:The method ``getFormattedAddress`` is a string containing the human-readable address of this location. Often this
./doc/usage/services/geocoding/ivory_geocoder.md:71:$results = $reponse->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:75:    $address = $result->getFormattedAddress();
./doc/usage/services/geocoding/ivory_geocoder.md:84: - types which is an array indicating the type of the address component.
./doc/usage/services/geocoding/ivory_geocoder.md:85: - long name which is the full text description or name of the address component as returned by the Geocoder.
./doc/usage/services/geocoding/ivory_geocoder.md:86: - short name which is an abbreviated textual name for the address component, if available. For example, an address
./doc/usage/services/geocoding/ivory_geocoder.md:87:   component for the state of Alaska may have a long_name of "Alaska" and a short_name of "AK" using the 2-letter
./doc/usage/services/geocoding/ivory_geocoder.md:92:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:95:    foreach ($result->getAddressComponents() as $addressComponent) {
./doc/usage/services/geocoding/ivory_geocoder.md:96:        $longName = $addressComponent->getLongName();
./doc/usage/services/geocoding/ivory_geocoder.md:97:        $shortName = $addressComponent->getShortName();
./doc/usage/services/geocoding/ivory_geocoder.md:98:        $types = $addressComponent->getTypes();
./doc/usage/services/geocoding/ivory_geocoder.md:107:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:110:    foreach ($result->getAddressComponents('route') as $addressComponent) {
./doc/usage/services/geocoding/ivory_geocoder.md:119: - location which is an ``Ivory\GoogleMap\Base\Coordinate``.
./doc/usage/services/geocoding/ivory_geocoder.md:120: - location type stores additional data about the specified location. The available possibilites are describes by the
./doc/usage/services/geocoding/ivory_geocoder.md:122: - viewport which contains the recommended viewport for displaying the returned result, specified as ``Ivory\GoogleMap\Base\Bound``.
./doc/usage/services/geocoding/ivory_geocoder.md:123: - bounds (optionally returned) which stores the bounding box which can fully contain the returned result, specified as
./doc/usage/services/geocoding/ivory_geocoder.md:128:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:131:    $location = $result->getGeometry()->getLocation()
./doc/usage/services/geocoding/ivory_geocoder.md:132:    $locationType = $result->getGeometry()->getLocationType();
./doc/usage/services/geocoding/ivory_geocoder.md:133:    $viewport = $result->getGeometry()->getViewport();
./doc/usage/services/geocoding/ivory_geocoder.md:134:    $bound = $result->getGeometry()->getBound();
./doc/usage/services/geocoding/ivory_geocoder.md:147:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:150:    $partialMatch = $result->isPartialMatch();
./doc/usage/services/geocoding/ivory_geocoder.md:162:$results = $response->getResults();
./doc/usage/services/geocoding/ivory_geocoder.md:165:    $types = $result->getTypes();
./doc/usage/services/geocoding/ivory_geocoder.md:179:$response = $this->geocode('1600 Amphitheatre Parkway, Mountain View, CA');
./doc/usage/services/geocoding/ivory_geocoder.md:184:foreach ($response->getResults() as $result) {
./doc/usage/services/geocoding/ivory_geocoder.md:189:    $marker->setPosition($result->getGeometry()->getLocation());
./doc/usage/services/geocoding/ivory_geocoder.md:192:    $map->addMarker($marker);
./doc/usage/services/distance_matrix/distance_matrix.md:3:The Distance Matrix API uses [widop/http-adapter](http://github.com/widop/http-adapter) which is a PHP 5.3 library for
./doc/usage/services/distance_matrix/distance_matrix.md:12:[Directions API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/directions/directions.md).
./doc/usage/services/distance_matrix/distance_matrix.md:24:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/business_account.md).
./doc/usage/services/distance_matrix/distance_matrix.md:29:$response = $distanceMatrix->process(array('Vancouver BC'), array('San Francisco'));
./doc/usage/services/distance_matrix/distance_matrix.md:33:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/distance_matrix/distance_matrix_request.md).
./doc/usage/services/distance_matrix/distance_matrix.md:46:$status = $response->getStatus();
./doc/usage/services/distance_matrix/distance_matrix.md:56:$origins = $response->getOrigins();
./doc/usage/services/distance_matrix/distance_matrix.md:66:$destinations = $response->getDestinations();
./doc/usage/services/distance_matrix/distance_matrix.md:77:single origin-destination pairing.
./doc/usage/services/distance_matrix/distance_matrix.md:82:    $elements = $row->getElements();
./doc/usage/services/distance_matrix/distance_matrix.md:88:The information about each origin-destination pairing is represented by the
./doc/usage/services/distance_matrix/distance_matrix.md:105:$status = $element->getStatus();
./doc/usage/services/distance_matrix/distance_matrix.md:114:$distance = $element->getDistance();
./doc/usage/services/distance_matrix/distance_matrix.md:123:$duration = $element->getDuration();
./doc/usage/services/distance_matrix/distance_matrix_request.md:14:$request->setOrigins(array('New York'));
./doc/usage/services/distance_matrix/distance_matrix_request.md:15:$request->setOrigins(array(new Coordinate(1.1, 2.1, true)));
./doc/usage/services/distance_matrix/distance_matrix_request.md:18:$request->setDestinations(array('Washington'));
./doc/usage/services/distance_matrix/distance_matrix_request.md:19:$request->setDestinations(array(new Coordinate(2.1, 1.1, true)));
./doc/usage/services/distance_matrix/distance_matrix_request.md:21:$request->setAvoidHighways(true);
./doc/usage/services/distance_matrix/distance_matrix_request.md:22:$request->setAvoidTolls(true);
./doc/usage/services/distance_matrix/distance_matrix_request.md:24:$request->setRegion('us');
./doc/usage/services/distance_matrix/distance_matrix_request.md:25:$request->setLanguage('en');
./doc/usage/services/distance_matrix/distance_matrix_request.md:26:$request->setTravelMode(TravelMode::DRIVING);
./doc/usage/services/distance_matrix/distance_matrix_request.md:27:$request->setUnitSystem(UnitSystem::METRIC);
./doc/usage/services/distance_matrix/distance_matrix_request.md:28:$request->setSensor(false);
./doc/usage/services/distance_matrix/distance_matrix_request.md:39:$response = $distanceMatrix->process($request);
./doc/usage/services/directions/directions_request.md:13:$request->setOrigin('New York')
./doc/usage/services/directions/directions_request.md:14:$request->setOrigin(1.1, 2.1, true);
./doc/usage/services/directions/directions_request.md:17:$request->setDestination('Washington');
./doc/usage/services/directions/directions_request.md:18:$request->setDestination(2.1, 1.1, true);
./doc/usage/services/directions/directions_request.md:21:$request->addWaypoint('Philadelphia');
./doc/usage/services/directions/directions_request.md:22:$request->addWaypoint(1.2, 2.2, true);
./doc/usage/services/directions/directions_request.md:25:$request->setOptimizeWaypoints(true);
./doc/usage/services/directions/directions_request.md:27:$request->setAvoidHighways(true);
./doc/usage/services/directions/directions_request.md:28:$request->setAvoidTolls(true);
./doc/usage/services/directions/directions_request.md:29:$request->setProvideRouteAlternatives(true);
./doc/usage/services/directions/directions_request.md:31:$request->setRegion('us');
./doc/usage/services/directions/directions_request.md:32:$request->setLanguage('en');
./doc/usage/services/directions/directions_request.md:33:$request->setTravelMode(TravelMode::DRIVING);
./doc/usage/services/directions/directions_request.md:34:$request->setUnitSystem(UnitSystem::METRIC);
./doc/usage/services/directions/directions_request.md:35:$request->setSensor(false);
./doc/usage/services/directions/directions_request.md:46:$response = $directions->route($request);
./doc/usage/services/directions/directions.md:3:The Directions API uses [widop/http-adapter](http://github.com/widop/http-adapter) which is a PHP 5.3 library for
./doc/usage/services/directions/directions.md:9:or as latitude/longitude coordinates. The Directions API can return multi-part directions using a series of waypoints.
./doc/usage/services/directions/directions.md:21:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/business_account.md).
./doc/usage/services/directions/directions.md:26:$response = $directions->route('New York', 'Washington');
./doc/usage/services/directions/directions.md:30:[documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/directions/directions_request.md).
./doc/usage/services/directions/directions.md:43:$status = $response->getStatus();
./doc/usage/services/directions/directions.md:53:$routes = $reponse->getRoutes();
./doc/usage/services/directions/directions.md:63:$routes = $reponse->getRoutes();
./doc/usage/services/directions/directions.md:77:$bound = $route->getBound();
./doc/usage/services/directions/directions.md:86:$copyrights = $route->getCopyrights();
./doc/usage/services/directions/directions.md:97:$legs = $route->getLegs();
./doc/usage/services/directions/directions.md:102:The overview polyline is an [encoded polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md)
./doc/usage/services/directions/directions.md:107:$overviewPolyline = $route->getOverviewPolyline();
./doc/usage/services/directions/directions.md:117:$summary = $route->getSummary();
./doc/usage/services/directions/directions.md:127:$warnings = $route->getWarnings();
./doc/usage/services/directions/directions.md:137:$waypointOrder = $route->getWaypointOrder();
./doc/usage/services/directions/directions.md:147:$legs = $route->getLegs();
./doc/usage/services/directions/directions.md:162:$duration = $leg->getDistance();
./doc/usage/services/directions/directions.md:172:$duration = $leg->getDuration();
./doc/usage/services/directions/directions.md:182:$startLocation = $leg->getStartLocation();
./doc/usage/services/directions/directions.md:192:$endLocation = $leg->getEndLocation();
./doc/usage/services/directions/directions.md:197:It contains the human-readable address (typically a street address) reflecting the start location.
./doc/usage/services/directions/directions.md:201:$startAddress = $leg->getStartAddress();
./doc/usage/services/directions/directions.md:206:It contains the human-readable address (typically a street address) reflecting the end location.
./doc/usage/services/directions/directions.md:210:$endAddress = $leg->getEndAddress();
./doc/usage/services/directions/directions.md:219:$steps = $leg->getSteps();
./doc/usage/services/directions/directions.md:227:step denoted as "Merge onto I-80 West" may contain a duration of "37 miles" and "40 minutes," indicating that the next
./doc/usage/services/directions/directions.md:235:$steps = $leg->getSteps();
./doc/usage/services/directions/directions.md:250:$distance = $step->getDistance();
./doc/usage/services/directions/directions.md:260:$duration = $step->getDuration();
./doc/usage/services/directions/directions.md:270:$startLocation = $step->getStartLocation();
./doc/usage/services/directions/directions.md:280:$endLocation = $step->getEndLocation();
./doc/usage/services/directions/directions.md:289:$instructions = $step->getInstructions();
./doc/usage/services/directions/directions.md:294:It represents the step as an [encoded polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md).
./doc/usage/services/directions/directions.md:298:$encodedPolyline = $step->getEncodedPolyline();
./doc/usage/services/directions/directions.md:308:$travelMode = $step->getTravelMode();
./doc/usage/events.md:7: - User events (such as "click" mouse events) are propagated from the DOM to the Google Maps API. These events are
./doc/usage/events.md:9: - MVC state change notifications reflect changes in Maps API objects and are named using a property_changed convention.
./doc/usage/events.md:19:$event->setInstance($instance);
./doc/usage/events.md:20:$event->setEventName($eventName);
./doc/usage/events.md:21:$event->setHandle($handle);
./doc/usage/events.md:25:$event->setCapture(true);
./doc/usage/events.md:36:$instance = $infoWindow->getJavascriptVariable();
./doc/usage/events.md:62:$map->getEventManager()->addDomEvent($event);
./doc/usage/events.md:65:$map->getEventManager()->addDomEventOnce($event);
./doc/usage/events.md:72:$map->getEventManager()->addEvent($event);
./doc/usage/events.md:75:$map->getEventManager()->addEventOnce($event);
./doc/usage/layers/kml_layer.md:14:$kmlLayer->setUrl('http://www.domain.com/kml_layer.kml');
./doc/usage/layers/kml_layer.md:16:$kmlLayer->setOption('clickable', true);
./doc/usage/layers/kml_layer.md:17:$kmlLayer->setOption('suppressInfoWindows', false);
./doc/usage/layers/kml_layer.md:18:$kmlLayer->setOptions(array(
./doc/usage/layers/kml_layer.md:32:$map->addKMLLayer($kmlLayer);
./doc/usage/layers/index.md:3: 1. [KML Layer](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/layers/kml_layer.md)
./doc/usage/overlays/info_window.md:3:Info window displays content in a floating window above the map. The info window looks a little like a comic-book word
./doc/usage/overlays/info_window.md:14:$infoWindow->setPrefixJavascriptVariable('info_window_');
./doc/usage/overlays/info_window.md:15:$infoWindow->setPosition(0, 0, true);
./doc/usage/overlays/info_window.md:16:$infoWindow->setPixelOffset(1.1, 2.1, 'px', 'pt');
./doc/usage/overlays/info_window.md:17:$infoWindow->setContent('<p>Default content</p>');
./doc/usage/overlays/info_window.md:18:$infoWindow->setOpen(false);
./doc/usage/overlays/info_window.md:19:$infoWindow->setAutoOpen(true);
./doc/usage/overlays/info_window.md:20:$infoWindow->setOpenEvent(MouseEvent::CLICK);
./doc/usage/overlays/info_window.md:21:$infoWindow->setAutoClose(false);
./doc/usage/overlays/info_window.md:22:$infoWindow->setOption('disableAutoPan', true);
./doc/usage/overlays/info_window.md:23:$infoWindow->setOption('zIndex', 10);
./doc/usage/overlays/info_window.md:24:$infoWindow->setOptions(array(
./doc/usage/overlays/info_window.md:38:$map->addInfoWindow($infoWindow);
./doc/usage/overlays/info_window.md:49:$marker->setInfoWindow($infoWindow);
./doc/usage/overlays/info_window.md:65:$infoWindow->setOpenEvent(MouseEvent::CLICK);
./doc/usage/overlays/info_window.md:66:$infoWindow->setOpenEvent('click');
./doc/usage/overlays/info_window.md:68:$infoWindow->setOpenEvent(MouseEvent::DBLCLICK);
./doc/usage/overlays/info_window.md:69:$infoWindow->setOpenEvent('dblclick');
./doc/usage/overlays/info_window.md:71:$infoWindow->setOpenEvent(MouseEvent::MOUSEUP);
./doc/usage/overlays/info_window.md:72:$infoWindow->setOpenEvent('mouseup');
./doc/usage/overlays/info_window.md:74:$infoWindow->setOpenEvent(MouseEvent::MOUSEDOWN);
./doc/usage/overlays/info_window.md:75:$infoWindow->setOpenEvent('mousedown');
./doc/usage/overlays/info_window.md:77:$infoWindow->setOpenEvent(MouseEvent::MOUSEOVER);
./doc/usage/overlays/info_window.md:78:$infoWindow->setOpenEvent('mouseover');
./doc/usage/overlays/info_window.md:80:$infoWindow->setOpenEvent(MouseEvent::MOUSEOUT);
./doc/usage/overlays/info_window.md:81:$infoWindow->setOpenEvent('mouseout');
./doc/usage/overlays/encoded_polyline.md:3:The Encoded Polyline class defines a [Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polyline.md)
./doc/usage/overlays/encoded_polyline.md:15:$polyline->setPrefixJavascriptVariable('polyline_');
./doc/usage/overlays/encoded_polyline.md:17:$encodedPolyline->setValue('encoded_polyline_value');
./doc/usage/overlays/encoded_polyline.md:19:$polyline->setOption('geodesic', true);
./doc/usage/overlays/encoded_polyline.md:20:$polyline->setOption('strokeColor', '#ffffff');
./doc/usage/overlays/encoded_polyline.md:21:$polyline->setOptions(array(
./doc/usage/overlays/encoded_polyline.md:35:$map->addEncodedPolyline($encodedPolyline);
./doc/usage/overlays/rectangle.md:16:$rectangle->setPrefixJavascriptVariable('rectangle_');
./doc/usage/overlays/rectangle.md:17:$rectangle->setBound(-1, -1, 1, 1, true, true);
./doc/usage/overlays/rectangle.md:19:$rectangle->setOption('clickable', false);
./doc/usage/overlays/rectangle.md:20:$rectangle->setOption('strokeColor', '#ffffff');
./doc/usage/overlays/rectangle.md:21:$rectangle->setOptions(array(
./doc/usage/overlays/rectangle.md:35:$map->addRectangle($rectangle);
./doc/usage/overlays/index.md:6: 1.  [Marker](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker.md)
./doc/usage/overlays/index.md:7: 2.  [Info window](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_window.md)
./doc/usage/overlays/index.md:8: 3.  [Info box](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_box.md)
./doc/usage/overlays/index.md:9: 4.  [Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polyline.md)
./doc/usage/overlays/index.md:10: 5.  [Encoded Polyline]((http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md)
./doc/usage/overlays/index.md:11: 6.  [Polygon](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polygon.md)
./doc/usage/overlays/index.md:12: 7.  [Rectangle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/rectangle.md)
./doc/usage/overlays/index.md:13: 8.  [Circle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/circle.md)
./doc/usage/overlays/index.md:14: 9.  [Ground overlay](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/ground_overlay.md)
./doc/usage/overlays/index.md:15: 10. [Marker cluster](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_cluster.md)
./doc/usage/overlays/marker_cluster.md:20:$markerCluster = $map->getMarkerCluster();
./doc/usage/overlays/marker_cluster.md:21:$map->setMarkerCluster($markerCluster);
./doc/usage/overlays/marker_cluster.md:23:$type = $markerCluster->getType();
./doc/usage/overlays/marker_cluster.md:24:$markers = $markerCluster->getMarkers();
./doc/usage/overlays/marker_cluster.md:25:$options = $markerCluster->getOptions();
./doc/usage/overlays/marker_cluster.md:36:$markerCluster->setType(MarkerCluster::_DEFAULT);
./doc/usage/overlays/marker_cluster.md:37:$markerCluster->setType('default');
./doc/usage/overlays/marker_cluster.md:42:The javascript marker cluster provides a [MarkerCluster](http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/docs/examples.html)
./doc/usage/overlays/marker_cluster.md:48:$markerCluster->setType(MarkerCluster::MARKER_CLUSTER);
./doc/usage/overlays/marker_cluster.md:49:$markerCluster->setType('marker_cluster');
./doc/usage/overlays/marker_cluster.md:55:$markerCluster->setOption('gridSize', 50);
./doc/usage/overlays/marker_cluster.md:56:$markerCluster->setOption('maxZoom', 15);
./doc/usage/overlays/marker_cluster.md:108:$mapHelper->getMarkerClusterHelper()->addHelper('my_helper', $markerClusterHelper);
./doc/usage/overlays/marker_cluster.md:115:$map->getMarkerCluster()->setType('my_helper');
./doc/usage/overlays/marker_shape.md:8:http://www.w3.org/TR/REC-html40/struct/objects.html#adef-coords. The coordinates attribute is an array of integers that
./doc/usage/overlays/marker_shape.md:9:specify the pixel position of the shape relative to the top-left corner of the target image. The coordinates depend on
./doc/usage/overlays/marker_shape.md:12: - circle: coordinates is [x1, y1, r] where x1, y2 are the coordinates of the center of the circle, and r is the radius
./doc/usage/overlays/marker_shape.md:14: - poly: coordinates is [x1, y1, x2, y2 ... xn, yn] where each x, y pair contains the coordinates of one vertex of the
./doc/usage/overlays/marker_shape.md:16: - rect: coordinates is [x1, y1, x2, y2] where x1, y1 are the coordinates of the upper-left corner of the rectangle
./doc/usage/overlays/marker_shape.md:17:   and x2, y2 are the coordinates of the lower-right coordinates of the rectangle.
./doc/usage/overlays/marker_shape.md:27:$markerShape->setPrefixJavascriptVariable('marker_shape_');
./doc/usage/overlays/marker_shape.md:28:$markerShape->setType('poly');
./doc/usage/overlays/marker_shape.md:29:$markerShape->setCoordinates(array(1, 1, 1, -1, -1, -1, -1, 1));
./doc/usage/overlays/marker_shape.md:32:$markerShape->addPolyCoordinates(1, 1);
./doc/usage/overlays/marker_shape.md:45:$marker->setShape($markerShape);
./doc/usage/overlays/marker_image.md:14:$markerImage->setPrefixJavascriptVariable('marker_image_');
./doc/usage/overlays/marker_image.md:15:$markerImage->setUrl('http://maps.gstatic.com/mapfiles/markers/marker.png');
./doc/usage/overlays/marker_image.md:16:$markerImage->setAnchor(20, 34);
./doc/usage/overlays/marker_image.md:17:$markerImage->setOrigin(0, 0);
./doc/usage/overlays/marker_image.md:18:$markerImage->setSize(20, 34, "px", "px");
./doc/usage/overlays/marker_image.md:19:$markerImage->setScaledSize(20, 34, "px", "px");
./doc/usage/overlays/marker_image.md:34:$marker->setIcon($markerImage);
./doc/usage/overlays/marker_image.md:45:$marker->setShadow($markerImage);
./doc/usage/overlays/polyline.md:14:$polyline->setPrefixJavascriptVariable('polyline_');
./doc/usage/overlays/polyline.md:16:$polyline->setOption('geodesic', true);
./doc/usage/overlays/polyline.md:17:$polyline->setOption('strokeColor', '#ffffff');
./doc/usage/overlays/polyline.md:18:$polyline->setOptions(array(
./doc/usage/overlays/polyline.md:35:$polyline->addCoordinate(0, 0, true);
./doc/usage/overlays/polyline.md:36:$polyline->addCoordinate(1, 1, true);
./doc/usage/overlays/polyline.md:47:$map->addPolyline($polyline);
./doc/usage/overlays/ground_overlay.md:3:Polygons are useful overlays to represent arbitrarily-sized areas, but they cannot display images. If you have an image
./doc/usage/overlays/ground_overlay.md:14:$groundOverlay->setPrefixJavascriptVariable('ground_overlay_');
./doc/usage/overlays/ground_overlay.md:15:$groundOverlay->setUrl('url');
./doc/usage/overlays/ground_overlay.md:16:$groundOverlay->setBound(-1, -1, 1, 1, true, true);
./doc/usage/overlays/ground_overlay.md:18:$groundOverlay->setOption('clickable', false);
./doc/usage/overlays/ground_overlay.md:19:$groundOverlay->setOptions(array('clickable' => false));
./doc/usage/overlays/ground_overlay.md:30:$map->addGroundOverlay($groundOverlay);
./doc/usage/overlays/marker.md:14:$marker->setPrefixJavascriptVariable('marker_');
./doc/usage/overlays/marker.md:15:$marker->setPosition(0, 0, true);
./doc/usage/overlays/marker.md:16:$marker->setAnimation(Animation::DROP);
./doc/usage/overlays/marker.md:18:$marker->setOption('clickable', false);
./doc/usage/overlays/marker.md:19:$marker->setOption('flat', true);
./doc/usage/overlays/marker.md:20:$marker->setOptions(array(
./doc/usage/overlays/marker.md:39:$marker->setAnimation(Animation::BOUNCE);
./doc/usage/overlays/marker.md:40:$marker->setAnimation('bounce');
./doc/usage/overlays/marker.md:42:$marker->setAnimation(Animation::DROP);
./doc/usage/overlays/marker.md:43:$marker->setAnimation('drop');
./doc/usage/overlays/marker.md:61:$marker->setIcon('http://maps.gstatic.com/mapfiles/markers/marker.png');
./doc/usage/overlays/marker.md:67:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_image.md).
./doc/usage/overlays/marker.md:75:$marker->setIcon($markerImage);
./doc/usage/overlays/marker.md:93:$marker->setShadow('http://maps.gstatic.com/mapfiles/markers/marker.png');
./doc/usage/overlays/marker.md:99:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_image.md).
./doc/usage/overlays/marker.md:107:$marker->setShadow($markerImage);
./doc/usage/overlays/marker.md:113:[here](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_shape.md).
./doc/usage/overlays/marker.md:125:$map->addMarker($marker);
./doc/usage/overlays/circle.md:16:$circle->setPrefixJavascriptVariable('circle_');
./doc/usage/overlays/circle.md:17:$circle->setCenter(0, 0, true);
./doc/usage/overlays/circle.md:18:$circle->setRadius(1);
./doc/usage/overlays/circle.md:20:$circle->setOption('clickable', false);
./doc/usage/overlays/circle.md:21:$circle->setOption('strokeWeight', 2);
./doc/usage/overlays/circle.md:22:$circle->setOptions(array(
./doc/usage/overlays/circle.md:36:$map->addCircle($circle);
./doc/usage/overlays/polygon.md:4:However, instead of being open-ended, polygons are designed to define regions within a closed loop.
./doc/usage/overlays/polygon.md:14:$polygon->setPrefixJavascriptVariable('polygon_');
./doc/usage/overlays/polygon.md:16:$polygon->setOption('fillColor', '#000000');
./doc/usage/overlays/polygon.md:17:$polygon->setOption('fillOpacity', 0.5);
./doc/usage/overlays/polygon.md:18:$polygon->setOptions(array(
./doc/usage/overlays/polygon.md:35:$polygon->addCoordinate(0, 0, true);
./doc/usage/overlays/polygon.md:36:$polygon->addCoordinate(1, 1, true);
./doc/usage/overlays/polygon.md:47:$map->addPolygon($polygon);
./doc/usage/overlays/info_box.md:4:[info window](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_window.md) but through a
./doc/usage/overlays/info_box.md:6:the info window helper & registering a new [extension helper](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/helper/extension.md).
./doc/usage/overlays/info_box.md:17:$infoWindow->setPosition(1.1, 2.1);
./doc/usage/overlays/info_box.md:19:$map->addInfoWindow($infoWindow);
./doc/usage/overlays/info_box.md:33:$mapHelper->setInfoWindowHelper(new InfoBoxHelper());
./doc/usage/overlays/info_box.md:34:$mapHelper->setExtensionHelper('info_box', new InfoBoxExtensionHelper());
./doc/usage/overlays/info_box.md:36:$output = $mapHelper->render($map);
./doc/usage/controls/street_view.md:15:$streetViewControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/street_view.md:31:$streetViewControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/street_view.md:32:$streetViewControl->setControlPosition('top_left');
./doc/usage/controls/street_view.md:34:$streetViewControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/street_view.md:35:$streetViewControl->setControlPosition('top_center');
./doc/usage/controls/street_view.md:37:$streetViewControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/street_view.md:38:$streetViewControl->setControlPosition('top_right');
./doc/usage/controls/street_view.md:40:$streetViewControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/street_view.md:41:$streetViewControl->setControlPosition('left_top');
./doc/usage/controls/street_view.md:43:$streetViewControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/street_view.md:44:$streetViewControl->setControlPosition('left_center');
./doc/usage/controls/street_view.md:46:$streetViewControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/street_view.md:47:$streetViewControl->setControlPosition('left_bottom');
./doc/usage/controls/street_view.md:49:$streetViewControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/street_view.md:50:$streetViewControl->setControlPosition('right_top');
./doc/usage/controls/street_view.md:52:$streetViewControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/street_view.md:53:$streetViewControl->setControlPosition('right_center');
./doc/usage/controls/street_view.md:55:$streetViewControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/street_view.md:56:$streetViewControl->setControlPosition('right_bottom');
./doc/usage/controls/street_view.md:58:$streetViewControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/street_view.md:59:$streetViewControl->setControlPosition('bottom_left');
./doc/usage/controls/street_view.md:61:$streetViewControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/street_view.md:62:$streetViewControl->setControlPosition('bottom_center');
./doc/usage/controls/street_view.md:64:$streetViewControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/street_view.md:65:$streetViewControl->setControlPosition('bottom_right');
./doc/usage/controls/street_view.md:77:$map->setStreetViewControl($streetViewControl);
./doc/usage/controls/street_view.md:78:$map->setStreetViewControl(ControlPosition::TOP_LEFT);
./doc/usage/controls/index.md:7: 1. [Map type](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/map_type.md)
./doc/usage/controls/index.md:8: 2. [Overview](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/overview.md)
./doc/usage/controls/index.md:9: 3. [Pan](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/pan.md)
./doc/usage/controls/index.md:10: 4. [Rotate](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/rotate.md)
./doc/usage/controls/index.md:11: 5. [Scale](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/scale.md)
./doc/usage/controls/index.md:12: 6. [Street view](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/street_view.md)
./doc/usage/controls/index.md:13: 7. [Zoom](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/zoom.md)
./doc/usage/controls/rotate.md:15:$rotateControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/rotate.md:31:$rotateControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/rotate.md:32:$rotateControl->setControlPosition('top_left');
./doc/usage/controls/rotate.md:34:$rotateControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/rotate.md:35:$rotateControl->setControlPosition('top_center');
./doc/usage/controls/rotate.md:37:$rotateControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/rotate.md:38:$rotateControl->setControlPosition('top_right');
./doc/usage/controls/rotate.md:40:$rotateControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/rotate.md:41:$rotateControl->setControlPosition('left_top');
./doc/usage/controls/rotate.md:43:$rotateControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/rotate.md:44:$rotateControl->setControlPosition('left_center');
./doc/usage/controls/rotate.md:46:$rotateControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/rotate.md:47:$rotateControl->setControlPosition('left_bottom');
./doc/usage/controls/rotate.md:49:$rotateControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/rotate.md:50:$rotateControl->setControlPosition('right_top');
./doc/usage/controls/rotate.md:52:$rotateControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/rotate.md:53:$rotateControl->setControlPosition('right_center');
./doc/usage/controls/rotate.md:55:$rotateControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/rotate.md:56:$rotateControl->setControlPosition('right_bottom');
./doc/usage/controls/rotate.md:58:$rotateControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/rotate.md:59:$rotateControl->setControlPosition('bottom_left');
./doc/usage/controls/rotate.md:61:$rotateControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/rotate.md:62:$rotateControl->setControlPosition('bottom_center');
./doc/usage/controls/rotate.md:64:$rotateControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/rotate.md:65:$rotateControl->setControlPosition('bottom_right');
./doc/usage/controls/rotate.md:77:$map->setRotateControl($rotateControl);
./doc/usage/controls/rotate.md:78:$map->setRotateControl(ControlPosition::TOP_LEFT);
./doc/usage/controls/zoom.md:3:The Zoom control displays a slider (for large maps) or small "+/-" buttons (for small maps) to control the zoom level
./doc/usage/controls/zoom.md:4:of the map. This control appears by default in the top left corner of the map on non-touch devices or in the bottom
./doc/usage/controls/zoom.md:17:$zoomControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/zoom.md:18:$zoomControl->setZoomControlStyle(ZoomControlStyle::DEFAULT_);
./doc/usage/controls/zoom.md:34:$zoomControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/zoom.md:35:$zoomControl->setControlPosition('top_left');
./doc/usage/controls/zoom.md:37:$zoomControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/zoom.md:38:$zoomControl->setControlPosition('top_center');
./doc/usage/controls/zoom.md:40:$zoomControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/zoom.md:41:$zoomControl->setControlPosition('top_right');
./doc/usage/controls/zoom.md:43:$zoomControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/zoom.md:44:$zoomControl->setControlPosition('left_top');
./doc/usage/controls/zoom.md:46:$zoomControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/zoom.md:47:$zoomControl->setControlPosition('left_center');
./doc/usage/controls/zoom.md:49:$zoomControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/zoom.md:50:$zoomControl->setControlPosition('left_bottom');
./doc/usage/controls/zoom.md:52:$zoomControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/zoom.md:53:$zoomControl->setControlPosition('right_top');
./doc/usage/controls/zoom.md:55:$zoomControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/zoom.md:56:$zoomControl->setControlPosition('right_center');
./doc/usage/controls/zoom.md:58:$zoomControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/zoom.md:59:$zoomControl->setControlPosition('right_bottom');
./doc/usage/controls/zoom.md:61:$zoomControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/zoom.md:62:$zoomControl->setControlPosition('bottom_left');
./doc/usage/controls/zoom.md:64:$zoomControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/zoom.md:65:$zoomControl->setControlPosition('bottom_center');
./doc/usage/controls/zoom.md:67:$zoomControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/zoom.md:68:$zoomControl->setControlPosition('bottom_right');
./doc/usage/controls/zoom.md:84:$zoomControl->setZoomControlStyle(ZoomControlStyle::DEFAULT_);
./doc/usage/controls/zoom.md:85:$zoomControl->setZoomControlStyle('default');
./doc/usage/controls/zoom.md:87:$zoomControl->setZoomControlStyle(ZoomControlStyle::LARGE);
./doc/usage/controls/zoom.md:88:$zoomControl->setZoomControlStyle('large');
./doc/usage/controls/zoom.md:90:$zoomControl->setZoomControlStyle(ZoomControlStyle::SMALL);
./doc/usage/controls/zoom.md:91:$zoomControl->setZoomControlStyle('small');
./doc/usage/controls/zoom.md:104:$map->setZoomControl($zoomControl);
./doc/usage/controls/zoom.md:105:$map->setZoomControl(ControlPosition::TOP_LEFT, ZoomControlStyle::DEFAULT_);
./doc/usage/controls/map_type.md:17:$mapTypeControl->setMapTypeIds(array(MapTypeId::ROADMAP, MapTypeId::SATELLITE));
./doc/usage/controls/map_type.md:19:$mapTypeControl->addMapTypeId(MapTypeId::ROADMAP);
./doc/usage/controls/map_type.md:20:$mapTypeControl->addMapTypeId(MapTypeId::SATELLITE);
./doc/usage/controls/map_type.md:22:$mapTypeControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/map_type.md:24:$mapTypeControl->setMapTypeControlStyle(MapTypeControlStyle::DEFAULT_);
./doc/usage/controls/map_type.md:40:$mapTypeControl->addMapTypeId(MapTypeId::HYBRID);
./doc/usage/controls/map_type.md:41:$mapTypeControl->addMapTypeId('hybrid');
./doc/usage/controls/map_type.md:43:$mapTypeControl->addMapTypeId(MapTypeId::ROADMAP);
./doc/usage/controls/map_type.md:44:$mapTypeControl->addMapTypeId('roadmap');
./doc/usage/controls/map_type.md:46:$mapTypeControl->addMapTypeId(MapTypeId::SATELLITE);
./doc/usage/controls/map_type.md:47:$mapTypeControl->addMapTypeId('satellite');
./doc/usage/controls/map_type.md:49:$mapTypeControl->addMapTypeId(MapTypeId::TERRAIN);
./doc/usage/controls/map_type.md:50:$mapTypeControl->addMapTypeId('terrain');
./doc/usage/controls/map_type.md:66:$mapTypeControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/map_type.md:67:$mapTypeControl->setControlPosition('top_left');
./doc/usage/controls/map_type.md:69:$mapTypeControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/map_type.md:70:$mapTypeControl->setControlPosition('top_center');
./doc/usage/controls/map_type.md:72:$mapTypeControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/map_type.md:73:$mapTypeControl->setControlPosition('top_right');
./doc/usage/controls/map_type.md:75:$mapTypeControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/map_type.md:76:$mapTypeControl->setControlPosition('left_top');
./doc/usage/controls/map_type.md:78:$mapTypeControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/map_type.md:79:$mapTypeControl->setControlPosition('left_center');
./doc/usage/controls/map_type.md:81:$mapTypeControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/map_type.md:82:$mapTypeControl->setControlPosition('left_bottom');
./doc/usage/controls/map_type.md:84:$mapTypeControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/map_type.md:85:$mapTypeControl->setControlPosition('right_top');
./doc/usage/controls/map_type.md:87:$mapTypeControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/map_type.md:88:$mapTypeControl->setControlPosition('right_center');
./doc/usage/controls/map_type.md:90:$mapTypeControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/map_type.md:91:$mapTypeControl->setControlPosition('right_bottom');
./doc/usage/controls/map_type.md:93:$mapTypeControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/map_type.md:94:$mapTypeControl->setControlPosition('bottom_left');
./doc/usage/controls/map_type.md:96:$mapTypeControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/map_type.md:97:$mapTypeControl->setControlPosition('bottom_center');
./doc/usage/controls/map_type.md:99:$mapTypeControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/map_type.md:100:$mapTypeControl->setControlPosition('bottom_right');
./doc/usage/controls/map_type.md:116:$mapTypeControl->setMapTypeControlStyle(MapTypeControlStyle::DEFAULT_);
./doc/usage/controls/map_type.md:117:$mapTypeControl->setMapTypeControlStyle('default');
./doc/usage/controls/map_type.md:119:$mapTypeControl->setMapTypeControlStyle(MapTypeControlStyle::DROPDOWN_MENU);
./doc/usage/controls/map_type.md:120:$mapTypeControl->setMapTypeControlStyle('dropdown_menu');
./doc/usage/controls/map_type.md:122:$mapTypeControl->setMapTypeControlStyle(MapTypeControlStyle::HORIZONTAL_BAR);
./doc/usage/controls/map_type.md:123:$mapTypeControl->setMapTypeControlStyle('horizontal_bar');
./doc/usage/controls/map_type.md:137:$map->setMapTypeControl($mapTypeControl);
./doc/usage/controls/map_type.md:138:$map->setMapTypeControl(
./doc/usage/controls/overview.md:14:$overviewMapControl->setOpened(false);
./doc/usage/controls/overview.md:25:$map->setOverviewMapControl($overviewMapControl);
./doc/usage/controls/overview.md:26:$map->setOverviewMapControl(false);
./doc/usage/controls/pan.md:4:map on non-touch devices. The Pan control also allows you to rotate 45° imagery, if available.
./doc/usage/controls/pan.md:15:$panControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/pan.md:31:$panControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/pan.md:32:$panControl->setControlPosition('top_left');
./doc/usage/controls/pan.md:34:$panControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/pan.md:35:$panControl->setControlPosition('top_center');
./doc/usage/controls/pan.md:37:$panControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/pan.md:38:$panControl->setControlPosition('top_right');
./doc/usage/controls/pan.md:40:$panControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/pan.md:41:$panControl->setControlPosition('left_top');
./doc/usage/controls/pan.md:43:$panControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/pan.md:44:$panControl->setControlPosition('left_center');
./doc/usage/controls/pan.md:46:$panControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/pan.md:47:$panControl->setControlPosition('left_bottom');
./doc/usage/controls/pan.md:49:$panControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/pan.md:50:$panControl->setControlPosition('right_top');
./doc/usage/controls/pan.md:52:$panControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/pan.md:53:$panControl->setControlPosition('right_center');
./doc/usage/controls/pan.md:55:$panControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/pan.md:56:$panControl->setControlPosition('right_bottom');
./doc/usage/controls/pan.md:58:$panControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/pan.md:59:$panControl->setControlPosition('bottom_left');
./doc/usage/controls/pan.md:61:$panControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/pan.md:62:$panControl->setControlPosition('bottom_center');
./doc/usage/controls/pan.md:64:$panControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/pan.md:65:$panControl->setControlPosition('bottom_right');
./doc/usage/controls/pan.md:77:$map->setPanControl($panControl);
./doc/usage/controls/pan.md:78:$map->setPanControl(ControlPosition::TOP_LEFT);
./doc/usage/controls/scale.md:15:$scaleControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/scale.md:16:$scaleControl->setScaleControlStyle(ScaleControlStyle::DEFAULT_);
./doc/usage/controls/scale.md:32:$scaleControl->setControlPosition(ControlPosition::TOP_LEFT);
./doc/usage/controls/scale.md:33:$scaleControl->setControlPosition('top_left');
./doc/usage/controls/scale.md:35:$scaleControl->setControlPosition(ControlPosition::TOP_CENTER);
./doc/usage/controls/scale.md:36:$scaleControl->setControlPosition('top_center');
./doc/usage/controls/scale.md:38:$scaleControl->setControlPosition(ControlPosition::TOP_RIGHT);
./doc/usage/controls/scale.md:39:$scaleControl->setControlPosition('top_right');
./doc/usage/controls/scale.md:41:$scaleControl->setControlPosition(ControlPosition::LEFT_TOP);
./doc/usage/controls/scale.md:42:$scaleControl->setControlPosition('left_top');
./doc/usage/controls/scale.md:44:$scaleControl->setControlPosition(ControlPosition::LEFT_CENTER);
./doc/usage/controls/scale.md:45:$scaleControl->setControlPosition('left_center');
./doc/usage/controls/scale.md:47:$scaleControl->setControlPosition(ControlPosition::LEFT_BOTTOM);
./doc/usage/controls/scale.md:48:$scaleControl->setControlPosition('left_bottom');
./doc/usage/controls/scale.md:50:$scaleControl->setControlPosition(ControlPosition::RIGHT_TOP);
./doc/usage/controls/scale.md:51:$scaleControl->setControlPosition('right_top');
./doc/usage/controls/scale.md:53:$scaleControl->setControlPosition(ControlPosition::RIGHT_CENTER);
./doc/usage/controls/scale.md:54:$scaleControl->setControlPosition('right_center');
./doc/usage/controls/scale.md:56:$scaleControl->setControlPosition(ControlPosition::RIGHT_BOTTOM);
./doc/usage/controls/scale.md:57:$scaleControl->setControlPosition('right_bottom');
./doc/usage/controls/scale.md:59:$scaleControl->setControlPosition(ControlPosition::BOTTOM_LEFT);
./doc/usage/controls/scale.md:60:$scaleControl->setControlPosition('bottom_left');
./doc/usage/controls/scale.md:62:$scaleControl->setControlPosition(ControlPosition::BOTTOM_CENTER);
./doc/usage/controls/scale.md:63:$scaleControl->setControlPosition('bottom_center');
./doc/usage/controls/scale.md:65:$scaleControl->setControlPosition(ControlPosition::BOTTOM_RIGHT);
./doc/usage/controls/scale.md:66:$scaleControl->setControlPosition('bottom_right');
./doc/usage/controls/scale.md:82:$scaleControl->setScaleControlStyle(ScaleControlStyle::DEFAULT_);
./doc/usage/controls/scale.md:95:$map->setScaleControl($scaleControl);
./doc/usage/controls/scale.md:96:$map->setScaleControl(ControlPosition::BOTTOM_LEFT, ScaleControlStyle::DEFAULT_);
./doc/usage/map.md:11:$map->setPrefixJavascriptVariable('map_');
./doc/usage/map.md:12:$map->setHtmlContainerId('map_canvas');
./doc/usage/map.md:14:$map->setAsync(false);
./doc/usage/map.md:15:$map->setAutoZoom(false);
./doc/usage/map.md:17:$map->setCenter(0, 0, true);
./doc/usage/map.md:18:$map->setMapOption('zoom', 3);
./doc/usage/map.md:20:$map->setBound(-2.1, -3.9, 2.6, 1.4, true, true);
./doc/usage/map.md:22:$map->setMapOption('mapTypeId', MapTypeId::ROADMAP);
./doc/usage/map.md:23:$map->setMapOption('mapTypeId', 'roadmap');
./doc/usage/map.md:25:$map->setMapOption('disableDefaultUI', true);
./doc/usage/map.md:26:$map->setMapOption('disableDoubleClickZoom', true);
./doc/usage/map.md:27:$map->setMapOptions(array(
./doc/usage/map.md:32:$map->setStylesheetOption('width', '300px');
./doc/usage/map.md:33:$map->setStylesheetOption('height', '300px');
./doc/usage/map.md:34:$map->setStylesheetOptions(array(
./doc/usage/map.md:39:$map->setLanguage('en');
./doc/usage/map.md:60:$map->setAutoZoom(false);
./doc/usage/map.md:63:$map->setCenter(0, 0, true);
./doc/usage/map.md:66:$map->setMapOption('zoom', 3);
./doc/usage/map.md:80:$map->setAutoZoom(true);
./doc/usage/map.md:83:$map->setBound(-2.1, -3.9, 2.6, 1.4, true, true);
./doc/usage/map.md:89:In the [overlays documentation](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/index.md),
./doc/usage/map.md:100:$map->setAutoZoom(true);
./doc/usage/map.md:103:$map->addMarker(new Marker());
./doc/usage/map.md:119:$map->setMapOption('mapTypeId', MapTypeId::HYBRID);
./doc/usage/map.md:120:$map->setMapOption('mapTypeId', 'hybrid');
./doc/usage/map.md:122:$map->setMapOption('mapTypeId', MapTypeId::ROADMAP);
./doc/usage/map.md:123:$map->setMapOption('mapTypeId', 'roadmap');
./doc/usage/map.md:125:$map->setMapOption('mapTypeId', MapTypeId::SATELLITE);
./doc/usage/map.md:126:$map->setMapOption('mapTypeId', 'satellite');
./doc/usage/map.md:128:$map->setMapOption('mapTypeId', MapTypeId::TERRAIN);
./doc/usage/map.md:129:$map->setMapOption('mapTypeId', 'terrain');
./doc/usage/map.md:143:$map->setAsync(true);
./doc/usage/map.md:162: 1. [Marker](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker.md)
./doc/usage/map.md:163: 2. [Info window](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_window.md)
./doc/usage/map.md:164: 3. [Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polyline.md)
./doc/usage/map.md:165: 4. [EncodedPolyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md)
./doc/usage/map.md:166: 5. [Polygon](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polygon.md)
./doc/usage/map.md:167: 6. [Rectangle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/rectangle.md)
./doc/usage/map.md:168: 7. [Circle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/circle.md)
./doc/usage/map.md:169: 8. [Ground overlay](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/ground_overlay.md)
./doc/usage/map.md:170: 9. [Marker cluster](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_cluster.md)
./doc/usage/map.md:178: 1. [Map type](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/map_type.md)
./doc/usage/map.md:179: 2. [Overview](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/overview.md)
./doc/usage/map.md:180: 3. [Pan](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/pan.md)
./doc/usage/map.md:181: 4. [Rotate](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/rotate.md)
./doc/usage/map.md:182: 5. [Scale](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/scale.md)
./doc/usage/map.md:183: 6. [Street view](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/street_view.md)
./doc/usage/map.md:184: 7. [Zoom](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/zoom.md)
./doc/usage/helper/extension.md:53:$mapHelper->setExtensionHelper('my_extension', new MyExtensionHelper());
./doc/usage/helper/extension.md:57:$output = $mapHelper->renderJavascripts($map);
./doc/usage/helper/container.md:3:When you call `$mapHelper->renderJavascripts($map)`, the library will generate for you all needed JS code for
./doc/usage/places/autocomplete.md:4:entries. As text is entered, Autocomplete returns Place predictions to the application in the form of a drop-down pick
./doc/usage/places/autocomplete.md:19:$autocomplete->setPrefixJavascriptVariable('place_autocomplete_');
./doc/usage/places/autocomplete.md:20:$autocomplete->setInputId('place_input');
./doc/usage/places/autocomplete.md:22:$autocomplete->setInputAttributes(array('class' => 'my-class'));
./doc/usage/places/autocomplete.md:23:$autocomplete->setInputAttribute('class', 'my-class');
./doc/usage/places/autocomplete.md:25:$autocomplete->setValue('foo');
./doc/usage/places/autocomplete.md:27:$autocomplete->setTypes(array(AutocompleteType::ESTABLISHMENT));
./doc/usage/places/autocomplete.md:28:$autocomplete->setComponentRestrictions(array(AutocompleteComponentRestriction::COUNTRY => 'fr'));
./doc/usage/places/autocomplete.md:29:$autocomplete->setBound(-2.1, -3.9, 2.6, 1.4, true, true);
./doc/usage/places/autocomplete.md:31:$autocomplete->setAsync(false);
./doc/usage/places/autocomplete.md:32:$autocomplete->setLanguage('en');
./doc/usage/places/autocomplete.md:50:echo $autocompleteHelper->renderHtmlContainer($autocomplete);
./doc/usage/places/autocomplete.md:62:echo $autocompleteHelper->renderJavascripts($autocomplete);
./doc/usage/places/index.md:7: 1. [Autocomplete](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/places/autocomplete.md)
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:32:        $this->panControl = new PanControl();
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:40:        unset($this->panControl);
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:45:        $this->assertSame(ControlPosition::TOP_LEFT, $this->panControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:50:        $this->panControl = new PanControl(ControlPosition::LEFT_CENTER);
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:52:        $this->assertSame(ControlPosition::LEFT_CENTER, $this->panControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/PanControlTest.php:60:        $this->panControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:34:        $this->mapTypeControl = new MapTypeControl();
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:42:        unset($this->mapTypeControl);
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:47:        $this->assertSame(array(MapTypeId::ROADMAP, MapTypeId::SATELLITE), $this->mapTypeControl->getMapTypeIds());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:48:        $this->assertSame(ControlPosition::TOP_RIGHT, $this->mapTypeControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:49:        $this->assertSame(MapTypeControlStyle::DEFAULT_, $this->mapTypeControl->getMapTypeControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:58:        $this->mapTypeControl = new MapTypeControl($mapTypeIds, $controlPosition, $mapTypeControlStyle);
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:60:        $this->assertSame($mapTypeIds, $this->mapTypeControl->getMapTypeIds());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:61:        $this->assertSame($controlPosition, $this->mapTypeControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:62:        $this->assertSame($mapTypeControlStyle, $this->mapTypeControl->getMapTypeControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:71:        $this->mapTypeControl->addMapTypeId('foo');
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:81:        $this->mapTypeControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlTest.php:90:        $this->mapTypeControl->setMapTypeControlStyle('foo');
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlStyleTest.php:31:        $this->assertSame($expected, ZoomControlStyle::getZoomControlStyles());
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:32:        $this->rotateControl = new RotateControl();
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:40:        unset($this->rotateControl);
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:45:        $this->assertSame(ControlPosition::TOP_LEFT, $this->rotateControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:50:        $this->rotateControl = new RotateControl(ControlPosition::LEFT_CENTER);
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:52:        $this->assertSame(ControlPosition::LEFT_CENTER, $this->rotateControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/RotateControlTest.php:60:        $this->rotateControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:33:        $this->zoomControl = new ZoomControl();
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:41:        unset($this->zoomControl);
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:46:        $this->assertSame(ControlPosition::TOP_LEFT, $this->zoomControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:47:        $this->assertSame(ZoomControlStyle::DEFAULT_, $this->zoomControl->getZoomControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:52:        $this->zoomControl = new ZoomControl(ControlPosition::BOTTOM_CENTER, ZoomControlStyle::LARGE);
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:54:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->zoomControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:55:        $this->assertSame(ZoomControlStyle::LARGE, $this->zoomControl->getZoomControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:63:        $this->zoomControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/ZoomControlTest.php:72:        $this->zoomControl->setZoomControlStyle('foo');
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:31:        $this->overviewMapControl = new OverviewMapControl();
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:39:        unset($this->overviewMapControl);
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:44:        $this->assertFalse($this->overviewMapControl->isOpened());
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:49:        $this->overviewMapControl = new OverviewMapControl(true);
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:51:        $this->assertTrue($this->overviewMapControl->isOpened());
./tests/Ivory/Tests/GoogleMap/Controls/OverviewMapControlTest.php:60:        $this->overviewMapControl->setOpened('foo');
./tests/Ivory/Tests/GoogleMap/Controls/MapTypeControlStyleTest.php:31:        $this->assertSame($expected, MapTypeControlStyle::getMapTypeControlStyles());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:33:        $this->scaleControl = new ScaleControl();
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:41:        unset($this->scaleControl);
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:46:        $this->assertSame(ControlPosition::BOTTOM_LEFT, $this->scaleControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:47:        $this->assertSame(ScaleControlStyle::DEFAULT_, $this->scaleControl->getScaleControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:52:        $this->scaleControl = new ScaleControl(ControlPosition::BOTTOM_CENTER, ScaleControlStyle::DEFAULT_);
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:54:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->scaleControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:55:        $this->assertSame(ScaleControlStyle::DEFAULT_, $this->scaleControl->getScaleControlStyle());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:63:        $this->scaleControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlTest.php:72:        $this->scaleControl->setScaleControlStyle('foo');
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:32:        $this->streetViewControl = new StreetViewControl();
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:40:        unset($this->streetViewControl);
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:45:        $this->assertSame(ControlPosition::TOP_LEFT, $this->streetViewControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:50:        $this->streetViewControl = new StreetViewControl(ControlPosition::BOTTOM_CENTER);
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:52:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->streetViewControl->getControlPosition());
./tests/Ivory/Tests/GoogleMap/Controls/StreetViewControlTest.php:60:        $this->streetViewControl->setControlPosition('foo');
./tests/Ivory/Tests/GoogleMap/Controls/ControlPositionTest.php:40:        $this->assertSame($expected, ControlPosition::getControlPositions());
./tests/Ivory/Tests/GoogleMap/Controls/ScaleControlStyleTest.php:27:        $this->assertSame($expected, ScaleControlStyle::getScaleControlStyles());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:32:        $this->controlPositionHelper = new ControlPositionHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:40:        unset($this->controlPositionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:45:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:47:            $this->controlPositionHelper->render(ControlPosition::BOTTOM_CENTER)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:50:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:52:            $this->controlPositionHelper->render(ControlPosition::BOTTOM_LEFT)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:55:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:57:            $this->controlPositionHelper->render(ControlPosition::BOTTOM_RIGHT)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:60:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:62:            $this->controlPositionHelper->render(ControlPosition::LEFT_BOTTOM)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:65:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:67:            $this->controlPositionHelper->render(ControlPosition::LEFT_CENTER)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:70:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:72:            $this->controlPositionHelper->render(ControlPosition::LEFT_TOP)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:75:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:77:            $this->controlPositionHelper->render(ControlPosition::RIGHT_BOTTOM)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:80:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:82:            $this->controlPositionHelper->render(ControlPosition::RIGHT_CENTER)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:85:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:87:            $this->controlPositionHelper->render(ControlPosition::RIGHT_TOP)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:90:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:92:            $this->controlPositionHelper->render(ControlPosition::TOP_CENTER)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:95:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:97:            $this->controlPositionHelper->render(ControlPosition::TOP_LEFT)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:100:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:102:            $this->controlPositionHelper->render(ControlPosition::TOP_RIGHT)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ControlPositionHelperTest.php:113:        $this->controlPositionHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/OverviewMapControlHelperTest.php:32:        $this->overviewMapControlHelper = new OverviewMapControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/OverviewMapControlHelperTest.php:40:        unset($this->overviewMapControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/OverviewMapControlHelperTest.php:47:        $this->assertSame('{"opened":true}', $this->overviewMapControlHelper->render($overviewMapControl));
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:32:        $this->mapTypeControlStyleHelper = new MapTypeControlStyleHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:40:        unset($this->mapTypeControlStyleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:45:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:47:            $this->mapTypeControlStyleHelper->render(MapTypeControlStyle::DEFAULT_)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:50:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:52:            $this->mapTypeControlStyleHelper->render(MapTypeControlStyle::DROPDOWN_MENU)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:55:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:57:            $this->mapTypeControlStyleHelper->render(MapTypeControlStyle::HORIZONTAL_BAR)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlStyleHelperTest.php:67:        $this->mapTypeControlStyleHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:33:        $this->panControlHelper = new PanControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:41:        unset($this->panControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:46:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:48:            $this->panControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:54:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:56:        $this->panControlHelper = new PanControlHelper($controlPositionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:58:        $this->assertSame($controlPositionHelper, $this->panControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:65:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/PanControlHelperTest.php:67:            $this->panControlHelper->render($panControl)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:35:        $this->mapTypeControlHelper = new MapTypeControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:43:        unset($this->mapTypeControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:48:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:50:            $this->mapTypeControlHelper->getMapTypeIdHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:53:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:55:            $this->mapTypeControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:58:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:60:            $this->mapTypeControlHelper->getMapTypeControlStyleHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:66:        $mapTypeIdHelper = $this->getMock('Ivory\GoogleMap\Helper\MapTypeIdHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:67:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:68:        $mapTypeControlStyleHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\MapTypeControlStyleHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:70:        $this->mapTypeControlHelper = new MapTypeControlHelper(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:76:        $this->assertSame($mapTypeIdHelper, $this->mapTypeControlHelper->getMapTypeIdHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:77:        $this->assertSame($controlPositionHelper, $this->mapTypeControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:78:        $this->assertSame($mapTypeControlStyleHelper, $this->mapTypeControlHelper->getMapTypeControlStyleHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/MapTypeControlHelperTest.php:95:        $this->assertSame($expected, $this->mapTypeControlHelper->render($mapTypeControl));
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:32:        $this->zoomControlStyleHelper = new ZoomControlStyleHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:40:        unset($this->zoomControlStyleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:45:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:47:            $this->zoomControlStyleHelper->render(ZoomControlStyle::DEFAULT_)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:50:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:52:            $this->zoomControlStyleHelper->render(ZoomControlStyle::LARGE)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:55:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:57:            $this->zoomControlStyleHelper->render(ZoomControlStyle::SMALL)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlStyleHelperTest.php:67:        $this->zoomControlStyleHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:33:        $this->rotateControlHelper = new RotateControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:41:        unset($this->rotateControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:46:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:48:            $this->rotateControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:54:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:56:        $this->rotateControlHelper = new RotateControlHelper($controlPositionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:58:        $this->assertSame($controlPositionHelper, $this->rotateControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:65:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/RotateControlHelperTest.php:67:            $this->rotateControlHelper->render($rotateControl)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:34:        $this->scaleControlHelper = new ScaleControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:42:        unset($this->scaleControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:47:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:49:            $this->scaleControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:52:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:54:            $this->scaleControlHelper->getScaleControlStyleHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:60:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:61:        $scaleControlStyleHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ScaleControlStyleHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:63:        $this->scaleControlHelper = new ScaleControlHelper($controlPositionHelper, $scaleControlStyleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:65:        $this->assertSame($controlPositionHelper, $this->scaleControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:66:        $this->assertSame($scaleControlStyleHelper, $this->scaleControlHelper->getScaleControlStyleHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:73:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlHelperTest.php:75:            $this->scaleControlHelper->render($scaleControl)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlStyleHelperTest.php:32:        $this->scaleControlStyleHelper = new ScaleControlStyleHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlStyleHelperTest.php:40:        unset($this->scaleControlStyleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlStyleHelperTest.php:45:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlStyleHelperTest.php:47:            $this->scaleControlStyleHelper->render(ScaleControlStyle::DEFAULT_)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ScaleControlStyleHelperTest.php:57:        $this->scaleControlStyleHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:34:        $this->zoomControlHelper = new ZoomControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:42:        unset($this->zoomControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:47:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:49:            $this->zoomControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:52:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:54:            $this->zoomControlHelper->getZoomControlStyleHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:60:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:61:        $zoomControlStyleHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ZoomControlStyleHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:63:        $this->zoomControlHelper = new ZoomControlHelper($controlPositionHelper, $zoomControlStyleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:65:        $this->assertSame($controlPositionHelper, $this->zoomControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:66:        $this->assertSame($zoomControlStyleHelper, $this->zoomControlHelper->getZoomControlStyleHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:73:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/ZoomControlHelperTest.php:75:            $this->zoomControlHelper->render($zoomControlTest)
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:33:        $this->streetViewControlHelper = new StreetViewControlHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:41:        unset($this->streetViewControlHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:46:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:48:            $this->streetViewControlHelper->getControlPositionHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:54:        $controlPositionHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ControlPositionHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:56:        $this->streetViewControlHelper = new StreetViewControlHelper($controlPositionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:58:        $this->assertSame($controlPositionHelper, $this->streetViewControlHelper->getControlPositionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:65:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Controls/StreetViewControlHelperTest.php:67:            $this->streetViewControlHelper->render($streetViewControl)
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:33:        $this->coreExtensionHelper = new CoreExtensionHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:41:        unset($this->coreExtensionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:46:        $this->assertInstanceOf('Ivory\GoogleMap\Helper\ApiHelper', $this->coreExtensionHelper->getApiHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:47:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:49:            $this->coreExtensionHelper->getMarkerClusterHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:55:        $apiHelper = $this->getMock('Ivory\GoogleMap\Helper\ApiHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:56:        $markerClusterHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:58:        $this->coreExtensionHelper = new CoreExtensionHelper($apiHelper, $markerClusterHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:60:        $this->assertSame($apiHelper, $this->coreExtensionHelper->getApiHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:61:        $this->assertSame($markerClusterHelper, $this->coreExtensionHelper->getMarkerClusterHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:74:        $this->assertSame($expected, $this->coreExtensionHelper->renderLibraries(new Map()));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:80:        $map->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:90:        $this->assertSame($expected, $this->coreExtensionHelper->renderLibraries($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:96:        $map->setLibraries(array('places'));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:97:        $map->addEncodedPolyline(new EncodedPolyline('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:107:        $this->assertSame($expected, $this->coreExtensionHelper->renderLibraries($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:120:        $this->assertSame($expected1, $this->coreExtensionHelper->renderLibraries(new Map()));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:121:        $this->assertNull($this->coreExtensionHelper->renderLibraries(new Map()));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:126:        $this->assertNull($this->coreExtensionHelper->renderBefore(new Map()));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:132:        $map->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:134:        $this->assertSame('function load_ivory_google_map() {'.PHP_EOL, $this->coreExtensionHelper->renderBefore($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:139:        $this->assertNull($this->coreExtensionHelper->renderAfter(new Map()));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:145:        $map->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/CoreExtensionHelperTest.php:147:        $this->assertSame('}'.PHP_EOL, $this->coreExtensionHelper->renderAfter($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:31:        $this->infoBoxExtensionHelper = new InfoBoxExtensionHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:39:        unset($this->infoBoxExtensionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:44:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:45:            '//google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox_packed.js',
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:46:            $this->infoBoxExtensionHelper->getSource()
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:49:        $this->assertSame('load_ivory_google_map_info_box', $this->infoBoxExtensionHelper->getCallback());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:54:        $this->infoBoxExtensionHelper = new InfoBoxExtensionHelper('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:56:        $this->assertSame('foo', $this->infoBoxExtensionHelper->getSource());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:57:        $this->assertSame('bar', $this->infoBoxExtensionHelper->getCallback());
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:62:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:65:<script type="text/javascript" src="//google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox_packed.js"></script>
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:69:        $this->assertSame($expected, $this->infoBoxExtensionHelper->renderLibraries($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:74:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:76:        $this->assertNull($this->infoBoxExtensionHelper->renderBefore($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:81:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:83:        $this->assertNull($this->infoBoxExtensionHelper->renderAfter($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:88:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:90:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:91:            ->method('isAsync')
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:92:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:94:        $this->assertNull($this->infoBoxExtensionHelper->renderLibraries($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:99:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:101:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:102:            ->method('isAsync')
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:103:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:110:        $this->assertSame($expected, $this->infoBoxExtensionHelper->renderBefore($map));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:115:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:117:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:118:            ->method('isAsync')
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:119:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:126:s.src = "//google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox_packed.js";
./tests/Ivory/Tests/GoogleMap/Helper/Extension/InfoBoxExtensionHelperTest.php:132:        $this->assertSame($expected, $this->infoBoxExtensionHelper->renderAfter($map));
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:31:        $this->apiHelper = new ApiHelper();
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:39:        unset($this->apiHelper);
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:44:        $this->assertFalse($this->apiHelper->isLoaded());
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:49:        $this->apiHelper->render();
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:51:        $this->assertTrue($this->apiHelper->isLoaded());
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:53:        $this->apiHelper->isLoaded(false);
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:55:        $this->assertFalse($this->apiHelper->isLoaded());
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:68:        $this->assertSame($expected, $this->apiHelper->render());
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:81:        $this->assertSame($expected, $this->apiHelper->render('fr'));
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:94:        $this->assertSame($expected, $this->apiHelper->render('en', array()));
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:107:        $this->assertSame($expected, $this->apiHelper->render('en', array('geometry', 'places')));
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:120:        $this->assertSame($expected, $this->apiHelper->render('en', array(), 'callback'));
./tests/Ivory/Tests/GoogleMap/Helper/ApiHelperTest.php:133:        $this->assertSame($expected, $this->apiHelper->render('en', array(), null, true));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:47:        $this->mapHelper = new MapHelper();
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:55:        unset($this->mapHelper);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:60:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:62:            $this->mapHelper->getCoordinateHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:65:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:67:            $this->mapHelper->getBoundHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:70:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:72:            $this->mapHelper->getPointHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:75:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:77:            $this->mapHelper->getSizeHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:80:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:82:            $this->mapHelper->getMapTypeIdHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:85:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:87:            $this->mapHelper->getMapTypeControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:90:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:92:            $this->mapHelper->getOverviewMapControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:95:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:97:            $this->mapHelper->getPanControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:100:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:102:            $this->mapHelper->getRotateControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:105:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:107:            $this->mapHelper->getScaleControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:110:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:112:            $this->mapHelper->getStreetViewControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:115:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:117:            $this->mapHelper->getZoomControlHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:120:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:122:            $this->mapHelper->getMarkerClusterHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:125:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:127:            $this->mapHelper->getMarkerImageHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:130:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:132:            $this->mapHelper->getMarkerShapeHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:135:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:137:            $this->mapHelper->getInfoWindowHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:140:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:142:            $this->mapHelper->getPolylineHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:145:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:147:            $this->mapHelper->getEncodedPolylineHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:150:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:152:            $this->mapHelper->getPolygonHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:155:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:157:            $this->mapHelper->getRectangleHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:160:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:162:            $this->mapHelper->getCircleHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:165:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:167:            $this->mapHelper->getGroundOverlayHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:170:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:172:            $this->mapHelper->getKmlLayerHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:175:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:177:            $this->mapHelper->getEventManagerHelper()
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:180:        $this->assertTrue($this->mapHelper->hasExtensionHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:181:        $this->assertCount(1, $this->mapHelper->getExtensionHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:183:        $this->assertTrue($this->mapHelper->hasExtensionHelper('core'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:184:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:186:            $this->mapHelper->getExtensionHelper('core')
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:192:        $coordinateHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\CoordinateHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:193:        $boundHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\BoundHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:194:        $pointHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\PointHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:195:        $sizeHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\SizeHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:196:        $mapTypeIdHelper = $this->getMock('Ivory\GoogleMap\Helper\MapTypeIdHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:197:        $mapTypeControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\MapTypeControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:198:        $overviewMapControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\OverviewMapControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:199:        $panControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\PanControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:200:        $rotateControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\RotateControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:201:        $scaleControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ScaleControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:202:        $streetViewControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\StreetViewControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:203:        $zoomControlHelper = $this->getMock('Ivory\GoogleMap\Helper\Controls\ZoomControlHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:204:        $markerClusterHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:205:        $markerImageHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerImageHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:206:        $markerShapeHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerShapeHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:207:        $infoWindowHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\InfoWindowHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:208:        $polylineHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\PolylineHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:209:        $encodedPolylineHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\EncodedPolylineHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:210:        $polygonHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\PolygonHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:211:        $rectangleHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\RectangleHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:212:        $circleHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\CircleHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:213:        $groundOverlayHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\GroundOverlayHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:214:        $kmlLayerHelper = $this->getMock('Ivory\GoogleMap\Helper\Layers\KMLLayerHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:215:        $eventManagerHelper = $this->getMock('Ivory\GoogleMap\Helper\Events\EventManagerHelper');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:216:        $extensionHelpers = array('foo' => $this->getMock('Ivory\GoogleMap\Helper\Extension\ExtensionHelperInterface'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:218:        $this->mapHelper = new MapHelper(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:246:        $this->assertSame($coordinateHelper, $this->mapHelper->getCoordinateHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:247:        $this->assertSame($boundHelper, $this->mapHelper->getBoundHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:248:        $this->assertSame($pointHelper, $this->mapHelper->getPointHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:249:        $this->assertSame($sizeHelper, $this->mapHelper->getSizeHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:250:        $this->assertSame($mapTypeIdHelper, $this->mapHelper->getMapTypeIdHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:251:        $this->assertSame($mapTypeControlHelper, $this->mapHelper->getMapTypeControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:252:        $this->assertSame($overviewMapControlHelper, $this->mapHelper->getOverviewMapControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:253:        $this->assertSame($panControlHelper, $this->mapHelper->getPanControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:254:        $this->assertSame($rotateControlHelper, $this->mapHelper->getRotateControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:255:        $this->assertSame($scaleControlHelper, $this->mapHelper->getScaleControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:256:        $this->assertSame($streetViewControlHelper, $this->mapHelper->getStreetViewControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:257:        $this->assertSame($zoomControlHelper, $this->mapHelper->getZoomControlHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:258:        $this->assertSame($markerClusterHelper, $this->mapHelper->getMarkerClusterHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:259:        $this->assertSame($markerImageHelper, $this->mapHelper->getMarkerImageHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:260:        $this->assertSame($markerShapeHelper, $this->mapHelper->getMarkerShapeHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:261:        $this->assertSame($infoWindowHelper, $this->mapHelper->getInfoWindowHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:262:        $this->assertSame($polylineHelper, $this->mapHelper->getPolylineHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:263:        $this->assertSame($encodedPolylineHelper, $this->mapHelper->getEncodedPolylineHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:264:        $this->assertSame($polygonHelper, $this->mapHelper->getPolygonHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:265:        $this->assertSame($rectangleHelper, $this->mapHelper->getRectangleHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:266:        $this->assertSame($circleHelper, $this->mapHelper->getCircleHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:267:        $this->assertSame($groundOverlayHelper, $this->mapHelper->getGroundOverlayHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:268:        $this->assertSame($kmlLayerHelper, $this->mapHelper->getKmlLayerHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:269:        $this->assertSame($eventManagerHelper, $this->mapHelper->getEventManagerHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:270:        $this->assertSame($extensionHelpers, $this->mapHelper->getExtensionHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:275:        $extensionHelper = $this->getMock('Ivory\GoogleMap\Helper\Extension\ExtensionHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:276:        $this->mapHelper->setExtensionHelper('foo', $extensionHelper);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:278:        $this->assertTrue($this->mapHelper->hasExtensionHelper('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:280:        $this->mapHelper->removeExtensionHelper('foo');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:282:        $this->assertFalse($this->mapHelper->hasExtensionHelper('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:291:        $this->mapHelper->removeExtensionHelper('foo');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:300:        $this->mapHelper->getExtensionHelper('foo');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:306:        $map->setHtmlContainerId('html_container_id');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:308:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:310:            $this->mapHelper->renderHtmlContainer($map)
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:317:        $map->setHtmlContainerId('html_container_id');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:318:        $map->setStylesheetOptions(array('width' => '200px','height' => '100px', 'option1' => 'value1'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:331:        $this->assertSame($expected, $this->mapHelper->renderStylesheets($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:337:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:363:        $this->assertSame($expected, $this->mapHelper->renderJsContainerInit($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:369:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:371:        $map->getBound()->setJavascriptVariable('map_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:373:        $map->addGroundOverlay($groundOverlay = new GroundOverlay());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:374:        $groundOverlay->getBound()->setJavascriptVariable('ground_overlay_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:375:        $groundOverlay->getBound()->getSouthWest()->setJavascriptVariable('ground_overlay_coordinate_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:376:        $groundOverlay->getBound()->getNorthEast()->setJavascriptVariable('ground_overlay_coordinate_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:378:        $map->addRectangle($rectangle = new Rectangle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:379:        $rectangle->getBound()->setJavascriptVariable('rectangle_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:380:        $rectangle->getBound()->getSouthWest()->setJavascriptVariable('rectangle_coordinate_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:381:        $rectangle->getBound()->getNorthEast()->setJavascriptVariable('rectangle_coordinate_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:383:        $map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:392:        $this->assertSame($expected, $this->mapHelper->renderJsContainerBounds($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:398:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:400:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:402:        $map->addRectangle($rectangle = new Rectangle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:403:        $rectangle->getBound()->getSouthWest()->setJavascriptVariable('rectangle_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:404:        $rectangle->getBound()->getNorthEast()->setJavascriptVariable('rectangle_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:406:        $map->addCircle($circle = new Circle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:407:        $circle->getCenter()->setJavascriptVariable('circle_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:409:        $map->addInfoWindow($infoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:410:        $infoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:411:        $infoWindow->getPosition()->setJavascriptVariable('info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:413:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:414:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:416:        $map->addPolygon($polygon = new Polygon());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:417:        $polygon->addCoordinate(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:418:        $polygon->addCoordinate(3.1, 4.2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:420:        foreach ($polygon->getCoordinates() as $index => $polygonCoordinate) {
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:421:            $polygonCoordinate->setJavascriptVariable('polygon_coordinate_'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:424:        $map->addPolyline($polyline = new Polyline());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:425:        $polyline->addCoordinate(1.2, 2.6);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:426:        $polyline->addCoordinate(3.2, 4.9);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:428:        foreach ($polyline->getCoordinates() as $index => $polyline) {
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:429:            $polyline->setJavascriptVariable('polyline_coordinate_'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:434:map_container.coordinates.rectangle_south_west = rectangle_south_west = new google.maps.LatLng(-1, -1, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:446:        $this->assertSame($expected, $this->mapHelper->renderJsContainerCoordinates($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:452:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:454:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:456:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:458:        $marker->getIcon()->setAnchor(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:459:        $marker->getIcon()->getAnchor()->setJavascriptVariable('marker_icon_anchor');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:461:        $marker->getIcon()->setOrigin(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:462:        $marker->getIcon()->getOrigin()->setJavascriptVariable('marker_icon_origin');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:464:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:466:        $marker->getShadow()->setAnchor(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:467:        $marker->getShadow()->getAnchor()->setJavascriptVariable('marker_shadow_anchor');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:469:        $marker->getShadow()->setOrigin(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:470:        $marker->getShadow()->getOrigin()->setJavascriptVariable('marker_shadow_origin');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:480:        $this->assertSame($expected, $this->mapHelper->renderJsContainerPoints($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:486:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:488:        $map->addInfoWindow($mapInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:489:        $mapInfoWindow->setPixelOffset(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:490:        $mapInfoWindow->getPixelOffset()->setJavascriptVariable('map_info_winfow_pixel_offset');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:492:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:494:        $marker->setInfoWindow($markerInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:495:        $markerInfoWindow->setPixelOffset(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:496:        $markerInfoWindow->getPixelOffset()->setJavascriptVariable('marker_info_window_pixel_offset');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:498:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:500:        $marker->getIcon()->setSize(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:501:        $marker->getIcon()->getSize()->setJavascriptVariable('marker_icon_size');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:503:        $marker->getIcon()->setScaledSize(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:504:        $marker->getIcon()->getScaledSize()->setJavascriptVariable('marker_icon_scaled_size');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:506:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:508:        $marker->getShadow()->setSize(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:509:        $marker->getShadow()->getSize()->setJavascriptVariable('marker_shadow_size');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:511:        $marker->getShadow()->setScaledSize(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:512:        $marker->getShadow()->getScaledSize()->setJavascriptVariable('marker_shadow_scaled_size');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:524:        $this->assertSame($expected, $this->mapHelper->renderJsContainerSizes($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:530:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:531:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:533:        $this->assertSame('map.setCenter(map_center);'.PHP_EOL, $this->mapHelper->renderMapCenter($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:539:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:540:        $map->getBound()->setJavascriptVariable('map_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:542:        $this->assertSame('map.fitBounds(map_bound);'.PHP_EOL, $this->mapHelper->renderMapBound($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:548:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:554:        $this->assertSame($expected, $this->mapHelper->renderMap($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:560:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:562:        $map->setMapTypeControl(
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:584:        $this->assertSame($expected, $this->mapHelper->renderMap($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:590:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:591:        $map->setMapOption('mapTypeControl', false);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:598:        $this->assertSame($expected, $this->mapHelper->renderMap($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:604:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:605:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:612:        $this->assertSame($expected, $this->mapHelper->renderJsContainerMap($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:618:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:620:        $map->addCircle($circle = new Circle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:621:        $circle->setJavascriptVariable('circle');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:622:        $circle->getCenter()->setJavascriptVariable('circle_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:629:        $this->assertSame($expected, $this->mapHelper->renderJsContainerCircles($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:635:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:637:        $map->addEncodedPolyline($encodedPolyline = new EncodedPolyline('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:638:        $encodedPolyline->setJavascriptVariable('encoded_polyline');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:645:        $this->assertSame($expected, $this->mapHelper->renderJsContainerEncodedPolylines($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:651:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:653:        $map->addGroundOverlay($groundOverlay = new GroundOverlay('url'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:654:        $groundOverlay->setJavascriptVariable('ground_overlay');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:655:        $groundOverlay->getBound()->setJavascriptVariable('ground_overlay_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:662:        $this->assertSame($expected, $this->mapHelper->renderJsContainerGroundOverlays($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:668:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:670:        $map->addPolygon($polygon = new Polygon());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:671:        $polygon->setJavascriptVariable('polygon');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:678:        $this->assertSame($expected, $this->mapHelper->renderJsContainerPolygons($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:684:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:686:        $map->addPolyline($polyline = new Polyline());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:687:        $polyline->setJavascriptVariable('polyline');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:694:        $this->assertSame($expected, $this->mapHelper->renderJsContainerPolylines($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:700:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:702:        $map->addRectangle($rectangle = new Rectangle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:703:        $rectangle->setJavascriptVariable('rectangle');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:704:        $rectangle->getBound()->setJavascriptVariable('rectangle_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:711:        $this->assertSame($expected, $this->mapHelper->renderJsContainerRectangles($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:717:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:719:        $map->addInfoWindow($mapInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:720:        $mapInfoWindow->setJavascriptVariable('map_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:721:        $mapInfoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:722:        $mapInfoWindow->getPosition()->setJavascriptVariable('map_info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:724:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:725:        $marker->setInfoWindow($markerInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:726:        $markerInfoWindow->setJavascriptVariable('marker_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:727:        $markerInfoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:728:        $markerInfoWindow->getPosition()->setJavascriptVariable('marker_info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:736:        $this->assertSame($expected, $this->mapHelper->renderJsContainerInfoWindows($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:742:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:744:        $map->addInfoWindow($mapInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:745:        $mapInfoWindow->setJavascriptVariable('map_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:746:        $mapInfoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:747:        $mapInfoWindow->getPosition()->setJavascriptVariable('map_info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:749:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:750:        $marker->setInfoWindow($markerInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:751:        $markerInfoWindow->setJavascriptVariable('marker_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:752:        $markerInfoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:753:        $markerInfoWindow->getPosition()->setJavascriptVariable('marker_info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:755:        $mapInfoWindow->setAutoClose(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:756:        $markerInfoWindow->setAutoClose(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:766:        $this->assertSame($expected, $this->mapHelper->renderJsContainerInfoWindows($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:772:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:774:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:776:        $marker->setIcon('url_icon');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:777:        $marker->getIcon()->setJavascriptVariable('marker_icon');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:779:        $marker->setShadow('shadow_url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:780:        $marker->getShadow()->setJavascriptVariable('marker_shadow');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:788:        $this->assertSame($expected, $this->mapHelper->renderJsContainerMarkerImages($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:794:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:796:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:797:        $marker->setShape('poly', array(1, 1, 1, -1, -1, -1, -1, 1));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:798:        $marker->getShape()->setJavascriptVariable('marker_shape');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:801:map_container.marker_shapes.marker_shape = marker_shape = new google.maps.MarkerShape({"type":"poly","coords":[1,1,1,-1,-1,-1,-1,1]});
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:805:        $this->assertSame($expected, $this->mapHelper->renderJsContainerMarkerShapes($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:811:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:813:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:814:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:815:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:822:        $this->assertSame($expected, $this->mapHelper->renderJsContainerMarkerCluster($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:828:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:830:        $map->addKMLLayer($kmlLayer = new KMLLayer('url'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:831:        $kmlLayer->setJavascriptVariable('kml_layer');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:838:        $this->assertSame($expected, $this->mapHelper->renderJsContainerKMLLayers($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:844:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:848:        $map->getEventManager()->addDomEvent($domEvent = clone $baseEvent);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:849:        $domEvent->setJavascriptVariable('dom_event');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:851:        $map->getEventManager()->addDomEventOnce($domEventOnce = clone $baseEvent);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:852:        $domEventOnce->setJavascriptVariable('dom_event_once');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:854:        $map->getEventManager()->addEvent($event = clone $baseEvent);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:855:        $event->setJavascriptVariable('event');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:857:        $map->getEventManager()->addEventOnce($eventOnce = clone $baseEvent);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:858:        $eventOnce->setJavascriptVariable('event_once');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:868:        $this->assertSame($expected, $this->mapHelper->renderJsContainerEventManager($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:874:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:876:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:886:        $this->assertSame($expected, $this->mapHelper->renderJsContainer($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:892:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:894:        $map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:895:        $map->getBound()->setJavascriptVariable('map_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:897:        $map->addCircle($circle = new Circle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:898:        $circle->setJavascriptVariable('circle');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:899:        $circle->getCenter()->setJavascriptVariable('circle_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:901:        $map->addEncodedPolyline($encodedPolyline = new EncodedPolyline('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:902:        $encodedPolyline->setJavascriptVariable('encoded_polyline');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:904:        $map->addGroundOverlay($groundOverlay = new GroundOverlay('url'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:905:        $groundOverlay->setJavascriptVariable('ground_overlay');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:906:        $groundOverlay->getBound()->setJavascriptVariable('ground_overlay_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:907:        $groundOverlay->getBound()->setSouthWest(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:908:        $groundOverlay->getBound()->getSouthWest()->setJavascriptVariable('ground_overlay_bound_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:909:        $groundOverlay->getBound()->setNorthEast(3, 4, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:910:        $groundOverlay->getBound()->getNorthEast()->setJavascriptVariable('ground_overlay_bound_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:912:        $map->addPolygon($polygon = new Polygon());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:913:        $polygon->setJavascriptVariable('polygon');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:915:        $map->addPolyline($polyline = new Polyline());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:916:        $polyline->setJavascriptVariable('polyline');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:918:        $map->addRectangle($rectangle = new Rectangle());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:919:        $rectangle->setJavascriptVariable('rectangle');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:920:        $rectangle->getBound()->setJavascriptVariable('rectangle_bound');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:921:        $rectangle->getBound()->setSouthWest(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:922:        $rectangle->getBound()->getSouthWest()->setJavascriptVariable('rectangle_bound_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:923:        $rectangle->getBound()->setNorthEast(3, 4, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:924:        $rectangle->getBound()->getNorthEast()->setJavascriptVariable('rectangle_bound_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:926:        $map->addInfoWindow($mapInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:927:        $mapInfoWindow->setJavascriptVariable('map_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:928:        $mapInfoWindow->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:929:        $mapInfoWindow->getPosition()->setJavascriptVariable('map_info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:931:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:932:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:933:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:935:        $marker->setInfoWindow($markerInfoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:936:        $markerInfoWindow->setJavascriptVariable('marker_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:938:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:939:        $marker->getIcon()->setJavascriptVariable('marker_icon');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:941:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:942:        $marker->getShadow()->setJavascriptVariable('marker_shadow');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:944:        $map->addKMLLayer($kmlLayer = new KMLLayer('url'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:945:        $kmlLayer->setJavascriptVariable('kml_layer');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:947:        $map->getEventManager()->addEvent($event = new Event('instance', 'click', 'function(){}', false));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:948:        $event->setJavascriptVariable('event');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:995:        $this->assertSame($expected, $this->mapHelper->renderJsContainer($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1001:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1003:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1019:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1025:        $encodedPolyline->setJavascriptVariable('encoded_polyline');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1028:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1029:        $map->addEncodedPolyline($encodedPolyline);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1031:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1048:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1054:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1055:        $map->setLibraries(array('places'));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1057:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1073:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1079:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1080:        $map->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1082:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1100:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1106:        $infoWindow->setJavascriptVariable('info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1107:        $infoWindow->setPosition(1.1, 2.2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1108:        $infoWindow->getPosition()->setJavascriptVariable('info_window_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1109:        $infoWindow->setContent('foo');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1110:        $infoWindow->setAutoOpen(false);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1111:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1114:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1115:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1116:        $map->addInfoWindow($infoWindow);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1135:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1141:        $infoWindow->setJavascriptVariable('info_window');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1142:        $infoWindow->setContent('foo');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1143:        $infoWindow->setAutoOpen(false);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1144:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1147:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1148:        $marker->setPosition(1.2, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1149:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1150:        $marker->setInfoWindow($infoWindow);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1153:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1154:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1155:        $map->addMarker($marker);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1175:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1181:        $map1->setJavascriptVariable('map1');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1182:        $map1->getCenter()->setJavascriptVariable('map1_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1199:        $map2->setJavascriptVariable('map2');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1200:        $map2->getCenter()->setJavascriptVariable('map2_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1212:        $this->assertSame($expected1, $this->mapHelper->renderJavascripts($map1));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1213:        $this->assertSame($expected2, $this->mapHelper->renderJavascripts($map2));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1218:        $this->mapHelper->setInfoWindowHelper(new InfoBoxHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1219:        $this->mapHelper->setExtensionHelper('info_box', new InfoBoxExtensionHelper());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1222:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1223:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1225:        $map->addInfoWindow($infoBox = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1226:        $infoBox->setJavascriptVariable('map_info_box');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1227:        $infoBox->setPosition(1, 2, true);
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1228:        $infoBox->getPosition()->setJavascriptVariable('map_info_box_position');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1235:<script type="text/javascript" src="//google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox_packed.js"></script>
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1247:        $this->assertSame($expected, $this->mapHelper->renderJavascripts($map));
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1253:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1255:        $map->getCenter()->setJavascriptVariable('map_center');
./tests/Ivory/Tests/GoogleMap/Helper/MapHelperTest.php:1278:        $this->assertSame($expected, $this->mapHelper->render($map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:32:        $this->infoWindowHelper = new InfoWindowHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:40:        unset($this->infoWindowHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:47:        $infoWindow->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:48:        $infoWindow->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:50:        $infoWindow->setPixelOffset(3, 4, 'px', 'px');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:51:        $infoWindow->getPixelOffset()->setJavascriptVariable('pixel_offset');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:53:        $infoWindow->setContent('content');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:54:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:56:        $expected = $infoWindow->getJavascriptVariable().' = new google.maps.InfoWindow({'.
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:62:        $this->assertSame($expected, $this->infoWindowHelper->render($infoWindow, true));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:69:        $infoWindow->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:70:        $infoWindow->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:72:        $infoWindow->setPixelOffset(3, 4, 'px', 'px');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:73:        $infoWindow->getPixelOffset()->setJavascriptVariable('pixel_offset');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:75:        $infoWindow->setContent('content');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:76:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:78:        $infoWindow->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:80:        $expected = $infoWindow->getJavascriptVariable().' = new google.maps.InfoWindow({'.
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:87:        $this->assertSame($expected, $this->infoWindowHelper->render($infoWindow, false));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:92:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:94:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:95:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:96:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:99:        $infoWindow->setJavascriptVariable('infoWindow');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:100:        $infoWindow->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:101:        $infoWindow->setContent('content');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:102:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:103:        $infoWindow->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:105:        $this->assertSame('infoWindow.open(map);'.PHP_EOL, $this->infoWindowHelper->renderOpen($infoWindow, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:110:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:112:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:113:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:114:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:117:        $infoWindow->setJavascriptVariable('infoWindow');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:118:        $infoWindow->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:119:        $infoWindow->setContent('content');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:120:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:121:        $infoWindow->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:123:        $marker = $this->getMock('Ivory\GoogleMap\Overlays\Marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:125:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:126:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:127:            ->will($this->returnValue('marker'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:129:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoWindowHelperTest.php:131:            $this->infoWindowHelper->renderOpen($infoWindow, $map, $marker)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:32:        $this->infoBoxHelper = new InfoBoxHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:40:        unset($this->infoBoxHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:47:        $infoWindow->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:48:        $infoWindow->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:50:        $infoWindow->setPixelOffset(3, 4, 'px', 'px');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:51:        $infoWindow->getPixelOffset()->setJavascriptVariable('pixel_offset');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:53:        $infoWindow->setContent('content');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:54:        $infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:56:        $infoWindow->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:58:        $expected = $infoWindow->getJavascriptVariable().' = new InfoBox({'.
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/InfoBoxHelperTest.php:66:        $this->assertSame($expected, $this->infoBoxHelper->render($infoWindow, true));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:33:        $this->rectangleHelper = new RectangleHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:41:        unset($this->rectangleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:46:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:48:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:49:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:50:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:53:        $bound->setJavascriptVariable('rectangleBound');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:54:        $bound->setSouthWest(-1.1, -2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:55:        $bound->setNorthEast(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:58:        $rectangle->setJavascriptVariable('rectangle');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:60:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:62:            $this->rectangleHelper->render($rectangle, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:68:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:70:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:71:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:72:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:75:        $bound->setJavascriptVariable('rectangleBound');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:76:        $bound->setSouthWest(-1.1, -2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:77:        $bound->setNorthEast(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:80:        $rectangle->setJavascriptVariable('rectangle');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:81:        $rectangle->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/RectangleHelperTest.php:88:        $this->assertSame($expected, $this->rectangleHelper->render($rectangle, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:32:        $this->helper = new MarkerClusterHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:40:        unset($this->helper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:45:        $this->assertTrue($this->helper->hasHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:47:        $this->assertTrue($this->helper->hasHelper(MarkerCluster::_DEFAULT));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:48:        $this->assertTrue($this->helper->hasHelper(MarkerCluster::MARKER_CLUSTER));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:50:        $this->assertCount(2, $this->helper->getHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:52:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:54:            $this->helper->getHelper(MarkerCluster::_DEFAULT)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:60:        $helper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:61:        $this->helper = new MarkerClusterHelper(array('foo' => $helper));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:63:        $this->assertSame(array('foo' => $helper), $this->helper->getHelpers());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:72:        $this->helper->getHelper('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:77:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:79:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:81:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:82:            ->method('getType')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:83:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:85:        $helperMock = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:87:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:88:            ->method('render')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:89:            ->with($this->equalTo($markerCluster), $this->equalTo($map))
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:90:            ->will($this->returnValue('bar'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:92:        $this->helper->setHelper('foo', $helperMock);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:94:        $this->assertSame('bar', $this->helper->render($markerCluster, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:99:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:101:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:103:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:104:            ->method('getType')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:105:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:107:        $helperMock = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:109:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:110:            ->method('renderMarkers')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:111:            ->with($this->equalTo($markerCluster), $this->equalTo($map))
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:112:            ->will($this->returnValue('bar'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:114:        $this->helper->setHelper('foo', $helperMock);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:116:        $this->assertSame('bar', $this->helper->renderMarkers($markerCluster, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:121:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:123:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:125:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:126:            ->method('getType')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:127:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:129:        $helperMock = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\MarkerClusterHelperInterface');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:131:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:132:            ->method('renderLibraries')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:133:            ->with($this->equalTo($markerCluster), $this->equalTo($map))
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:134:            ->will($this->returnValue('bar'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:136:        $this->helper->setHelper('foo', $helperMock);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/MarkerClusterHelperTest.php:138:        $this->assertSame('bar', $this->helper->renderLibraries($markerCluster, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:35:        $this->helper = new DefaultMarkerClusterHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:43:        unset($this->helper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:48:        $this->assertInstanceOf('Ivory\GoogleMap\Helper\Overlays\InfoWindowHelper', $this->helper->getInfoWindowHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:53:        $markerHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:54:        $infoWindowHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\InfoWindowHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:56:        $this->helper = new DefaultMarkerClusterHelper($markerHelper, $infoWindowHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:58:        $this->assertSame($markerHelper, $this->helper->getMarkerHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:59:        $this->assertSame($infoWindowHelper, $this->helper->getInfoWindowHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:64:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:65:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:67:        $this->assertNull($this->helper->render($markerCluster, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:72:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:73:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:75:        $this->assertNull($this->helper->renderLibraries($markerCluster, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:81:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:83:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:84:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:85:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:92:        $this->assertSame($expected, $this->helper->renderMarkers($map->getMarkerCluster(), $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:98:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:100:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:101:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:102:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:104:        $marker->setInfoWindow($infoWindow = new InfoWindow());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:105:        $infoWindow->setJavascriptVariable('marker_info_window');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:106:        $infoWindow->setAutoOpen(true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:108:        $this->helper->renderMarkers($map->getMarkerCluster(), $map);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/DefaultMarkerClusterHelperTest.php:110:        $this->assertNotEmpty($map->getEventManager()->getEvents());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:33:        $this->helper = new JsMarkerClusterHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:41:        unset($this->helper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:46:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:48:            $this->helper
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:55:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:57:        $map->getMarkerCluster()->setJavascriptVariable('marker_cluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:59:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:60:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:61:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:68:        $this->assertSame($expected, $this->helper->render($map->getMarkerCluster(), $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:74:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:76:        $map->getMarkerCluster()->setJavascriptVariable('marker_cluster');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:77:        $map->getMarkerCluster()->setOption('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:79:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:80:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:81:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:88:        $this->assertSame($expected, $this->helper->render($map->getMarkerCluster(), $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:96:<script type="text/javascript" src="//google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer_compiled.js"></script>
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:100:        $this->assertSame($expected, $this->helper->renderLibraries($map->getMarkerCluster(), $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:106:        $map->setJavascriptVariable('map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:108:        $map->addMarker($marker = new Marker());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:109:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:110:        $marker->getPosition()->setJavascriptVariable('marker_position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/JsMarkerClusterHelperTest.php:117:        $this->assertSame($expected, $this->helper->renderMarkers($map->getMarkerCluster(), $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:29:        $this->helper = $this->getMockForAbstractClass('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\AbstractMarkerClusterHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:37:        unset($this->helper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:42:        $this->assertInstanceOf('Ivory\GoogleMap\Helper\Overlays\MarkerHelper', $this->helper->getMarkerHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:47:        $markerHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\MarkerHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:49:        $this->helper = $this->getMockBuilder('Ivory\GoogleMap\Helper\Overlays\MarkerCluster\AbstractMarkerClusterHelper')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:50:            ->setConstructorArgs(array($markerHelper))
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:51:            ->getMockForAbstractClass();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerCluster/AbstractMarkerClusterHelperTest.php:53:        $this->assertSame($markerHelper, $this->helper->getMarkerHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:32:        $this->encodedPolylineHelper = new EncodedPolylineHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:40:        unset($this->encodedPolylineHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:45:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:47:            $this->encodedPolylineHelper->getEncodingHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:53:        $encodingHelper = $this->getMock('Ivory\GoogleMap\Helper\Geometry\EncodingHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:55:        $this->encodedPolylineHelper = new EncodedPolylineHelper($encodingHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:57:        $this->assertSame($encodingHelper, $this->encodedPolylineHelper->getEncodingHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:62:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:64:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:65:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:66:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:69:        $encodedPolyline->setJavascriptVariable('encodedPolyline');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:71:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:75:            $this->encodedPolylineHelper->render($encodedPolyline, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:81:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:83:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:84:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:85:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:88:        $encodedPolyline->setJavascriptVariable('encodedPolyline');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:89:        $encodedPolyline->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:91:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/EncodedPolylineHelperTest.php:95:            $this->encodedPolylineHelper->render($encodedPolyline, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:32:        $this->polygonHelper = new PolygonHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:40:        unset($this->polygonHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:45:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:47:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:48:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:49:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:52:        $polygon->setJavascriptVariable('polygon');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:54:        $polygon->addCoordinate(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:55:        $polygon->addCoordinate(3.1, 4.2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:56:        $polygon->addCoordinate(7.4, 12.6);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:58:        foreach ($polygon->getCoordinates() as $index => $coordinate) {
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:59:            $coordinate->setJavascriptVariable('coordinate'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:62:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:64:            $this->polygonHelper->render($polygon, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:70:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:72:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:73:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:74:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:77:        $polygon->setJavascriptVariable('polygon');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:79:        $polygon->addCoordinate(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:80:        $polygon->addCoordinate(3.1, 4.2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:81:        $polygon->addCoordinate(7.4, 12.6);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:83:        foreach ($polygon->getCoordinates() as $index => $coordinate) {
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:84:            $coordinate->setJavascriptVariable('coordinate'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:87:        $polygon->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolygonHelperTest.php:100:        $this->assertSame($expected, $this->polygonHelper->render($polygon, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:32:        $this->circleHelper = new CircleHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:40:        unset($this->circleHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:45:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:47:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:48:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:49:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:52:        $circle->setJavascriptVariable('circle');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:54:        $circle->setCenter(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:55:        $circle->getCenter()->setJavascriptVariable('center');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:57:        $circle->setRadius(2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:58:        $circle->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/CircleHelperTest.php:68:        $this->assertSame($expected, $this->circleHelper->render($circle, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:32:        $this->polylineHelper = new PolylineHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:40:        unset($this->polylineHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:45:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:47:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:48:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:49:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:52:        $polyline->setJavascriptVariable('polyline');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:54:        $polyline->addCoordinate(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:55:        $polyline->addCoordinate(3.1, 4.2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:56:        $polyline->addCoordinate(7.4, 12.6);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:58:        foreach ($polyline->getCoordinates() as $index => $coordinate) {
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:59:            $coordinate->setJavascriptVariable('coordinate'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:62:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:64:            $this->polylineHelper->render($polyline, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:70:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:72:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:73:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:74:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:77:        $polyline->setJavascriptVariable('polyline');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:79:        $polyline->addCoordinate(1.1, 2.1);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:80:        $polyline->addCoordinate(3.1, 4.2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:81:        $polyline->addCoordinate(7.4, 12.6);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:83:        foreach ($polyline->getCoordinates() as $index => $coordinate) {
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:84:            $coordinate->setJavascriptVariable('coordinate'.$index);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:87:        $polyline->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/PolylineHelperTest.php:100:        $this->assertSame($expected, $this->polylineHelper->render($polyline, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/AnimationHelperTest.php:32:        $this->animationHelper = new AnimationHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/AnimationHelperTest.php:40:        unset($this->animationHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/AnimationHelperTest.php:45:        $this->assertSame('google.maps.Animation.BOUNCE', $this->animationHelper->render(Animation::BOUNCE));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/AnimationHelperTest.php:46:        $this->assertSame('google.maps.Animation.DROP', $this->animationHelper->render(Animation::DROP));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/AnimationHelperTest.php:55:        $this->animationHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:33:        $this->groundOverlayHelper = new GroundOverlayHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:41:        unset($this->groundOverlayHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:46:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:48:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:49:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:50:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:53:        $bound->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:54:        $bound->setSouthWest(-1.1, -2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:55:        $bound->setNorthEast(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:58:        $groundOverlay->setJavascriptVariable('groundOverlay');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:60:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:62:            $this->groundOverlayHelper->render($groundOverlay, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:68:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:70:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:71:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:72:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:75:        $bound->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:76:        $bound->setSouthWest(-1.1, -2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:77:        $bound->setNorthEast(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:80:        $groundOverlay->setJavascriptVariable('groundOverlay');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:81:        $groundOverlay->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/GroundOverlayHelperTest.php:88:        $this->assertSame($expected, $this->groundOverlayHelper->render($groundOverlay, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:32:        $this->markerShapeHelper = new MarkerShapeHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:40:        unset($this->markerShapeHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:46:        $markerShape->setJavascriptVariable('markerShape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:48:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:50:            $this->markerShapeHelper->render($markerShape)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:57:        $markerShape->setJavascriptVariable('markerShape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:59:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:61:            $this->markerShapeHelper->render($markerShape)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:67:        $markerShape = new MarkerShape('rect', array(-1, -1, 1, 1));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:68:        $markerShape->setJavascriptVariable('markerShape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:70:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:71:            'markerShape = new google.maps.MarkerShape({"type":"rect","coords":[-1,-1,1,1]});'.PHP_EOL,
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerShapeHelperTest.php:72:            $this->markerShapeHelper->render($markerShape)
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:32:        $this->markerImageHelper = new MarkerImageHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:40:        unset($this->markerImageHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:46:        $markerImage->setJavascriptVariable('markerImage');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:47:        $markerImage->setUrl('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:49:        $markerImage->setSize(1, 2);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:50:        $markerImage->getSize()->setJavascriptVariable('size');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:52:        $markerImage->setOrigin(3, 4);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:53:        $markerImage->getOrigin()->setJavascriptVariable('origin');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:55:        $markerImage->setAnchor(5, 6);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:56:        $markerImage->getAnchor()->setJavascriptVariable('anchor');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:58:        $markerImage->setScaledSize(7, 8);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:59:        $markerImage->getScaledSize()->setJavascriptVariable('scaled_size');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerImageHelperTest.php:66:        $this->assertSame($expected, $this->markerImageHelper->render($markerImage));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:33:        $this->markerHelper = new MarkerHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:41:        unset($this->markerHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:46:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:48:            $this->markerHelper->getAnimationHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:54:        $animationHelper = $this->getMock('Ivory\GoogleMap\Helper\Overlays\AnimationHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:56:        $this->markerHelper = new MarkerHelper($animationHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:58:        $this->assertSame($animationHelper, $this->markerHelper->getAnimationHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:63:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:65:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:66:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:67:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:70:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:72:        $marker->setAnimation(Animation::BOUNCE);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:74:        $marker->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:75:        $marker->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:77:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:78:        $marker->getIcon()->setJavascriptVariable('icon');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:80:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:81:        $marker->getShadow()->setJavascriptVariable('shadow');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:83:        $marker->setShape('poly', array(1, 2, 3, 4));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:84:        $marker->getShape()->setJavascriptVariable('shape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:95:        $this->assertSame($expected, $this->markerHelper->render($marker, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:100:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:102:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:103:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:104:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:107:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:109:        $marker->setAnimation(Animation::BOUNCE);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:111:        $marker->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:112:        $marker->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:114:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:115:        $marker->getIcon()->setJavascriptVariable('icon');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:117:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:118:        $marker->getShadow()->setJavascriptVariable('shadow');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:120:        $marker->setShape('poly', array(1, 2, 3, 4));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:121:        $marker->getShape()->setJavascriptVariable('shape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:123:        $marker->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:136:        $this->assertSame($expected, $this->markerHelper->render($marker, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:142:        $marker->setJavascriptVariable('marker');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:144:        $marker->setAnimation(Animation::BOUNCE);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:146:        $marker->setPosition(1.1, 2.1, true);
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:147:        $marker->getPosition()->setJavascriptVariable('position');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:149:        $marker->setIcon('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:150:        $marker->getIcon()->setJavascriptVariable('icon');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:152:        $marker->setShadow('url');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:153:        $marker->getShadow()->setJavascriptVariable('shadow');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:155:        $marker->setShape('poly', array(1, 2, 3, 4));
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:156:        $marker->getShape()->setJavascriptVariable('shape');
./tests/Ivory/Tests/GoogleMap/Helper/Overlays/MarkerHelperTest.php:166:        $this->assertSame($expected, $this->markerHelper->render($marker));
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:32:        $this->kmlLayerHelper = new KMLLayerHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:40:        unset($this->kmlLayerHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:45:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:47:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:48:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:49:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:52:        $kmlLayer->setJavascriptVariable('kmlLayer');
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:54:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:56:            $this->kmlLayerHelper->render($kmlLayer, $map)
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:62:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:64:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:65:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:66:            ->will($this->returnValue('map'));
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:69:        $kmlLayer->setJavascriptVariable('kmlLayer');
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:70:        $kmlLayer->setOptions(array('option1' => 'value1', 'option2' => 'value2'));
./tests/Ivory/Tests/GoogleMap/Helper/Layers/KMLLayerHelperTest.php:77:        $this->assertSame($expected, $this->kmlLayerHelper->render($kmlLayer, $map));
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:32:        $this->mapTypeIdHelper = new MapTypeIdHelper();
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:40:        unset($this->mapTypeIdHelper);
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:45:        $this->assertSame('google.maps.MapTypeId.HYBRID', $this->mapTypeIdHelper->render(MapTypeId::HYBRID));
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:46:        $this->assertSame('google.maps.MapTypeId.ROADMAP', $this->mapTypeIdHelper->render(MapTypeId::ROADMAP));
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:47:        $this->assertSame('google.maps.MapTypeId.SATELLITE', $this->mapTypeIdHelper->render(MapTypeId::SATELLITE));
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:48:        $this->assertSame('google.maps.MapTypeId.TERRAIN', $this->mapTypeIdHelper->render(MapTypeId::TERRAIN));
./tests/Ivory/Tests/GoogleMap/Helper/MapTypeIdHelperTest.php:57:        $this->mapTypeIdHelper->render('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:32:        $this->eventManagerHelper = new EventManagerHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:40:        unset($this->eventManagerHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:46:        $domEvent->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:48:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:50:            $this->eventManagerHelper->renderDomEvent($domEvent)
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:57:        $domEventOnce->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:59:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:61:            $this->eventManagerHelper->renderDomEventOnce($domEventOnce)
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:68:        $event->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:70:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:72:            $this->eventManagerHelper->renderEvent($event)
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:79:        $eventOnce->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:81:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Events/EventManagerHelperTest.php:83:            $this->eventManagerHelper->renderEventOnce($eventOnce)
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:29:        $this->helper = $this->getMockForAbstractClass('Ivory\GoogleMap\Helper\AbstractHelper');
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:37:        unset($this->helper);
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:42:        $this->assertInstanceOf('Ivory\JsonBuilder\JsonBuilder', $this->helper->getJsonBuilder());
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:47:        $map = $this->getMock('Ivory\GoogleMap\Map');
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:49:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:50:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:51:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:53:        $method = new \ReflectionMethod($this->helper, 'getJsContainerName');
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:54:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Helper/AbstractHelperTest.php:56:        $this->assertSame('foo_container', $method->invoke($this->helper, $map));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:34:        $this->autocompleteHelper = new AutocompleteHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:42:        unset($this->autocompleteHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:47:        $this->assertInstanceOf('Ivory\GoogleMap\Helper\ApiHelper', $this->autocompleteHelper->getApiHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:49:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:51:            $this->autocompleteHelper->getCoordinateHelper()
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:54:        $this->assertInstanceOf('ivory\GoogleMap\Helper\Base\BoundHelper', $this->autocompleteHelper->getBoundHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:59:        $apiHelper = $this->getMock('Ivory\GoogleMap\Helper\ApiHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:60:        $coordinateHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\CoordinateHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:61:        $boundHelper = $this->getMock('Ivory\GoogleMap\Helper\Base\BoundHelper');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:63:        $this->autocompleteHelper = new AutocompleteHelper($apiHelper, $coordinateHelper, $boundHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:65:        $this->assertSame($apiHelper, $this->autocompleteHelper->getApiHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:66:        $this->assertSame($coordinateHelper, $this->autocompleteHelper->getCoordinateHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:67:        $this->assertSame($boundHelper, $this->autocompleteHelper->getBoundHelper());
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:74:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:76:            $this->autocompleteHelper->renderHtmlContainer($autocomplete)
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:83:        $autocomplete->setValue('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:85:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:87:            $this->autocompleteHelper->renderHtmlContainer($autocomplete)
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:94:        $autocomplete->setInputAttribute('class', 'foo');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:96:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:98:            $this->autocompleteHelper->renderHtmlContainer($autocomplete)
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:105:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:112:        $this->assertSame($expected, $this->autocompleteHelper->renderAutocomplete($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:118:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:119:        $autocomplete->setTypes(array(AutocompleteType::ESTABLISHMENT, AutocompleteType::CITIES));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:126:        $this->assertSame($expected, $this->autocompleteHelper->renderAutocomplete($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:132:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:133:        $autocomplete->setComponentRestrictions(array(AutocompleteComponentRestriction::COUNTRY => 'fr'));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:140:        $this->assertSame($expected, $this->autocompleteHelper->renderAutocomplete($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:146:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:148:        $autocomplete->setBound(1, 2, 3, 4);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:149:        $autocomplete->getBound()->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:156:        $this->assertSame($expected, $this->autocompleteHelper->renderAutocomplete($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:162:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:164:        $autocomplete->setTypes(array(AutocompleteType::ESTABLISHMENT, AutocompleteType::CITIES));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:165:        $autocomplete->setComponentRestrictions(array(AutocompleteComponentRestriction::COUNTRY => 'fr'));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:167:        $autocomplete->setBound(1, 2, 3, 4);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:168:        $autocomplete->getBound()->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:175:        $this->assertSame($expected, $this->autocompleteHelper->renderAutocomplete($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:181:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:194:        $this->assertSame($expected, $this->autocompleteHelper->renderJavascripts($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:200:        $autocomplete1->setJavascriptVariable('autocomplete1');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:203:        $autocomplete2->setJavascriptVariable('autocomplete2');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:223:        $this->assertSame($expected1, $this->autocompleteHelper->renderJavascripts($autocomplete1));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:224:        $this->assertSame($expected2, $this->autocompleteHelper->renderJavascripts($autocomplete2));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:230:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:232:        $autocomplete->setBound(1, 2, 3, 4, true, false);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:233:        $autocomplete->getBound()->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:234:        $autocomplete->getBound()->getSouthWest()->setJavascriptVariable('bound_south_west');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:235:        $autocomplete->getBound()->getNorthEast()->setJavascriptVariable('bound_north_east');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:251:        $this->assertSame($expected, $this->autocompleteHelper->renderJavascripts($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:257:        $autocomplete->setJavascriptVariable('autocomplete');
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:258:        $autocomplete->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:273:        $this->assertSame($expected, $this->autocompleteHelper->renderJavascripts($autocomplete));
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:284:        $autocomplete->setBound(1, 2, 3, 4);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:285:        $autocomplete->getBound()->setSouthWest(null);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:286:        $autocomplete->getBound()->setNorthEast(null);
./tests/Ivory/Tests/GoogleMap/Helper/Places/AutocompleteHelperTest.php:288:        $this->autocompleteHelper->renderJavascripts($autocomplete);
./tests/Ivory/Tests/GoogleMap/Helper/Base/CoordinateHelperTest.php:32:        $this->coordinateHelper = new CoordinateHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Base/CoordinateHelperTest.php:40:        unset($this->coordinateHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Base/CoordinateHelperTest.php:46:        $coordinate->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/CoordinateHelperTest.php:48:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Base/CoordinateHelperTest.php:50:            $this->coordinateHelper->render($coordinate)
./tests/Ivory/Tests/GoogleMap/Helper/Base/SizeHelperTest.php:32:        $this->sizeHelper = new SizeHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Base/SizeHelperTest.php:38:        $size->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/SizeHelperTest.php:40:        $this->assertSame('foo = new google.maps.Size(1.1, 2.1);'.PHP_EOL, $this->sizeHelper->render($size));
./tests/Ivory/Tests/GoogleMap/Helper/Base/SizeHelperTest.php:46:        $size->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/SizeHelperTest.php:48:        $this->assertSame('foo = new google.maps.Size(1.1, 2.1, "px", "%");'.PHP_EOL, $this->sizeHelper->render($size));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:33:        $this->boundHelper = new BoundHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:41:        unset($this->boundHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:47:        $bound->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:49:        $this->assertSame('foo = new google.maps.LatLngBounds();'.PHP_EOL, $this->boundHelper->render($bound));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:54:        $coordinate1 = new Coordinate(-1.1, -2.1, false);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:55:        $coordinate1->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:58:        $coordinate2->setJavascriptVariable('bar');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:61:        $bound->setJavascriptVariable('baz');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:63:        $this->assertSame('baz = new google.maps.LatLngBounds(foo, bar);'.PHP_EOL, $this->boundHelper->render($bound));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:69:        $bound->setJavascriptVariable('bound');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:71:        $circle = $this->getMock('Ivory\GoogleMap\Overlays\Circle');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:73:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:74:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:75:            ->will($this->returnValue('circle'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:77:        $groundOverlayBound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:79:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:80:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:81:            ->will($this->returnValue('groundOverlayBound'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:83:        $groundOverlay = $this->getMock('Ivory\GoogleMap\Overlays\GroundOverlay');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:85:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:86:            ->method('getBound')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:87:            ->will($this->returnValue($groundOverlayBound));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:89:        $infoWindow = $this->getMock('Ivory\GoogleMap\Overlays\InfoWindow');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:91:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:92:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:93:            ->will($this->returnValue('infoWindow'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:95:        $marker = $this->getMock('Ivory\GoogleMap\Overlays\Marker');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:97:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:98:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:99:            ->will($this->returnValue('marker'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:101:        $polygon = $this->getMock('Ivory\GoogleMap\Overlays\Polygon');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:103:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:104:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:105:            ->will($this->returnValue('polygon'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:107:        $polyline = $this->getMock('Ivory\GoogleMap\Overlays\Polyline');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:109:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:110:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:111:            ->will($this->returnValue('polyline'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:113:        $rectangleBound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:115:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:116:            ->method('getJavascriptVariable')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:117:            ->will($this->returnValue('rectangleBound'));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:119:        $rectangle = $this->getMock('Ivory\GoogleMap\Overlays\Rectangle');
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:121:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:122:            ->method('getBound')
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:123:            ->will($this->returnValue($rectangleBound));
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:125:        $bound->extend($circle);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:126:        $bound->extend($groundOverlay);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:127:        $bound->extend($infoWindow);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:128:        $bound->extend($marker);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:129:        $bound->extend($polygon);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:130:        $bound->extend($polyline);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:131:        $bound->extend($rectangle);
./tests/Ivory/Tests/GoogleMap/Helper/Base/BoundHelperTest.php:144:        $this->assertSame($expected, $this->boundHelper->renderExtends($bound));
./tests/Ivory/Tests/GoogleMap/Helper/Base/PointHelperTest.php:32:        $this->pointHelper = new PointHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Base/PointHelperTest.php:38:        $point->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Helper/Base/PointHelperTest.php:40:        $this->assertSame('foo = new google.maps.Point(1.1, 2.1);'.PHP_EOL, $this->pointHelper->render($point));
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:31:        $this->encodingHelper = new EncodingHelper();
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:39:        unset($this->encodingHelper);
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:44:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:46:            $this->encodingHelper->renderDecodePath('foo')
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:52:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:54:            $this->encodingHelper->renderDecodePath('v"a\lu\'e')
./tests/Ivory/Tests/GoogleMap/Helper/Geometry/EncodingHelperTest.php:64:        $this->encodingHelper->renderDecodePath(true);
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:31:        $this->polygon = new Polygon();
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:39:        unset($this->polygon);
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:44:        $this->assertFalse($this->polygon->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:50:            $this->getMock('Ivory\GoogleMap\Base\Coordinate'),
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:51:            $this->getMock('Ivory\GoogleMap\Base\Coordinate'),
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:54:        $this->polygon = new Polygon($coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:56:        $this->assertTrue($this->polygon->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:57:        $this->assertSame($coordinates, $this->polygon->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:65:        $this->polygon->addCoordinate($latitude, $longitude, true);
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:67:        $coordinates = $this->polygon->getCoordinates();
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:69:        $this->assertArrayHasKey(0, $coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:70:        $this->assertSame($latitude, $coordinates[0]->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:71:        $this->assertSame($longitude, $coordinates[0]->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:72:        $this->assertTrue($coordinates[0]->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:79:     * - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:80:     * - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Overlays/PolygonTest.php:84:        $this->polygon->addCoordinate('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:31:        $this->markerShape = new MarkerShape();
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:39:        unset($this->markerShape);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:44:        $this->assertSame('poly', $this->markerShape->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:45:        $this->assertTrue($this->markerShape->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:46:        $this->assertSame(array(1, 1, 1, -1, -1, -1, -1, 1), $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:52:        $coordinates = array(1, 1, -1, -1);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:54:        $this->markerShape = new MarkerShape($type, $coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:56:        $this->assertSame($type, $this->markerShape->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:57:        $this->assertSame($coordinates, $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:62:        $this->markerShape->setType('rect');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:64:        $this->assertSame('rect', $this->markerShape->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:73:        $this->markerShape->setType('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:78:        $this->markerShape->setType('circle');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:79:        $this->markerShape->setCoordinates(array(1, 2, 3));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:81:        $this->assertSame(array(1, 2, 3), $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:91:        $this->markerShape->setType('circle');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:92:        $this->markerShape->setCoordinates(array(true));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:97:        $this->markerShape->setType('poly');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:98:        $this->markerShape->setCoordinates(array(1, 2, 3, 4, 5, 6));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:100:        $this->assertSame(array(1, 2, 3, 4, 5, 6), $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:110:        $this->markerShape->setType('poly');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:111:        $this->markerShape->setCoordinates(array(1));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:121:        $this->markerShape->setType('poly');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:122:        $this->markerShape->setCoordinates(array(1, true));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:127:        $this->markerShape->setType('rect');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:128:        $this->markerShape->setCoordinates(array(1, 2, 3, 4));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:130:        $this->assertSame(array(1, 2, 3, 4), $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:140:        $this->markerShape->setType('rect');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:141:        $this->markerShape->setCoordinates(array(true));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:146:        $this->markerShape->resetCoordinates();
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:147:        $this->markerShape->setType('poly');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:149:        $this->markerShape->addPolyCoordinate(1, 2);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:150:        $this->markerShape->addPolyCoordinate(3, 4);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:152:        $this->assertSame(array(1, 2, 3, 4), $this->markerShape->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:162:        $this->markerShape->setType('rect');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:163:        $this->markerShape->addPolyCoordinate(1, 2);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:172:        $this->markerShape->setType('poly');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerShapeTest.php:173:        $this->markerShape->addPolyCoordinate(true, false);
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:31:        $this->polyline = new Polyline();
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:39:        unset($this->polyline);
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:44:        $this->assertFalse($this->polyline->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:50:            $this->getMock('Ivory\GoogleMap\Base\Coordinate'),
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:51:            $this->getMock('Ivory\GoogleMap\Base\Coordinate'),
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:54:        $this->polyline = new Polyline($coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:56:        $this->assertTrue($this->polyline->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:57:        $this->assertSame($coordinates, $this->polyline->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:65:        $this->polyline->addCoordinate($latitude, $longitude, true);
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:67:        $coordinates = $this->polyline->getCoordinates();
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:69:        $this->assertArrayHasKey(0, $coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:70:        $this->assertSame($latitude, $coordinates[0]->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:71:        $this->assertSame($longitude, $coordinates[0]->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:72:        $this->assertTrue($coordinates[0]->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:79:     * - function addCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate)
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:80:     * - function addCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Overlays/PolylineTest.php:84:        $this->polyline->addCoordinate('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:31:        $this->groundOverlay = new GroundOverlay();
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:39:        unset($this->groundOverlay);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:44:        $this->assertSame(-1, $this->groundOverlay->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:45:        $this->assertSame(-1, $this->groundOverlay->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:47:        $this->assertSame(1, $this->groundOverlay->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:48:        $this->assertSame(1, $this->groundOverlay->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:50:        $this->assertNull($this->groundOverlay->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:57:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:59:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:60:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:61:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:63:        $this->groundOverlay = new GroundOverlay($url, $bound);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:65:        $this->assertSame($url, $this->groundOverlay->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:66:        $this->assertSame($bound, $this->groundOverlay->getBound());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:71:        $this->groundOverlay->setUrl('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:73:        $this->assertSame('foo', $this->groundOverlay->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:82:        $this->groundOverlay->setUrl(true);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:87:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:89:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:90:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:91:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:93:        $this->groundOverlay->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:95:        $this->assertSame($bound, $this->groundOverlay->getBound());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:104:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:106:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:107:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:108:            ->will($this->returnValue(false));
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:110:        $this->groundOverlay->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:115:        $southWest = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:116:        $northEast = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:118:        $this->groundOverlay->setBound($southWest, $northEast);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:120:        $this->assertSame($southWest, $this->groundOverlay->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:121:        $this->assertSame($northEast, $this->groundOverlay->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:126:        $this->groundOverlay->setBound(-1, -2, 1, 2, true, false);
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:128:        $this->assertSame(-1, $this->groundOverlay->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:129:        $this->assertSame(-2, $this->groundOverlay->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:130:        $this->assertTrue($this->groundOverlay->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:132:        $this->assertSame(1, $this->groundOverlay->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:133:        $this->assertSame(2, $this->groundOverlay->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:134:        $this->assertFalse($this->groundOverlay->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/GroundOverlayTest.php:142:        $this->groundOverlay->setBound('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:32:        $this->infoWindow = new InfoWindow();
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:40:        unset($this->infoWindow);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:45:        $this->assertSame('<p>Default content</p>', $this->infoWindow->getContent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:46:        $this->assertNull($this->infoWindow->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:47:        $this->assertFalse($this->infoWindow->hasPixelOffset());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:48:        $this->assertFalse($this->infoWindow->isOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:49:        $this->assertTrue($this->infoWindow->isAutoOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:50:        $this->assertSame(MouseEvent::CLICK, $this->infoWindow->getOpenEvent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:51:        $this->assertFalse($this->infoWindow->isAutoClose());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:57:        $position = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:58:        $pixelOffset = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:61:        $this->infoWindow = new InfoWindow($content, $position, $pixelOffset, true, $opentEvent, false, true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:63:        $this->assertSame($content, $this->infoWindow->getContent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:64:        $this->assertSame($position, $this->infoWindow->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:65:        $this->assertSame($pixelOffset, $this->infoWindow->getPixelOffset());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:66:        $this->assertTrue($this->infoWindow->isOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:67:        $this->assertFalse($this->infoWindow->isAutoOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:68:        $this->assertSame($opentEvent, $this->infoWindow->getOpenEvent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:69:        $this->assertTrue($this->infoWindow->isAutoClose());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:74:        $position = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:75:        $this->infoWindow->setPosition($position);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:77:        $this->assertSame($position, $this->infoWindow->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:85:        $this->infoWindow->setPosition($latitude, $longitude, true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:87:        $this->assertSame($latitude, $this->infoWindow->getPosition()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:88:        $this->assertSame($longitude, $this->infoWindow->getPosition()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:89:        $this->assertTrue($this->infoWindow->getPosition()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:94:        $this->infoWindow->setPosition($this->getMock('Ivory\GoogleMap\Base\Coordinate'));
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:95:        $this->infoWindow->setPosition(null);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:97:        $this->assertNull($this->infoWindow->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:104:     * - function setPosition(Ivory\GoogleMap\Base\Coordinate $position)
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:105:     * - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:109:        $this->infoWindow->setPosition('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:114:        $size = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:115:        $this->infoWindow->setPixelOffset($size);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:117:        $this->assertSame($size, $this->infoWindow->getPixelOffset());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:127:        $this->infoWindow->setPixelOffset($width, $height, $widthUnit, $heightUnit);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:129:        $this->assertSame($width, $this->infoWindow->getPixelOffset()->getWidth());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:130:        $this->assertSame($widthUnit, $this->infoWindow->getPixelOffset()->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:131:        $this->assertSame($height, $this->infoWindow->getPixelOffset()->getHeight());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:132:        $this->assertSame($heightUnit, $this->infoWindow->getPixelOffset()->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:137:        $this->infoWindow->setPixelOffset($this->getMock('Ivory\GoogleMap\Base\Size'));
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:138:        $this->infoWindow->setPixelOffset(null);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:140:        $this->assertNull($this->infoWindow->getPixelOffset());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:147:     * - function setPixelOffset(Ivory\GoogleMap\Base\Size $scaledSize)
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:148:     * - function setPixelOffset(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:152:        $this->infoWindow->setPixelOffset('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:157:        $this->infoWindow->setContent('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:159:        $this->assertSame('foo', $this->infoWindow->getContent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:168:        $this->infoWindow->setContent(true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:173:        $this->infoWindow->setOpen(true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:175:        $this->assertTrue($this->infoWindow->isOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:184:        $this->infoWindow->setOpen('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:189:        $this->infoWindow->setAutoOpen(true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:191:        $this->assertTrue($this->infoWindow->isAutoOpen());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:200:        $this->infoWindow->setAutoOpen('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:205:        $this->infoWindow->setOpenEvent(MouseEvent::MOUSEDOWN);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:207:        $this->assertSame(MouseEvent::MOUSEDOWN, $this->infoWindow->getOpenEvent());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:217:        $this->infoWindow->setOpenEvent('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:222:        $this->infoWindow->setAutoClose(true);
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:224:        $this->assertTrue($this->infoWindow->isAutoClose());
./tests/Ivory/Tests/GoogleMap/Overlays/InfoWindowTest.php:233:        $this->infoWindow->setAutoClose('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:32:        $this->marker = new Marker();
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:40:        unset($this->marker);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:45:        $this->assertInstanceOf('Ivory\GoogleMap\Base\Coordinate', $this->marker->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:46:        $this->assertFalse($this->marker->hasAnimation());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:47:        $this->assertFalse($this->marker->hasIcon());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:48:        $this->assertFalse($this->marker->hasShadow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:49:        $this->assertFalse($this->marker->hasShape());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:50:        $this->assertFalse($this->marker->hasInfoWindow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:55:        $position = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:58:        $icon = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:60:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:61:            ->method('getUrl')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:62:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:64:        $shadow = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:66:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:67:            ->method('getUrl')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:68:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:70:        $shape = $this->getMock('Ivory\GoogleMap\Overlays\MarkerShape');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:72:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:73:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:74:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:76:        $infoWindow = $this->getMock('Ivory\GoogleMap\Overlays\InfoWindow');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:78:        $this->marker = new Marker($position, $animation, $icon, $shadow, $shape, $infoWindow);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:80:        $this->assertSame($position, $this->marker->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:81:        $this->assertSame($animation, $this->marker->getAnimation());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:82:        $this->assertSame($icon, $this->marker->getIcon());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:83:        $this->assertSame($shadow, $this->marker->getShadow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:84:        $this->assertSame($shape, $this->marker->getShape());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:85:        $this->assertSame($infoWindow, $this->marker->getInfoWindow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:90:        $coordinate = $this->getMock('ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:91:        $this->marker->setPosition($coordinate);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:93:        $this->assertSame($coordinate, $this->marker->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:101:        $this->marker->setPosition($latitude, $longitude, true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:103:        $this->assertSame($latitude, $this->marker->getPosition()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:104:        $this->assertSame($longitude, $this->marker->getPosition()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:105:        $this->assertTrue($this->marker->getPosition()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:110:        $this->marker->setPosition($this->getMock('ivory\GoogleMap\Base\Coordinate'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:111:        $this->marker->setPosition(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:113:        $this->assertNull($this->marker->getPosition());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:120:     * - function setPosition(Ivory\GoogleMap\Base\Coordinate $position)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:121:     * - function setPosition(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:125:        $this->marker->setPosition('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:130:        $this->marker->setAnimation(Animation::DROP);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:132:        $this->assertSame(Animation::DROP, $this->marker->getAnimation());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:141:        $this->marker->setAnimation('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:146:        $markerImage = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:148:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:149:            ->method('getUrl')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:150:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:152:        $this->marker->setIcon($markerImage);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:154:        $this->assertSame($markerImage, $this->marker->getIcon());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:163:        $markerImage = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:164:        $this->marker->setIcon($markerImage);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:169:        $this->marker->setIcon('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:171:        $this->assertSame('foo', $this->marker->getIcon()->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:176:        $this->marker->setIcon('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:177:        $this->marker->setIcon(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:179:        $this->assertNull($this->marker->getIcon());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:186:     * - function setIcon(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:187:     * - function setIcon(string $url = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:191:        $this->marker->setIcon(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:196:        $markerImage = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:198:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:199:            ->method('getUrl')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:200:            ->will($this->returnValue('foo'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:202:        $this->marker->setShadow($markerImage);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:204:        $this->assertSame($markerImage, $this->marker->getShadow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:213:        $markerImage = $this->getMock('Ivory\GoogleMap\Overlays\MarkerImage');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:214:        $this->marker->setShadow($markerImage);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:219:        $this->marker->setShadow('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:221:        $this->assertSame('foo', $this->marker->getShadow()->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:226:        $this->marker->setShadow('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:227:        $this->marker->setShadow(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:229:        $this->assertNull($this->marker->getShadow());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:236:     * - function setShadow(Ivory\GoogleMap\Overlays\MarkerImage $markerImage = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:237:     * - function setShadow(string $url = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:241:        $this->marker->setShadow(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:246:        $markerShape = $this->getMock('Ivory\GoogleMap\Overlays\MarkerShape');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:248:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:249:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:250:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:252:        $this->marker->setShape($markerShape);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:254:        $this->assertSame($markerShape, $this->marker->getShape());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:263:        $markerShape = $this->getMock('Ivory\GoogleMap\Overlays\MarkerShape');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:264:        $this->marker->setShape($markerShape);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:272:        $this->marker->setShape($type, $coordinates);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:274:        $this->assertSame($type, $this->marker->getShape()->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:275:        $this->assertSame($coordinates, $this->marker->getShape()->getCoordinates());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:280:        $this->marker->setShape('poly', array(1, 2, 3, 4));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:281:        $this->marker->setShape(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:283:        $this->assertNull($this->marker->getShape());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:290:     * - function setShape(Ivory\GoogleMap\Overlays\MarkerShape $shape = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:291:     * - function setShape(string $type, array $coordinates)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:295:        $this->marker->setShape(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:300:        $infoWindow = $this->getMock('Ivory\GoogleMap\Overlays\InfoWindow');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:301:        $this->marker->setInfoWindow($infoWindow);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerTest.php:303:        $this->assertSame($infoWindow, $this->marker->getInfoWindow());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:31:        $this->rectangle = new Rectangle();
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:39:        unset($this->rectangle);
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:44:        $this->assertSame(1, $this->rectangle->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:45:        $this->assertSame(1, $this->rectangle->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:46:        $this->assertTrue($this->rectangle->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:48:        $this->assertSame(-1, $this->rectangle->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:49:        $this->assertSame(-1, $this->rectangle->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:50:        $this->assertTrue($this->rectangle->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:55:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:57:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:58:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:59:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:61:        $this->rectangle = new Rectangle($bound);
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:63:        $this->assertSame($bound, $this->rectangle->getBound());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:68:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:70:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:71:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:72:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:74:        $this->rectangle->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:76:        $this->assertSame($bound, $this->rectangle->getBound());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:85:        $this->rectangle->setBound($this->getMock('Ivory\GoogleMap\Base\Bound'));
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:90:        $southWeestCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:91:        $northEastCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:93:        $this->rectangle->setBound($southWeestCoordinate, $northEastCoordinate);
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:95:        $this->assertSame($southWeestCoordinate, $this->rectangle->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:96:        $this->assertSame($northEastCoordinate, $this->rectangle->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:104:        $northEastLatitude = -1;
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:105:        $northEastLongitude = -2;
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:107:        $this->rectangle->setBound(
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:116:        $this->assertSame($southWestLatitude, $this->rectangle->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:117:        $this->assertSame($southWestLongitue, $this->rectangle->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:118:        $this->assertTrue($this->rectangle->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:120:        $this->assertSame($northEastLatitude, $this->rectangle->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:121:        $this->assertSame($northEastLongitude, $this->rectangle->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:122:        $this->assertFalse($this->rectangle->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:129:     * - function setBound(Ivory\GoogleMap\Base\Bound $bound)
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:130:     * - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:131:     * - function setBound(
./tests/Ivory/Tests/GoogleMap/Overlays/RectangleTest.php:142:        $this->rectangle->setBound('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/AnimationTest.php:30:        $this->assertSame($expected, Animation::getAnimations());
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:31:        $this->encodedPolyline = new EncodedPolyline();
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:39:        unset($this->encodedPolyline);
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:44:        $this->assertNull($this->encodedPolyline->getValue());
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:49:        $this->encodedPolyline = new EncodedPolyline('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:51:        $this->assertSame('foo', $this->encodedPolyline->getValue());
./tests/Ivory/Tests/GoogleMap/Overlays/EncodedPolylineTest.php:60:        $this->encodedPolyline->setValue(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:31:        $this->markerImage = new MarkerImage();
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:39:        unset($this->markerImage);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:44:        $this->assertSame('//maps.gstatic.com/mapfiles/markers/marker.png', $this->markerImage->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:45:        $this->assertFalse($this->markerImage->hasAnchor());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:46:        $this->assertFalse($this->markerImage->hasOrigin());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:47:        $this->assertFalse($this->markerImage->hasScaledSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:48:        $this->assertFalse($this->markerImage->hasSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:54:        $anchor = $this->getMock('Ivory\GoogleMap\Base\Point');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:55:        $origin = $this->getMock('Ivory\GoogleMap\Base\Point');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:56:        $scaledSize = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:57:        $size = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:59:        $this->markerImage = new MarkerImage($url, $anchor, $origin, $scaledSize, $size);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:61:        $this->assertSame($url, $this->markerImage->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:62:        $this->assertSame($anchor, $this->markerImage->getAnchor());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:63:        $this->assertSame($origin, $this->markerImage->getOrigin());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:64:        $this->assertSame($scaledSize, $this->markerImage->getScaledSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:65:        $this->assertSame($size, $this->markerImage->getSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:70:        $this->markerImage->setUrl('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:72:        $this->assertSame('foo', $this->markerImage->getUrl());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:81:        $this->markerImage->setUrl(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:86:        $point = $this->getMock('Ivory\GoogleMap\Base\Point');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:87:        $this->markerImage->setAnchor($point);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:89:        $this->assertSame($point, $this->markerImage->getAnchor());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:97:        $this->markerImage->setAnchor($x, $y);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:99:        $this->assertSame($x, $this->markerImage->getAnchor()->getX());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:100:        $this->assertSame($y, $this->markerImage->getAnchor()->getY());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:105:        $this->markerImage->setAnchor($this->getMock('Ivory\GoogleMap\Base\Point'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:106:        $this->markerImage->setAnchor(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:108:        $this->assertNull($this->markerImage->getAnchor());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:115:     * - function setAnchor(Ivory\GoogleMap\Base\Point $anchor)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:116:     * - function setAnchor(double x, double y)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:120:        $this->markerImage->setAnchor(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:125:        $point = $this->getMock('Ivory\GoogleMap\Base\Point');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:126:        $this->markerImage->setOrigin($point);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:128:        $this->assertSame($point, $this->markerImage->getOrigin());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:136:        $this->markerImage->setOrigin($x, $y);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:138:        $this->assertSame($x, $this->markerImage->getOrigin()->getX());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:139:        $this->assertSame($y, $this->markerImage->getOrigin()->getY());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:144:        $this->markerImage->setOrigin($this->getMock('Ivory\GoogleMap\Base\Point'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:145:        $this->markerImage->setOrigin(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:147:        $this->assertNull($this->markerImage->getOrigin());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:154:     * - function setOrigin(Ivory\GoogleMap\Base\Point $anchor)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:155:     * - function setOrigin(double x, double y)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:159:        $this->markerImage->setOrigin(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:164:        $size = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:165:        $this->markerImage->setScaledSize($size);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:167:        $this->assertSame($size, $this->markerImage->getScaledSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:178:        $this->markerImage->setScaledSize($width, $height, $widthUnit, $heightUnit);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:180:        $this->assertSame($width, $this->markerImage->getScaledSize()->getWidth());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:181:        $this->assertSame($height, $this->markerImage->getScaledSize()->getHeight());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:182:        $this->assertSame($widthUnit, $this->markerImage->getScaledSize()->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:183:        $this->assertSame($heightUnit, $this->markerImage->getScaledSize()->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:188:        $this->markerImage->setScaledSize($this->getMock('Ivory\GoogleMap\Base\Size'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:189:        $this->markerImage->setScaledSize(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:191:        $this->assertNull($this->markerImage->getScaledSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:198:     * - function setScaledSize(Ivory\GoogleMap\Base\Size $scaledSize = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:199:     * - function setScaledSize(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:203:        $this->markerImage->setScaledSize('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:208:        $size = $this->getMock('Ivory\GoogleMap\Base\Size');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:209:        $this->markerImage->setSize($size);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:211:        $this->assertSame($size, $this->markerImage->getSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:222:        $this->markerImage->setSize($width, $height, $widthUnit, $heightUnit);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:224:        $this->assertSame($width, $this->markerImage->getSize()->getWidth());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:225:        $this->assertSame($height, $this->markerImage->getSize()->getHeight());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:226:        $this->assertSame($widthUnit, $this->markerImage->getSize()->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:227:        $this->assertSame($heightUnit, $this->markerImage->getSize()->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:232:        $this->markerImage->setSize($this->getMock('Ivory\GoogleMap\Base\Size'));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:233:        $this->markerImage->setSize(null);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:235:        $this->assertNull($this->markerImage->getSize());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:242:     * - function setSize(Ivory\GoogleMap\Base\Size $scaledSize = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:243:     * - function setSize(double $width, double $height, string $widthUnit = null, string $heightUnit = null)
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerImageTest.php:247:        $this->markerImage->setSize('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:31:        $this->circle = new Circle();
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:39:        unset($this->circle);
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:44:        $this->assertInstanceOf('Ivory\GoogleMap\Base\Coordinate', $this->circle->getCenter());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:45:        $this->assertSame(1, $this->circle->getRadius());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:50:        $center = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:53:        $this->circle = new Circle($center, $radius);
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:55:        $this->assertSame($center, $this->circle->getCenter());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:56:        $this->assertSame($radius, $this->circle->getRadius());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:61:        $center = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:62:        $this->circle->setCenter($center);
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:64:        $this->assertSame($center, $this->circle->getCenter());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:72:        $this->circle->setCenter($latitude, $longitude, true);
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:74:        $this->assertSame($latitude, $this->circle->getCenter()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:75:        $this->assertSame($longitude, $this->circle->getCenter()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:76:        $this->assertTrue($this->circle->getCenter()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:84:     * - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:85:     * - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:89:        $this->circle->setCenter('foo');
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:94:        $this->circle->setRadius(3);
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:96:        $this->assertSame(3, $this->circle->getRadius());
./tests/Ivory/Tests/GoogleMap/Overlays/CircleTest.php:105:        $this->circle->setRadius(true);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:31:        $this->markerCluster = new MarkerCluster();
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:39:        unset($this->markerCluster);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:44:        $this->assertSame('marker_cluster_', substr($this->markerCluster->getJavascriptVariable(), 0, 15));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:45:        $this->assertSame(MarkerCluster::_DEFAULT, $this->markerCluster->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:46:        $this->assertFalse($this->markerCluster->hasMarkers());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:47:        $this->assertEmpty($this->markerCluster->getMarkers());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:52:        $this->markerCluster->setType(MarkerCluster::MARKER_CLUSTER);
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:54:        $this->assertSame(MarkerCluster::MARKER_CLUSTER, $this->markerCluster->getType());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:59:        $marker = $this->getMock('Ivory\GoogleMap\Overlays\Marker');
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:60:        $this->markerCluster->setMarkers(array($marker));
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:62:        $this->assertTrue($this->markerCluster->hasMarkers());
./tests/Ivory/Tests/GoogleMap/Overlays/MarkerClusterTest.php:63:        $this->assertSame(array($marker), $this->markerCluster->getMarkers());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:29:        $this->asset = $this->getMockForAbstractClass('Ivory\GoogleMap\Assets\AbstractOptionsAsset');
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:37:        unset($this->asset);
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:42:        $this->assertInternalType('string', $this->asset->getJavascriptVariable());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:43:        $this->assertEmpty($this->asset->getOptions());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:48:        $this->asset = $this->getMockBuilder('Ivory\GoogleMap\Assets\AbstractOptionsAsset')
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:49:            ->setConstructorArgs(array('foo', array('foo' => 'bar')))
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:50:            ->getMockForAbstractClass();
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:52:        $this->assertSame('foo', $this->asset->getJavascriptVariable());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:53:        $this->assertSame(array('foo' => 'bar'), $this->asset->getOptions());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:58:        $this->asset->setOptions(array('foo' => 'bar'));
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:60:        $this->assertTrue($this->asset->hasOptions());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:61:        $this->assertSame(array('foo' => 'bar'), $this->asset->getOptions());
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:63:        $this->assertTrue($this->asset->hasOption('foo'));
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:64:        $this->assertSame('bar', $this->asset->getOption('foo'));
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:66:        $this->asset->removeOption('foo');
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:68:        $this->assertFalse($this->asset->hasOption('foo'));
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:77:        $this->asset->hasOption(true);
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:86:        $this->asset->getOption('foo');
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:95:        $this->asset->setOption(true, false);
./tests/Ivory/Tests/GoogleMap/Assets/OptionsAssetTest.php:104:        $this->asset->removeOption('foo');
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:29:        $this->asset = $this->getMockForAbstractClass('Ivory\GoogleMap\Assets\AbstractJavascriptVariableAsset');
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:37:        unset($this->asset);
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:42:        $this->assertInternalType('string', $this->asset->getJavascriptVariable());
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:47:        $this->asset = $this->getMockBuilder('Ivory\GoogleMap\Assets\AbstractJavascriptVariableAsset')
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:48:            ->setConstructorArgs(array('foo'))
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:49:            ->getMockForAbstractClass();
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:51:        $this->assertSame('foo', $this->asset->getJavascriptVariable());
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:56:        $this->asset->setJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:58:        $this->assertSame('foo', $this->asset->getJavascriptVariable());
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:67:        $this->asset->setJavascriptVariable(true);
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:72:        $this->asset->setPrefixJavascriptVariable('foo');
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:74:        $this->assertSame('foo', substr($this->asset->getJavascriptVariable(), 0, 3));
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:75:        $this->assertGreaterThan(3, strlen($this->asset->getJavascriptVariable()));
./tests/Ivory/Tests/GoogleMap/Assets/JavascriptVariableAssetTest.php:84:        $this->asset->setPrefixJavascriptVariable(true);
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:31:        $this->kmlLayer = new KMLLayer();
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:39:        unset($this->kmlLayer);
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:44:        $this->assertNull($this->kmlLayer->getUrl());
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:49:        $this->kmlLayer = new KMLLayer('foo');
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:51:        $this->assertSame('foo', $this->kmlLayer->getUrl());
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:56:        $this->kmlLayer->setUrl('foo');
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:58:        $this->assertSame('foo', $this->kmlLayer->getUrl());
./tests/Ivory/Tests/GoogleMap/Layers/KMLLayerTest.php:67:        $this->kmlLayer->setUrl(true);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:34:        $this->eventManager = new EventManager();
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:35:        $this->eventMock = $this->getMock('Ivory\GoogleMap\Events\Event');
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:43:        unset($this->eventManager);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:44:        unset($this->eventMock);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:49:        $this->assertEmpty($this->eventManager->getDomEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:50:        $this->assertEmpty($this->eventManager->getDomEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:51:        $this->assertEmpty($this->eventManager->getEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:52:        $this->assertEmpty($this->eventManager->getEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:57:        $domEvents = array($this->getMock('Ivory\GoogleMap\Events\Event'));
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:58:        $domEventsOnce = array($this->getMock('Ivory\GoogleMap\Events\Event'));
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:59:        $events = array($this->getMock('Ivory\GoogleMap\Events\Event'));
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:60:        $eventsOnce = array($this->getMock('Ivory\GoogleMap\Events\Event'));
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:62:        $this->eventManager = new EventManager($domEvents, $domEventsOnce, $events, $eventsOnce);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:64:        $this->assertSame($domEvents, $this->eventManager->getDomEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:65:        $this->assertSame($domEventsOnce, $this->eventManager->getDomEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:66:        $this->assertSame($events, $this->eventManager->getEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:67:        $this->assertSame($eventsOnce, $this->eventManager->getEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:72:        $this->eventManager->addDomEvent($this->eventMock);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:74:        $this->assertSame(array($this->eventMock), $this->eventManager->getDomEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:79:        $this->eventManager->addDomEventOnce($this->eventMock);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:81:        $this->assertSame(array($this->eventMock), $this->eventManager->getDomEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:86:        $this->eventManager->addEvent($this->eventMock);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:88:        $this->assertSame(array($this->eventMock), $this->eventManager->getEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:93:        $this->eventManager->addEventOnce($this->eventMock);
./tests/Ivory/Tests/GoogleMap/Events/EventManagerTest.php:95:        $this->assertSame(array($this->eventMock), $this->eventManager->getEventsOnce());
./tests/Ivory/Tests/GoogleMap/Events/MouseEventTest.php:34:        $this->assertSame($expected, MouseEvent::getMouseEvents());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:31:        $this->event = new Event();
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:39:        unset($this->event);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:44:        $this->assertNull($this->event->getInstance());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:45:        $this->assertNull($this->event->getEventName());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:46:        $this->assertNull($this->event->getHandle());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:47:        $this->assertFalse($this->event->isCapture());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:52:        $this->event = new Event('foo', 'bar', 'baz', true);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:54:        $this->assertSame('foo', $this->event->getInstance());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:55:        $this->assertSame('bar', $this->event->getEventName());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:56:        $this->assertSame('baz', $this->event->getHandle());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:57:        $this->assertTrue($this->event->isCapture());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:62:        $this->event->setInstance('foo');
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:64:        $this->assertSame('foo', $this->event->getInstance());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:73:        $this->event->setInstance(true);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:78:        $this->event->setEventName('foo');
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:80:        $this->assertSame('foo', $this->event->getEventName());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:89:        $this->event->setEventName(true);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:94:        $this->event->setHandle('foo');
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:96:        $this->assertSame('foo', $this->event->getHandle());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:105:        $this->event->setHandle(true);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:110:        $this->event->setCapture(true);
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:112:        $this->assertTrue($this->event->isCapture());
./tests/Ivory/Tests/GoogleMap/Events/EventTest.php:121:        $this->event->setCapture('foo');
./tests/Ivory/Tests/GoogleMap/MapTypeIdTest.php:32:        $this->assertSame($expected, MapTypeId::getMapTypeIds());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:31:        $this->directionsWaypoint = new DirectionsWaypoint();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:39:        unset($this->directionsWaypoint);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:44:        $this->assertFalse($this->directionsWaypoint->hasLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:45:        $this->assertFalse($this->directionsWaypoint->hasStopover());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:50:        $this->directionsWaypoint->setLocation('address');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:51:        $this->assertTrue($this->directionsWaypoint->hasLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:52:        $this->assertEquals($this->directionsWaypoint->getLocation(), 'address');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:57:        $location = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:59:        $this->directionsWaypoint->setLocation($location);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:61:        $this->assertSame($location, $this->directionsWaypoint->getLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:66:        $this->directionsWaypoint->setLocation(1.1, 2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:68:        $this->assertSame(1.1, $this->directionsWaypoint->getLocation()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:69:        $this->assertSame(2.1, $this->directionsWaypoint->getLocation()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:70:        $this->assertFalse($this->directionsWaypoint->getLocation()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:77:     * - function setLocation(string $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:78:     * - function setLocation(Ivory\GoogleMap\Base\Coordinate $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:79:     * - function setLocation(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:83:        $this->directionsWaypoint->setLocation(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:88:        $this->directionsWaypoint->setStopover(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:90:        $this->assertTrue($this->directionsWaypoint->hasStopover());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:91:        $this->assertTrue($this->directionsWaypoint->getStopover());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:96:        $this->directionsWaypoint->setStopover(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:97:        $this->directionsWaypoint->setStopover(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:99:        $this->assertFalse($this->directionsWaypoint->hasStopover());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:108:        $this->directionsWaypoint->setStopover('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:113:        $this->assertFalse($this->directionsWaypoint->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:118:        $this->directionsWaypoint->setLocation('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsWaypointTest.php:120:        $this->assertTrue($this->directionsWaypoint->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:53:        $this->distance = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Distance')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:54:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:55:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:57:        $this->duration = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Duration')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:58:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:59:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:61:        $this->endLocation = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:62:        $this->instructions = 'instructions';
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:63:        $this->encodedPolyline = $this->getMock('Ivory\GoogleMap\Overlays\EncodedPolyline');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:64:        $this->startLocation = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:65:        $this->travelMode = TravelMode::DRIVING;
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:67:        $this->directionsStep = new DirectionsStep(
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:68:            $this->distance,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:69:            $this->duration,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:70:            $this->endLocation,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:71:            $this->instructions,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:72:            $this->encodedPolyline,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:73:            $this->startLocation,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:74:            $this->travelMode
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:83:        unset($this->directionsStep);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:84:        unset($this->distance);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:85:        unset($this->duration);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:86:        unset($this->endLocation);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:87:        unset($this->instructions);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:88:        unset($this->encodedPolyline);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:89:        unset($this->startLocation);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:90:        unset($this->travelMode);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:95:        $this->assertSame($this->distance, $this->directionsStep->getDistance());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:96:        $this->assertSame($this->duration, $this->directionsStep->getDuration());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:97:        $this->assertSame($this->endLocation, $this->directionsStep->getEndLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:98:        $this->assertSame($this->instructions, $this->directionsStep->getInstructions());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:99:        $this->assertSame($this->encodedPolyline, $this->directionsStep->getEncodedPolyline());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:100:        $this->assertSame($this->startLocation, $this->directionsStep->getStartLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:101:        $this->assertSame($this->travelMode, $this->directionsStep->getTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:110:        $this->directionsStep->setInstructions(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStepTest.php:119:        $this->directionsStep->setTravelMode('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:38:        $route = $this->getMockBuilder('Ivory\GoogleMap\Services\Directions\DirectionsRoute')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:39:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:40:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:42:        $this->routes = array($route);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:43:        $this->status = DirectionsStatus::NOT_FOUND;
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:45:        $this->directionsResponse = new DirectionsResponse($this->routes, $this->status);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:53:        unset($this->directionsResponse);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:54:        unset($this->routes);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:55:        unset($this->status);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:60:        $this->assertSame($this->routes, $this->directionsResponse->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:61:        $this->assertSame($this->status, $this->directionsResponse->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsResponseTest.php:71:        $this->directionsResponse->setStatus('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:52:        $this->bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:53:        $this->copyrights = 'foo';
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:55:        $leg = $this->getMockBuilder('Ivory\GoogleMap\Services\Directions\DirectionsLeg')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:56:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:57:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:59:        $this->legs = array($leg);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:61:        $this->encodedPolyline = $this->getMock('Ivory\GoogleMap\Overlays\EncodedPolyline');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:62:        $this->summary = 'bar';
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:63:        $this->warnings = array('foo', 'baz');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:64:        $this->waypointOrder = array(3, 2, 1);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:66:        $this->directionsRoute = new DirectionsRoute(
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:67:            $this->bound,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:68:            $this->copyrights,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:69:            $this->legs,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:70:            $this->encodedPolyline,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:71:            $this->summary,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:72:            $this->warnings,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:73:            $this->waypointOrder
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:82:        unset($this->directionsRoute);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:83:        unset($this->bound);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:84:        unset($this->copyrights);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:85:        unset($this->legs);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:86:        unset($this->encodedPolyline);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:87:        unset($this->summary);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:88:        unset($this->warnings);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:89:        unset($this->waypointOrder);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:94:        $this->assertSame($this->bound, $this->directionsRoute->getBound());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:95:        $this->assertSame($this->copyrights, $this->directionsRoute->getCopyrights());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:96:        $this->assertSame($this->legs, $this->directionsRoute->getLegs());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:97:        $this->assertSame($this->encodedPolyline, $this->directionsRoute->getOverviewPolyline());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:98:        $this->assertSame($this->summary, $this->directionsRoute->getSummary());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:99:        $this->assertSame($this->warnings, $this->directionsRoute->getWarnings());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:100:        $this->assertSame($this->waypointOrder, $this->directionsRoute->getWaypointOrder());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:109:        $this->directionsRoute->setCopyrights(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:118:        $this->directionsRoute->setSummary(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:127:        $this->directionsRoute->addWarning(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRouteTest.php:136:        $this->directionsRoute->addWaypointOrder(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsStatusTest.php:36:        $this->assertSame($expected, DirectionsStatus::getDirectionsStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:34:        $this->directionsRequest = new DirectionsRequest();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:42:        unset($this->directionsRequest);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:47:        $this->assertFalse($this->directionsRequest->hasAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:48:        $this->assertFalse($this->directionsRequest->hasAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:49:        $this->assertFalse($this->directionsRequest->hasDestination());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:50:        $this->assertFalse($this->directionsRequest->hasOptimizeWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:51:        $this->assertFalse($this->directionsRequest->hasOrigin());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:52:        $this->assertFalse($this->directionsRequest->hasDepartureTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:53:        $this->assertFalse($this->directionsRequest->hasArrivalTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:54:        $this->assertFalse($this->directionsRequest->hasProvideRouteAlternatives());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:55:        $this->assertFalse($this->directionsRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:56:        $this->assertFalse($this->directionsRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:57:        $this->assertFalse($this->directionsRequest->hasTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:58:        $this->assertFalse($this->directionsRequest->hasUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:59:        $this->assertFalse($this->directionsRequest->hasWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:64:        $this->directionsRequest->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:66:        $this->assertTrue($this->directionsRequest->hasAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:67:        $this->assertTrue($this->directionsRequest->getAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:72:        $this->directionsRequest->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:73:        $this->directionsRequest->setAvoidHighways(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:75:        $this->assertNull($this->directionsRequest->getAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:84:        $this->directionsRequest->setAvoidHighways('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:89:        $this->directionsRequest->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:91:        $this->assertTrue($this->directionsRequest->hasAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:92:        $this->assertTrue($this->directionsRequest->getAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:97:        $this->directionsRequest->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:98:        $this->directionsRequest->setAvoidTolls(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:100:        $this->assertNull($this->directionsRequest->getAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:109:        $this->directionsRequest->setAvoidTolls('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:114:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:116:        $this->assertTrue($this->directionsRequest->hasDestination());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:117:        $this->assertEquals($this->directionsRequest->getDestination(), 'foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:122:        $location = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:124:        $this->directionsRequest->setDestination($location);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:126:        $this->assertSame($location, $this->directionsRequest->getDestination());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:131:        $this->directionsRequest->setDestination(1.1, 2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:133:        $this->assertSame(1.1, $this->directionsRequest->getDestination()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:134:        $this->assertSame(2.1, $this->directionsRequest->getDestination()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:135:        $this->assertFalse($this->directionsRequest->getDestination()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:142:     * - function setDestination(string $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:143:     * - function setDestination(Ivory\GoogleMap\Base\Coordinate $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:144:     * - function setDestination(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:148:        $this->directionsRequest->setDestination(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:153:        $this->directionsRequest->setOptimizeWaypoints(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:155:        $this->assertTrue($this->directionsRequest->hasOptimizeWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:156:        $this->assertTrue($this->directionsRequest->getOptimizeWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:161:        $this->directionsRequest->setOptimizeWaypoints(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:162:        $this->directionsRequest->setOptimizeWaypoints(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:164:        $this->assertNull($this->directionsRequest->getOptimizeWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:173:        $this->directionsRequest->setOptimizeWaypoints('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:178:        $this->directionsRequest->setOrigin('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:180:        $this->assertTrue($this->directionsRequest->hasOrigin());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:181:        $this->assertSame('foo', $this->directionsRequest->getOrigin());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:186:        $origin = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:187:        $this->directionsRequest->setOrigin($origin);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:189:        $this->assertSame($origin, $this->directionsRequest->getOrigin());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:194:        $this->directionsRequest->setOrigin(1.1, 2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:196:        $this->assertSame(1.1, $this->directionsRequest->getOrigin()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:197:        $this->assertSame(2.1, $this->directionsRequest->getOrigin()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:198:        $this->assertFalse($this->directionsRequest->getOrigin()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:205:     * - function setOrigin(string $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:206:     * - function setOrigin(Ivory\GoogleMap\Base\Coordinate $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:207:     * - function setOrigin(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:211:        $this->directionsRequest->setOrigin(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:217:        $this->directionsRequest->setDepartureTime($now);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:219:        $this->assertTrue($this->directionsRequest->hasDepartureTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:220:        $this->assertSame($now, $this->directionsRequest->getDepartureTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:225:        $this->directionsRequest->setDepartureTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:226:        $this->directionsRequest->setDepartureTime(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:228:        $this->assertNull($this->directionsRequest->getDepartureTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:234:        $this->directionsRequest->setArrivalTime($now);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:236:        $this->assertTrue($this->directionsRequest->hasArrivalTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:237:        $this->assertSame($now, $this->directionsRequest->getArrivalTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:242:        $this->directionsRequest->setArrivalTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:243:        $this->directionsRequest->setArrivalTime(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:245:        $this->assertNull($this->directionsRequest->getArrivalTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:250:        $this->directionsRequest->setProvideRouteAlternatives(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:252:        $this->assertTrue($this->directionsRequest->hasProvideRouteAlternatives());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:253:        $this->assertTrue($this->directionsRequest->getProvideRouteAlternatives());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:258:        $this->directionsRequest->setProvideRouteAlternatives(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:259:        $this->directionsRequest->setProvideRouteAlternatives(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:261:        $this->assertNull($this->directionsRequest->getProvideRouteAlternatives());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:270:        $this->directionsRequest->setProvideRouteAlternatives('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:275:        $this->directionsRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:277:        $this->assertTrue($this->directionsRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:278:        $this->assertSame('fr', $this->directionsRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:283:        $this->directionsRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:284:        $this->directionsRequest->setRegion(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:286:        $this->assertNull($this->directionsRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:295:        $this->directionsRequest->setRegion('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:300:        $this->directionsRequest->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:302:        $this->assertTrue($this->directionsRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:303:        $this->assertSame('fr', $this->directionsRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:308:        $this->directionsRequest->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:309:        $this->directionsRequest->setLanguage(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:311:        $this->assertNull($this->directionsRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:320:        $this->directionsRequest->setLanguage('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:325:        $this->directionsRequest->setTravelMode(TravelMode::WALKING);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:327:        $this->assertTrue($this->directionsRequest->hasTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:328:        $this->assertSame(TravelMode::WALKING, $this->directionsRequest->getTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:333:        $this->directionsRequest->setTravelMode(TravelMode::WALKING);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:334:        $this->directionsRequest->setTravelMode(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:336:        $this->assertNull($this->directionsRequest->getTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:345:        $this->directionsRequest->setTravelMode('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:350:        $this->directionsRequest->setUnitSystem(UnitSystem::IMPERIAL);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:352:        $this->assertTrue($this->directionsRequest->hasUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:353:        $this->assertSame(UnitSystem::IMPERIAL, $this->directionsRequest->getUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:358:        $this->directionsRequest->setUnitSystem(UnitSystem::IMPERIAL);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:359:        $this->directionsRequest->setUnitSystem(null);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:361:        $this->assertNull($this->directionsRequest->getUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:370:        $this->directionsRequest->setUnitSystem('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:375:        $waypoint = $this->getMock('Ivory\GoogleMap\Services\Directions\DirectionsWaypoint');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:376:        $this->directionsRequest->setWaypoints(array($waypoint));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:378:        $this->assertTrue($this->directionsRequest->hasWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:379:        $this->assertSame(array($waypoint), $this->directionsRequest->getWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:384:        $coordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:385:        $this->directionsRequest->setWaypoints(array($coordinate));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:387:        $waypoints = $this->directionsRequest->getWaypoints();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:389:        $this->assertArrayHasKey(0, $waypoints);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:390:        $this->assertSame($coordinate, $waypoints[0]->getLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:395:        $this->directionsRequest->addWaypoint(1.1, 2.2, false);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:397:        $waypoints = $this->directionsRequest->getWaypoints();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:399:        $this->assertArrayHasKey(0, $waypoints);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:400:        $this->assertSame(1.1, $waypoints[0]->getLocation()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:401:        $this->assertSame(2.2, $waypoints[0]->getLocation()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:402:        $this->assertFalse($waypoints[0]->getLocation()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:409:     * - function addWaypoint(Ivory\GoogleMap\Services\Directions\DirectionsWaypoint $waypoint)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:410:     * - function addWaypoint(string $location)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:411:     * - function addWaypoint(Ivory\GoogleMap\Base\Coordinate $location)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:412:     * - function addWaypoint(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:416:        $this->directionsRequest->addWaypoint(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:421:        $this->directionsRequest->setSensor(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:423:        $this->assertTrue($this->directionsRequest->hasSensor());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:432:        $this->directionsRequest->setSensor('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:437:        $this->assertFalse($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:442:        $this->directionsRequest->setOrigin('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:444:        $this->assertFalse($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:449:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:451:        $this->assertFalse($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:456:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:457:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:459:        $this->assertTrue($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:464:        $waypoint = $this->getMock('Ivory\GoogleMap\Services\Directions\DirectionsWaypoint');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:466:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:467:            ->method('isValid')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:468:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:470:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:471:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:472:        $this->directionsRequest->addWaypoint($waypoint);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:474:        $this->assertTrue($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:479:        $waypoint = $this->getMock('Ivory\GoogleMap\Services\Directions\DirectionsWaypoint');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:481:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:482:            ->method('isValid')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:483:            ->will($this->returnValue(false));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:485:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:486:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:487:        $this->directionsRequest->addWaypoint($waypoint);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:489:        $this->assertFalse($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:494:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:495:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:497:        $this->directionsRequest->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:499:        $this->assertFalse($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:504:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:505:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:507:        $this->directionsRequest->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:508:        $this->directionsRequest->setDepartureTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:510:        $this->assertTrue($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:515:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:516:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:518:        $this->directionsRequest->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:519:        $this->directionsRequest->setArrivalTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:521:        $this->assertTrue($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:526:        $this->directionsRequest->setDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:527:        $this->directionsRequest->setOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:529:        $this->directionsRequest->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:530:        $this->directionsRequest->setArrivalTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:531:        $this->directionsRequest->setDepartureTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsRequestTest.php:533:        $this->assertTrue($this->directionsRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:55:        $this->distance = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Distance')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:56:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:57:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:59:        $this->duration = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Duration')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:60:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:61:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:63:        $this->endAddress = 'foo';
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:64:        $this->endLocation = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:65:        $this->startAddress = 'bar';
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:66:        $this->startLocation = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:68:        $step = $this->getMockBuilder('Ivory\GoogleMap\Services\Directions\DirectionsStep')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:69:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:70:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:72:        $this->steps = array($step);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:73:        $this->viaWaypoint = array('foo');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:75:        $this->directionsLeg = new DirectionsLeg(
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:76:            $this->distance,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:77:            $this->duration,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:78:            $this->endAddress,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:79:            $this->endLocation,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:80:            $this->startAddress,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:81:            $this->startLocation,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:82:            $this->steps,
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:83:            $this->viaWaypoint
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:92:        unset($this->directionsLeg);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:93:        unset($this->duration);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:94:        unset($this->distance);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:95:        unset($this->endAddress);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:96:        unset($this->endLocation);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:97:        unset($this->startAddress);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:98:        unset($this->startLocation);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:99:        unset($this->steps);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:100:        unset($this->viaWaypoint);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:105:        $this->assertSame($this->duration, $this->directionsLeg->getDuration());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:106:        $this->assertSame($this->distance, $this->directionsLeg->getDistance());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:107:        $this->assertSame($this->endAddress, $this->directionsLeg->getEndAddress());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:108:        $this->assertSame($this->endLocation, $this->directionsLeg->getEndLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:109:        $this->assertSame($this->startAddress, $this->directionsLeg->getStartAddress());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:110:        $this->assertSame($this->startLocation, $this->directionsLeg->getStartLocation());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:111:        $this->assertSame($this->steps, $this->directionsLeg->getSteps());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:112:        $this->assertSame($this->viaWaypoint, $this->directionsLeg->getViaWaypoints());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:121:        $this->directionsLeg->setEndAddress(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsLegTest.php:130:        $this->directionsLeg->setStartAddress(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:40:        $this->directions = new Directions(new CurlHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:48:        unset($this->directions);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:53:        $response = $this->directions->route('Lille', 'Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:55:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:56:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:62:        $request->setOrigin(50.629381, 3.057268);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:63:        $request->setDestination(48.856633, 2.352254);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:64:        $request->setTravelMode(TravelMode::DRIVING);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:65:        $request->setProvideRouteAlternatives(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:66:        $request->setUnitSystem(UnitSystem::METRIC);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:67:        $request->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:69:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:71:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:72:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:78:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:79:        $request->addWaypoint('Compiègne');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:80:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:82:        $request->setOptimizeWaypoints(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:84:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:86:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:87:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:93:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:94:        $request->addWaypoint(49.418079, 2.826190);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:95:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:97:        $request->setOptimizeWaypoints(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:99:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:101:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:102:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:108:        $waypoint->setLocation('Compiègne');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:109:        $waypoint->setStopover(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:112:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:113:        $request->addWaypoint($waypoint);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:114:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:116:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:118:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:119:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:125:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:126:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:127:        $request->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:129:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:131:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:132:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:138:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:139:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:140:        $request->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:142:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:144:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:145:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:151:        $request->setOrigin('Lille');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:152:        $request->setDestination('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:153:        $request->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:155:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:157:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:158:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:164:        $request->setOrigin('601-625 Ashbury Street, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:165:        $request->setDestination('Bike Route 95, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:167:        $request->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:168:        $request->setDepartureTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:170:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:172:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:173:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:179:        $request->setOrigin('601-625 Ashbury Street, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:180:        $request->setDestination('Bike Route 95, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:182:        $request->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:183:        $request->setArrivalTime(new DateTime('+2 hours'));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:185:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:187:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:188:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:194:        $request->setOrigin('601-625 Ashbury Street, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:195:        $request->setDestination('Bike Route 95, San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:197:        $request->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:198:        $request->setArrivalTime(new DateTime());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:199:        $request->setArrivalTime(new DateTime('+2 hours'));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:201:        $response = $this->directions->route($request);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:203:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:204:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:209:        $this->directions->setFormat('xml');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:210:        $response = $this->directions->route('Lille', 'Paris');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:212:        $this->assertSame(DirectionsStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:213:        $this->assertNotEmpty($response->getRoutes());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:218:        $method = new \ReflectionMethod($this->directions, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:219:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:223:        $this->assertSame($url, $method->invoke($this->directions, $url));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:230:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:231:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:232:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:235:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:236:            ->method('signUrl')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:237:            ->with($this->equalTo($url))
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:238:            ->will($this->returnValue('url'));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:240:        $this->directions->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:242:        $method = new \ReflectionMethod($this->directions, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:243:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:245:        $this->assertSame('url', $method->invoke($this->directions, $url));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:252:     * - function route(string $origin, string $destination)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:253:     * - function route(Ivory\GoogleMap\Services\Directions\DirectionsRequest $request)
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:257:        $this->directions->route(true);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:267:        $this->directions->route(new DirectionsRequest());
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:276:        $httpAdapterMock = $this->getMock('Widop\HttpAdapter\HttpAdapterInterface');
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:278:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:279:            ->method('getContent')
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:280:            ->will($this->returnValue(null));
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:282:        $this->directions = new Directions($httpAdapterMock);
./tests/Ivory/Tests/GoogleMap/Services/Directions/DirectionsTest.php:283:        $this->directions->route('Lille', 'Paris');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:31:        $this->businessAccount = new BusinessAccount('client_id', 'secret');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:39:        unset($this->businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:44:        $this->assertSame('client_id', $this->businessAccount->getClientId());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:45:        $this->assertSame('secret', $this->businessAccount->getSecret());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:46:        $this->assertFalse($this->businessAccount->hasChannel());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:47:        $this->assertNull($this->businessAccount->getChannel());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:52:        $this->businessAccount = new BusinessAccount('client_id', 'secret', 'channel');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:54:        $this->assertTrue($this->businessAccount->hasChannel());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:55:        $this->assertSame('channel', $this->businessAccount->getChannel());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:60:        $this->businessAccount->setClientId('foo');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:62:        $this->assertSame('foo', $this->businessAccount->getClientId());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:67:        $this->businessAccount->setSecret('foo');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:69:        $this->assertSame('foo', $this->businessAccount->getSecret());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:74:        $this->businessAccount->setChannel('foo');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:76:        $this->assertSame('foo', $this->businessAccount->getChannel());
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:82:        $expected = $url.'&client=gme-client_id&signature=EO4W2ipM4YzwEIOM1pRZ5xbrl8k=';
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:84:        $this->assertSame($expected, $this->businessAccount->signUrl($url));
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:89:        $this->businessAccount->setChannel('channel');
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:92:        $expected = $url.'&client=gme-client_id&channel=channel&signature=e9BFlnQaKg-t3NIxKbilkQeTU1Y=';
./tests/Ivory/Tests/GoogleMap/Services/BusinessAccountTest.php:94:        $this->assertSame($expected, $this->businessAccount->signUrl($url));
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:34:        $this->httpAdapter = $this->getMock('Widop\HttpAdapter\HttpAdapterInterface');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:36:        $this->service = $this->getMockBuilder('Ivory\GoogleMap\Services\AbstractService')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:37:            ->setConstructorArgs(array($this->httpAdapter, 'http://foo'))
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:38:            ->getMockForAbstractClass();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:46:        unset($this->httpAdapter);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:47:        unset($this->service);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:52:        $this->assertSame($this->httpAdapter, $this->service->getHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:53:        $this->assertSame('http://foo', $this->service->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:54:        $this->assertFalse($this->service->isHttps());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:55:        $this->assertSame('json', $this->service->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:56:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Utils\XmlParser', $this->service->getXmlParser());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:57:        $this->assertFalse($this->service->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:58:        $this->assertNull($this->service->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:63:        $xmlParser = $this->getMock('Ivory\GoogleMap\Services\Utils\XmlParser');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:65:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:66:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:67:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:69:        $this->service = $this->getMockBuilder('Ivory\GoogleMap\Services\AbstractService')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:70:            ->setConstructorArgs(array($this->httpAdapter, 'http://bar', true, 'xml', $xmlParser, $businessAccount))
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:71:            ->getMockForAbstractClass();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:73:        $this->assertSame($this->httpAdapter, $this->service->getHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:74:        $this->assertSame('https://bar', $this->service->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:75:        $this->assertTrue($this->service->isHttps());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:76:        $this->assertSame('xml', $this->service->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:77:        $this->assertSame($xmlParser, $this->service->getXmlParser());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:78:        $this->assertTrue($this->service->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:79:        $this->assertSame($businessAccount, $this->service->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:84:        $httpAdapter = $this->getMock('Widop\HttpAdapter\HttpAdapterInterface');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:85:        $this->service->setHttpAdapter($httpAdapter);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:87:        $this->assertSame($httpAdapter, $this->service->getHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:92:        $this->service->setHttps(true);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:94:        $this->assertTrue($this->service->isHttps());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:103:        $this->service->setHttps('foo');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:108:        $this->service->setHttps(true);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:109:        $this->assertSame('https://foo', $this->service->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:118:        $this->service->setUrl(true);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:123:        $this->service->setFormat('xml');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:124:        $this->assertSame('xml', $this->service->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:126:        $this->service->setFormat('json');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:127:        $this->assertSame('json', $this->service->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:136:        $this->service->setFormat('foo');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:141:        $xmlParser = $this->getMock('Ivory\GoogleMap\Services\Utils\XmlParser');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:142:        $this->service->setXmlParser($xmlParser);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:144:        $this->assertSame($xmlParser, $this->service->getXmlParser());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:149:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:150:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:151:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:153:        $this->service->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:155:        $this->assertTrue($this->service->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:156:        $this->assertSame($businessAccount, $this->service->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:158:        $this->service->setBusinessAccount();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:160:        $this->assertFalse($this->service->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:161:        $this->assertNull($this->service->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:166:        $method = new \ReflectionMethod($this->service, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:167:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:171:        $this->assertSame($url, $method->invoke($this->service, $url));
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:178:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:179:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:180:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:183:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:184:            ->method('signUrl')
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:185:            ->with($this->equalTo($url))
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:186:            ->will($this->returnValue('url'));
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:188:        $this->service->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:190:        $method = new \ReflectionMethod($this->service, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:191:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/AbstractServiceTest.php:193:        $this->assertSame('url', $method->invoke($this->service, $url));
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:31:        $this->xmlParser = new XmlParser();
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:39:        unset($this->xmlParser);
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:47:        $expected->foo = 'bar';
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:49:        $this->assertEquals($expected, $this->xmlParser->parse($xml));
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:58:        $expected->foos = array('bar');
./tests/Ivory/Tests/GoogleMap/Services/Utils/XmlParserTest.php:60:        $this->assertEquals($expected, $this->xmlParser->parse($xml, $rules));
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:31:        $this->duration = new Duration('foo', 2.2);
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:39:        unset($this->duration);
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:44:        $this->assertSame('foo', $this->duration->getText());
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:45:        $this->assertSame(2.2, $this->duration->getValue());
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:54:        $this->duration->setText(true);
./tests/Ivory/Tests/GoogleMap/Services/Base/DurationTest.php:63:        $this->duration->setValue('foo');
./tests/Ivory/Tests/GoogleMap/Services/Base/TravelModeTest.php:32:        $this->assertSame($expected, TravelMode::getTravelModes());
./tests/Ivory/Tests/GoogleMap/Services/Base/UnitSystemTest.php:30:        $this->assertSame($expected, UnitSystem::getUnitSystems());
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:31:        $this->distance = new Distance('foo', 2.2);
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:39:        unset($this->distance);
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:44:        $this->assertSame('foo', $this->distance->getText());
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:45:        $this->assertSame(2.2, $this->distance->getValue());
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:54:        $this->distance->setText(true);
./tests/Ivory/Tests/GoogleMap/Services/Base/DistanceTest.php:63:        $this->distance->setValue('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:41:        $this->status = DistanceMatrixElementStatus::ZERO_RESULTS;
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:43:        $this->distance = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Distance')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:44:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:45:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:47:        $this->duration = $this->getMockBuilder('Ivory\GoogleMap\Services\Base\Duration')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:48:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:49:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:51:        $this->distanceMatrixResponseElement = new DistanceMatrixResponseElement(
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:52:            $this->status,
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:53:            $this->distance,
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:54:            $this->duration
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:63:        unset($this->status);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:64:        unset($this->distance);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:65:        unset($this->duration);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:66:        unset($this->distanceMatrixResponseElement);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:71:        $this->assertSame($this->status, $this->distanceMatrixResponseElement->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:72:        $this->assertSame($this->distance, $this->distanceMatrixResponseElement->getDistance());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:73:        $this->assertSame($this->duration, $this->distanceMatrixResponseElement->getDuration());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseElementTest.php:82:        $this->distanceMatrixResponseElement->setStatus('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:44:        $row = $this->getMockBuilder('Ivory\GoogleMap\Services\DistanceMatrix\DistanceMatrixResponseRow')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:45:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:46:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:48:        $this->status = DistanceMatrixStatus::REQUEST_DENIED;
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:49:        $this->origins = array('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:50:        $this->destinations = array('bar');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:51:        $this->rows = array($row);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:53:        $this->distanceMatrixResponse = new DistanceMatrixResponse(
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:54:            $this->status,
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:55:            $this->origins,
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:56:            $this->destinations,
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:57:            $this->rows
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:66:        unset($this->status);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:67:        unset($this->origins);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:68:        unset($this->destinations);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:69:        unset($this->rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:70:        unset($this->distanceMatrixResponse);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:75:        $this->assertSame($this->status, $this->distanceMatrixResponse->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:76:        $this->assertSame($this->origins, $this->distanceMatrixResponse->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:77:        $this->assertSame($this->destinations, $this->distanceMatrixResponse->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:78:        $this->assertSame($this->rows, $this->distanceMatrixResponse->getRows());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseTest.php:88:        $this->distanceMatrixResponse->setStatus('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixElementStatusTest.php:31:        $this->assertSame($expected, DistanceMatrixElementStatus::getDistanceMatrixElementStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixStatusTest.php:35:        $this->assertSame($expected, DistanceMatrixStatus::getDistanceMatrixStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:34:        $element = $this->getMockBuilder('Ivory\GoogleMap\Services\DistanceMatrix\DistanceMatrixResponseElement')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:35:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:36:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:38:        $this->elements = array($element);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:40:        $this->distanceMatrixResponseRow = new DistanceMatrixResponseRow($this->elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:48:        unset($this->elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:49:        unset($this->distanceMatrixResponseRow);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixResponseRowTest.php:54:        $this->assertSame($this->elements, $this->distanceMatrixResponseRow->getElements());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:34:        $this->distanceMatrixRequest = new DistanceMatrixRequest();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:42:        unset($this->distanceMatrixRequest);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:47:        $this->assertFalse($this->distanceMatrixRequest->hasAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:48:        $this->assertFalse($this->distanceMatrixRequest->hasAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:49:        $this->assertFalse($this->distanceMatrixRequest->hasDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:50:        $this->assertFalse($this->distanceMatrixRequest->hasOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:51:        $this->assertFalse($this->distanceMatrixRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:52:        $this->assertFalse($this->distanceMatrixRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:53:        $this->assertFalse($this->distanceMatrixRequest->hasTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:54:        $this->assertFalse($this->distanceMatrixRequest->hasUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:55:        $this->assertFalse($this->distanceMatrixRequest->hasSensor());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:60:        $this->distanceMatrixRequest->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:62:        $this->assertTrue($this->distanceMatrixRequest->hasAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:63:        $this->assertTrue($this->distanceMatrixRequest->getAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:68:        $this->distanceMatrixRequest->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:69:        $this->distanceMatrixRequest->setAvoidHighways(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:71:        $this->assertNull($this->distanceMatrixRequest->getAvoidHighways());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:80:        $this->distanceMatrixRequest->setAvoidHighways('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:85:        $this->distanceMatrixRequest->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:87:        $this->assertTrue($this->distanceMatrixRequest->hasAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:88:        $this->assertTrue($this->distanceMatrixRequest->getAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:93:        $this->distanceMatrixRequest->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:94:        $this->distanceMatrixRequest->setAvoidTolls(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:96:        $this->assertNull($this->distanceMatrixRequest->getAvoidTolls());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:105:        $this->distanceMatrixRequest->setAvoidTolls('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:110:        $this->distanceMatrixRequest->setDestinations(array('foo'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:112:        $this->assertTrue($this->distanceMatrixRequest->hasDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:113:        $this->assertEquals($this->distanceMatrixRequest->getDestinations(), array('foo'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:118:        $location = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:120:        $this->distanceMatrixRequest->setDestinations(array($location));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:122:        $destinations = $this->distanceMatrixRequest->getDestinations();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:124:        $this->assertArrayHasKey(0, $destinations);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:125:        $this->assertCount(1, $destinations);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:126:        $this->assertSame($location, $destinations[0]);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:131:        $this->distanceMatrixRequest->addDestination(1.1, 2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:133:        $destinations = $this->distanceMatrixRequest->getDestinations();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:135:        $this->assertArrayHasKey(0, $destinations);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:136:        $this->assertCount(1, $destinations);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:137:        $this->assertSame(1.1, $destinations[0]->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:138:        $this->assertSame(2.1, $destinations[0]->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:139:        $this->assertFalse($destinations[0]->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:146:     * - function setDestination(string $destination)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:147:     * - function setDestination(Ivory\GoogleMap\Base\Coordinate $destination)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:148:     * - function setDestination(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:152:        $this->distanceMatrixRequest->addDestination(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:157:        $this->distanceMatrixRequest->setOrigins(array('foo'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:159:        $this->assertTrue($this->distanceMatrixRequest->hasOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:160:        $this->assertSame(array('foo'), $this->distanceMatrixRequest->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:165:        $origin = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:166:        $this->distanceMatrixRequest->setOrigins(array($origin));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:168:        $origins = $this->distanceMatrixRequest->getOrigins();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:170:        $this->assertArrayHasKey(0, $origins);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:171:        $this->assertSame($origin, $origins[0]);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:176:        $this->distanceMatrixRequest->addOrigin(1.1, 2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:178:        $origins = $this->distanceMatrixRequest->getOrigins();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:180:        $this->assertArrayHasKey(0, $origins);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:181:        $this->assertCount(1, $origins);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:182:        $this->assertSame(1.1, $origins[0]->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:183:        $this->assertSame(2.1, $origins[0]->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:184:        $this->assertFalse($origins[0]->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:191:     * - function setOrigin(string $origin)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:192:     * - function setOrigin(Ivory\GoogleMap\Base\Coordinate $origin)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:193:     * - function setOrigin(double $latitude, double $longitude, boolean $noWrap)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:197:        $this->distanceMatrixRequest->addOrigin(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:202:        $this->distanceMatrixRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:204:        $this->assertTrue($this->distanceMatrixRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:205:        $this->assertSame('fr', $this->distanceMatrixRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:210:        $this->distanceMatrixRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:211:        $this->distanceMatrixRequest->setRegion(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:213:        $this->assertNull($this->distanceMatrixRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:222:        $this->distanceMatrixRequest->setRegion('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:227:        $this->distanceMatrixRequest->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:229:        $this->assertTrue($this->distanceMatrixRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:230:        $this->assertSame('fr', $this->distanceMatrixRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:235:        $this->distanceMatrixRequest->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:236:        $this->distanceMatrixRequest->setLanguage(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:238:        $this->assertNull($this->distanceMatrixRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:247:        $this->distanceMatrixRequest->setLanguage('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:252:        $this->distanceMatrixRequest->setTravelMode(TravelMode::WALKING);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:254:        $this->assertTrue($this->distanceMatrixRequest->hasTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:255:        $this->assertSame(TravelMode::WALKING, $this->distanceMatrixRequest->getTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:260:        $this->distanceMatrixRequest->setTravelMode(TravelMode::WALKING);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:261:        $this->distanceMatrixRequest->setTravelMode(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:263:        $this->assertNull($this->distanceMatrixRequest->getTravelMode());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:272:        $this->distanceMatrixRequest->setTravelMode(TravelMode::TRANSIT);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:281:        $this->distanceMatrixRequest->setTravelMode('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:286:        $this->distanceMatrixRequest->setUnitSystem(UnitSystem::IMPERIAL);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:288:        $this->assertTrue($this->distanceMatrixRequest->hasUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:289:        $this->assertSame(UnitSystem::IMPERIAL, $this->distanceMatrixRequest->getUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:294:        $this->distanceMatrixRequest->setUnitSystem(UnitSystem::IMPERIAL);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:295:        $this->distanceMatrixRequest->setUnitSystem(null);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:297:        $this->assertNull($this->distanceMatrixRequest->getUnitSystem());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:306:        $this->distanceMatrixRequest->setUnitSystem('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:311:        $this->distanceMatrixRequest->setSensor(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:313:        $this->assertTrue($this->distanceMatrixRequest->hasSensor());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:322:        $this->distanceMatrixRequest->setSensor('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:327:        $this->assertFalse($this->distanceMatrixRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:332:        $this->distanceMatrixRequest->addOrigin('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:334:        $this->assertFalse($this->distanceMatrixRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:339:        $this->distanceMatrixRequest->addDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:341:        $this->assertFalse($this->distanceMatrixRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:346:        $this->distanceMatrixRequest->addDestination('foo');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:347:        $this->distanceMatrixRequest->addOrigin('bar');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixRequestTest.php:349:        $this->assertTrue($this->distanceMatrixRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:38:        $this->service = new DistanceMatrix(new CurlHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:46:        unset($this->service);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:51:        $response = $this->service->process(array('Vancouver BC'), array('San Francisco'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:53:        $this->assertSame(DistanceMatrixStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:54:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:55:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:57:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:58:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:60:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:61:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:62:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:67:        $vancouver = new Coordinate(49.262428, -123.113136);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:68:        $sanFrancisco = new Coordinate(37.775328, -122.418938);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:70:        $response = $this->service->process(array($vancouver), array($sanFrancisco));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:72:        $this->assertSame(DistanceMatrixStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:73:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:74:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:76:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:77:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:79:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:80:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:81:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:87:        $request->addOrigin('Vancouver BC');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:88:        $request->addDestination('San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:90:        $response = $this->service->process($request);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:91:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:92:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:94:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:95:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:97:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:98:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:99:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:105:        $request->addOrigin('Vancouver BC');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:106:        $request->addDestination('San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:107:        $request->setTravelMode(TravelMode::BICYCLING);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:108:        $request->setUnitSystem(UnitSystem::METRIC);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:109:        $request->setRegion('en');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:110:        $request->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:112:        $response = $this->service->process($request);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:113:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:114:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:116:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:117:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:119:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:120:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:121:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:127:        $request->addOrigin('Vancouver BC');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:128:        $request->addDestination('San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:129:        $request->setAvoidTolls(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:131:        $response = $this->service->process($request);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:132:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:133:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:135:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:136:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:138:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:139:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:140:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:146:        $request->addOrigin('Vancouver BC');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:147:        $request->addDestination('San Francisco');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:148:        $request->setAvoidHighways(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:150:        $response = $this->service->process($request);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:151:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:152:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:154:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:155:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:157:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:158:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:159:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:164:        $this->service->setFormat('xml');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:165:        $response = $this->service->process(array('Vancouver BC'), array('San Francisco'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:167:        $this->assertSame(DistanceMatrixStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:168:        $this->assertCount(1, $response->getOrigins());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:169:        $this->assertCount(1, $response->getDestinations());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:171:        $rows = $response->getRows();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:172:        $this->assertCount(1, $rows);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:174:        $elements = $rows[0]->getElements();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:175:        $this->assertCount(1, $elements);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:176:        $this->assertSame(DistanceMatrixElementStatus::OK, $elements[0]->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:181:        $method = new \ReflectionMethod($this->service, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:182:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:186:        $this->assertSame($url, $method->invoke($this->service, $url));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:193:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:194:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:195:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:198:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:199:            ->method('signUrl')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:200:            ->with($this->equalTo($url))
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:201:            ->will($this->returnValue('url'));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:203:        $this->service->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:205:        $method = new \ReflectionMethod($this->service, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:206:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:208:        $this->assertSame('url', $method->invoke($this->service, $url));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:215:     * - function route(array $origins, array $destinations)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:216:     * - function route(Ivory\GoogleMap\Services\DistanceMatrix\DistanceMatrixRequest $request)
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:220:        $this->service->process(true);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:229:        $this->service->process(new DistanceMatrixRequest());
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:238:        $httpAdapterMock = $this->getMock('Widop\HttpAdapter\HttpAdapterInterface');
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:240:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:241:            ->method('getContent')
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:242:            ->will($this->returnValue(null));
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:244:        $this->service = new DistanceMatrix($httpAdapterMock);
./tests/Ivory/Tests/GoogleMap/Services/DistanceMatrix/DistanceMatrixTest.php:245:        $this->service->process(array('Vancouver BC'), array('San Francisco'));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:34:        $this->geocoderProvider = new GeocoderProvider(new CurlHttpAdapter());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:42:        unset($this->geocoderProvider);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:47:        $this->assertSame('http://maps.googleapis.com/maps/api/geocode', $this->geocoderProvider->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:48:        $this->assertFalse($this->geocoderProvider->isHttps());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:49:        $this->assertSame('json', $this->geocoderProvider->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:50:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Utils\XmlParser', $this->geocoderProvider->getXmlParser());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:51:        $this->assertFalse($this->geocoderProvider->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:52:        $this->assertNull($this->geocoderProvider->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:57:        $this->geocoderProvider->setUrl('http://foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:59:        $this->assertSame('http://foo', $this->geocoderProvider->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:68:        $this->geocoderProvider->setUrl(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:73:        $this->geocoderProvider->setHttps(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:75:        $this->assertTrue($this->geocoderProvider->isHttps());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:84:        $this->geocoderProvider->setHttps('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:89:        $this->geocoderProvider->setUrl('http://foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:90:        $this->geocoderProvider->setHttps(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:92:        $this->assertSame('https://foo', $this->geocoderProvider->getUrl());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:97:        $this->geocoderProvider->setFormat('json');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:99:        $this->assertSame('json', $this->geocoderProvider->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:104:        $this->geocoderProvider->setFormat('xml');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:106:        $this->assertSame('xml', $this->geocoderProvider->getFormat());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:115:        $this->geocoderProvider->setFormat('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:120:        $xmlParser = $this->getMock('Ivory\GoogleMap\Services\Utils\XmlParser');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:121:        $this->geocoderProvider->setXmlParser($xmlParser);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:123:        $this->assertSame($xmlParser, $this->geocoderProvider->getXmlParser());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:128:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:129:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:130:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:132:        $this->geocoderProvider->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:134:        $this->assertTrue($this->geocoderProvider->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:135:        $this->assertSame($businessAccount, $this->geocoderProvider->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:137:        $this->geocoderProvider->setBusinessAccount();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:139:        $this->assertFalse($this->geocoderProvider->hasBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:140:        $this->assertNull($this->geocoderProvider->getBusinessAccount());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:145:        $response = $this->geocoderProvider->getGeocodedData('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:147:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResponse', $response);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:149:        $this->assertNotEmpty($response->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:150:        $this->assertSame(GeocoderStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:155:        $response = $this->geocoderProvider->getGeocodedData('111.111.111.111');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:157:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResponse', $response);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:159:        $this->assertNotEmpty($response->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:160:        $this->assertSame(GeocoderStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:166:        $request->setAddress('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:167:        $request->setBound(48.815573, 2.224199, 48.9021449, 2.4699208);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:168:        $request->setRegion('FR');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:169:        $request->setLanguage('PL');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:171:        $response = $this->geocoderProvider->getGeocodedData($request);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:173:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResponse', $response);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:175:        $this->assertNotEmpty($response->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:176:        $this->assertSame(GeocoderStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:181:        $this->geocoderProvider->setFormat('xml');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:182:        $response = $this->geocoderProvider->getGeocodedData('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:184:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResponse', $response);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:186:        $this->assertNotEmpty($response->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:187:        $this->assertSame(GeocoderStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:194:     * - function geocode(string $address)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:195:     * - function geocode(Ivory\GoogleMap\Services\Geocoding\GeocoderRequest $request)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:199:        $this->geocoderProvider->getGeocodedData(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:210:        $this->geocoderProvider->getGeocodedData($request);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:219:        $httpAdapterMock = $this->getMock('Geocoder\HttpAdapter\HttpAdapterInterface');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:221:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:222:            ->method('getContent')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:223:            ->will($this->returnValue(null));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:225:        $this->geocoderProvider = new GeocoderProvider($httpAdapterMock);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:226:        $this->geocoderProvider->getGeocodedData('Paris');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:231:        $response = $this->geocoderProvider->getReversedData(array(48.856633, 2.352254));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:233:        $this->assertInstanceOf('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResponse', $response);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:235:        $this->assertNotEmpty($response->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:236:        $this->assertSame(GeocoderStatus::OK, $response->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:241:        $method = new \ReflectionMethod($this->geocoderProvider, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:242:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:246:        $this->assertSame($url, $method->invoke($this->geocoderProvider, $url));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:253:        $businessAccount = $this->getMockBuilder('Ivory\GoogleMap\Services\BusinessAccount')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:254:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:255:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:258:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:259:            ->method('signUrl')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:260:            ->with($this->equalTo($url))
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:261:            ->will($this->returnValue('url'));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:263:        $this->geocoderProvider->setBusinessAccount($businessAccount);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:265:        $method = new \ReflectionMethod($this->geocoderProvider, 'signUrl');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:266:        $method->setAccessible(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:268:        $this->assertSame('url', $method->invoke($this->geocoderProvider, $url));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderProviderTest.php:273:        $this->assertSame('ivory_google_map', $this->geocoderProvider->getName());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:31:        $this->geocoderRequest = new GeocoderRequest();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:39:        unset($this->geocoderRequest);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:44:        $this->assertFalse($this->geocoderRequest->hasAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:45:        $this->assertFalse($this->geocoderRequest->hasCoordinate());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:46:        $this->assertFalse($this->geocoderRequest->hasBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:47:        $this->assertFalse($this->geocoderRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:48:        $this->assertFalse($this->geocoderRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:49:        $this->assertFalse($this->geocoderRequest->hasSensor());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:54:        $this->geocoderRequest->setAddress('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:56:        $this->assertTrue($this->geocoderRequest->hasAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:57:        $this->assertSame('foo', $this->geocoderRequest->getAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:62:        $this->geocoderRequest->setAddress('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:63:        $this->geocoderRequest->setAddress(null);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:65:        $this->assertNull($this->geocoderRequest->getAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:74:        $this->geocoderRequest->setAddress(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:79:        $coordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:81:        $this->geocoderRequest->setCoordinate($coordinate);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:83:        $this->assertTrue($this->geocoderRequest->hasCoordinate());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:84:        $this->assertSame($coordinate, $this->geocoderRequest->getCoordinate());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:89:        $this->geocoderRequest->setCoordinate(1.1, -2.1, false);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:91:        $this->assertSame(1.1, $this->geocoderRequest->getCoordinate()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:92:        $this->assertSame(-2.1, $this->geocoderRequest->getCoordinate()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:93:        $this->assertFalse($this->geocoderRequest->getCoordinate()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:98:        $this->geocoderRequest->setCoordinate(1.1, -2.1);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:99:        $this->geocoderRequest->setCoordinate(null);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:101:        $this->assertNull($this->geocoderRequest->getCoordinate());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:108:     * - function setCoordinate(Ivory\GoogleMap\Base\Coordinate $coordinate = null)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:109:     * - function setCoordinate(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:113:        $this->geocoderRequest->setCoordinate('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:118:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:119:        $this->geocoderRequest->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:121:        $this->assertTrue($this->geocoderRequest->hasBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:122:        $this->assertSame($bound, $this->geocoderRequest->getBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:127:        $southWest = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:128:        $northEast = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:130:        $this->geocoderRequest->setBound($southWest, $northEast);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:132:        $this->assertSame($southWest, $this->geocoderRequest->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:133:        $this->assertSame($northEast, $this->geocoderRequest->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:138:        $this->geocoderRequest->setBound(-2, -2, 2, 2, true, false);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:140:        $this->assertSame(-2, $this->geocoderRequest->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:141:        $this->assertSame(-2, $this->geocoderRequest->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:142:        $this->assertTrue($this->geocoderRequest->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:144:        $this->assertSame(2, $this->geocoderRequest->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:145:        $this->assertSame(2, $this->geocoderRequest->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:146:        $this->assertFalse($this->geocoderRequest->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:151:        $this->geocoderRequest->setBound(-2, -2, 2, 2);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:152:        $this->geocoderRequest->setBound(null);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:154:        $this->assertNull($this->geocoderRequest->getBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:161:     * - function setBound(Ivory\GoogleMap\Base\Bound $bound = null)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:162:     * - function setBound(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:163:     * - function setBound(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:174:        $this->geocoderRequest->setBound('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:179:        $this->geocoderRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:181:        $this->assertTrue($this->geocoderRequest->hasRegion());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:182:        $this->assertSame('fr', $this->geocoderRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:187:        $this->geocoderRequest->setRegion('fr');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:188:        $this->geocoderRequest->setRegion(null);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:190:        $this->assertNull($this->geocoderRequest->getRegion());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:199:        $this->geocoderRequest->setRegion('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:204:        $this->geocoderRequest->setLanguage('pl');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:206:        $this->assertTrue($this->geocoderRequest->hasLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:207:        $this->assertSame('pl', $this->geocoderRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:212:        $this->geocoderRequest->setLanguage('pl');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:213:        $this->geocoderRequest->setLanguage(null);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:215:        $this->assertNull($this->geocoderRequest->getLanguage());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:224:        $this->geocoderRequest->setLanguage('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:229:        $this->geocoderRequest->setSensor(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:231:        $this->assertTrue($this->geocoderRequest->hasSensor());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:240:        $this->geocoderRequest->setSensor('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:245:        $this->assertFalse($this->geocoderRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:250:        $this->geocoderRequest->setAddress('address');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:252:        $this->assertTrue($this->geocoderRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:257:        $this->geocoderRequest->setCoordinate(1, 1);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderRequestTest.php:259:        $this->assertTrue($this->geocoderRequest->isValid());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:46:        $addressComponent = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderAddressComponent')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:47:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:48:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:50:        $this->addressComponents = array($addressComponent);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:51:        $this->formattedAddress = 'formattedAddress';
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:53:        $this->geometry = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderGeometry')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:54:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:55:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:57:        $this->partialMatch = true;
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:58:        $this->types = array('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:60:        $this->geocoderResult = new GeocoderResult(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:61:            $this->addressComponents,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:62:            $this->formattedAddress,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:63:            $this->geometry,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:64:            $this->types,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:65:            $this->partialMatch
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:74:        unset($this->geocoderResult);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:75:        unset($this->addressComponents);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:76:        unset($this->geometry);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:77:        unset($this->types);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:78:        unset($this->partialMatch);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:83:        $this->assertSame($this->addressComponents, $this->geocoderResult->getAddressComponents());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:84:        $this->assertSame($this->formattedAddress, $this->geocoderResult->getFormattedAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:85:        $this->assertSame($this->geometry, $this->geocoderResult->getGeometry());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:86:        $this->assertSame($this->types, $this->geocoderResult->getTypes());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:87:        $this->assertSame($this->partialMatch, $this->geocoderResult->isPartialMatch());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:92:        $addressComponent = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderAddressComponent')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:93:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:94:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:98:        $this->geocoderResult->setAddressComponents($addressComponents);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:100:        $this->assertSame($addressComponents, $this->geocoderResult->getAddressComponents());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:105:        $addressComponent = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderAddressComponent')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:106:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:107:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:110:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:111:            ->method('getTypes')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:112:            ->will($this->returnValue(array('foo')));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:116:        $this->geocoderResult->setAddressComponents($addressComponents);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:118:        $this->assertSame($addressComponents, $this->geocoderResult->getAddressComponents('foo'));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:119:        $this->assertEmpty($this->geocoderResult->getAddressComponents('bar'));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:124:        $this->geocoderResult->setFormattedAddress('formatted_address');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:126:        $this->assertSame('formatted_address', $this->geocoderResult->getFormattedAddress());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:135:        $this->geocoderResult->setFormattedAddress(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:140:        $geometry = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderGeometry')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:141:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:142:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:144:        $this->geocoderResult->setGeometry($geometry);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:146:        $this->assertSame($geometry, $this->geocoderResult->getGeometry());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:151:        $this->geocoderResult->setPartialMatch(false);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:153:        $this->assertFalse($this->geocoderResult->isPartialMatch());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:162:        $this->geocoderResult->setPartialMatch('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:168:        $this->geocoderResult->setTypes($types);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:170:        $this->assertSame($types, $this->geocoderResult->getTypes());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResultTest.php:179:        $this->geocoderResult->addType(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:38:        $geocoderResult = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResult')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:39:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:40:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:42:        $this->results = array($geocoderResult);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:43:        $this->status = GeocoderStatus::REQUEST_DENIED;
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:45:        $this->geocoderResponse = new GeocoderResponse($this->results, $this->status);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:53:        unset($this->geocoderResponse);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:54:        unset($this->results);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:55:        unset($this->status);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:60:        $this->assertSame($this->results, $this->geocoderResponse->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:61:        $this->assertSame($this->status, $this->geocoderResponse->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:66:        $geocoderResult = $this->getMockBuilder('Ivory\GoogleMap\Services\Geocoding\Result\GeocoderResult')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:67:            ->disableOriginalConstructor()
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:68:            ->getMock();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:72:        $this->geocoderResponse->setResults($results);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:74:        $this->assertSame($results, $this->geocoderResponse->getResults());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:79:        $this->geocoderResponse->setStatus(GeocoderStatus::ERROR);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:81:        $this->assertSame(GeocoderStatus::ERROR, $this->geocoderResponse->getStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderResponseTest.php:91:        $this->geocoderResponse->setStatus('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderLocationTypeTest.php:32:        $this->assertSame($expected, GeocoderLocationType::getGeocoderLocationTypes());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:40:        $this->longName = 'long_name';
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:41:        $this->shortName = 'short_name';
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:42:        $this->types = array('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:44:        $this->geocoderAddressComponent = new GeocoderAddressComponent(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:45:            $this->longName,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:46:            $this->shortName,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:47:            $this->types
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:56:        unset($this->geocoderAddressComponent);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:57:        unset($this->longName);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:58:        unset($this->shortName);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:59:        unset($this->types);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:64:        $this->assertSame($this->longName, $this->geocoderAddressComponent->getLongName());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:65:        $this->assertSame($this->shortName, $this->geocoderAddressComponent->getShortName());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:66:        $this->assertSame($this->types, $this->geocoderAddressComponent->getTypes());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:71:        $this->geocoderAddressComponent->setLongName('longname');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:73:        $this->assertSame('longname', $this->geocoderAddressComponent->getLongName());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:82:        $this->geocoderAddressComponent->setLongName(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:87:        $this->geocoderAddressComponent->setShortName('shortname');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:89:        $this->assertSame('shortname', $this->geocoderAddressComponent->getShortName());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:98:        $this->geocoderAddressComponent->setShortName(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:104:        $this->geocoderAddressComponent->setTypes($types);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:106:        $this->assertSame($types, $this->geocoderAddressComponent->getTypes());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderAddressComponentTest.php:115:        $this->geocoderAddressComponent->addType(true);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:44:        $this->location = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:45:        $this->locationType = GeocoderLocationType::RANGE_INTERPOLATED;
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:46:        $this->viewport = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:47:        $this->bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:49:        $this->geocoderGeometry = new GeocoderGeometry(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:50:            $this->location,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:51:            $this->locationType,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:52:            $this->viewport,
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:53:            $this->bound
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:59:        unset($this->geocoderGeometry);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:60:        unset($this->location);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:61:        unset($this->locationType);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:62:        unset($this->viewport);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:63:        unset($this->bound);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:68:        $this->assertSame($this->location, $this->geocoderGeometry->getLocation());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:69:        $this->assertSame($this->locationType, $this->geocoderGeometry->getLocationType());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:70:        $this->assertSame($this->viewport, $this->geocoderGeometry->getViewport());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:71:        $this->assertSame($this->bound, $this->geocoderGeometry->getBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:76:        $location = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:77:        $this->geocoderGeometry->setLocation($location);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:79:        $this->assertSame($location, $this->geocoderGeometry->getLocation());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:84:        $this->geocoderGeometry->setLocationType(GeocoderLocationType::GEOMETRIC_CENTER);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:86:        $this->assertSame(GeocoderLocationType::GEOMETRIC_CENTER, $this->geocoderGeometry->getLocationType());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:96:        $this->geocoderGeometry->setLocationType('foo');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:101:        $viewport = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:102:        $this->geocoderGeometry->setViewport($viewport);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:104:        $this->assertSame($viewport, $this->geocoderGeometry->getViewport());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:109:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:110:        $this->geocoderGeometry->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderGeometryTest.php:112:        $this->assertSame($bound, $this->geocoderGeometry->getBound());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/Result/GeocoderStatusTest.php:35:        $this->assertSame($expected, GeocoderStatus::getGeocoderStatus());
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:34:        $this->geocoder = new Geocoder();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:42:        $this->geocoder->registerProvider(new GoogleMapsProvider(new CurlHttpAdapter()));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:50:        $this->geocoder->registerProvider(new GeocoderProvider(new CurlHttpAdapter()));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:58:        unset($this->geocoder);
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:63:        $this->setUpGeocoderProvider();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:65:        $this->assertInstanceOf('Geocoder\Result\Geocoded', $this->geocoder->geocode('Paris'));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:70:        $this->setUpIvoryProvider();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:72:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:74:            $this->geocoder->geocode('Paris')
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:80:        $this->setUpGeocoderProvider();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:82:        $this->assertInstanceOf('Geocoder\Result\Geocoded', $this->geocoder->reverse(48.856633, 2.352254));
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:87:        $this->setUpIvoryProvider();
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:89:        $this->assertInstanceOf(
./tests/Ivory/Tests/GoogleMap/Services/Geocoding/GeocoderTest.php:91:            $this->geocoder->reverse(48.856633, 2.352254)
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:33:        $this->autocomplete = new Autocomplete();
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:41:        unset($this->autocomplete);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:46:        $this->assertSame('place_input', $this->autocomplete->getInputId());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:47:        $this->assertFalse($this->autocomplete->hasBound());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:48:        $this->assertFalse($this->autocomplete->hasTypes());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:49:        $this->assertFalse($this->autocomplete->hasComponentRestrictions());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:50:        $this->assertFalse($this->autocomplete->hasValue());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:51:        $this->assertSame(array('type' => 'text', 'placeholder' => 'off'), $this->autocomplete->getInputAttributes());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:52:        $this->assertFalse($this->autocomplete->isAsync());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:53:        $this->assertSame('en', $this->autocomplete->getLanguage());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:58:        $this->autocomplete->setInputId('input');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:60:        $this->assertSame('input', $this->autocomplete->getInputId());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:69:        $this->autocomplete->setInputId(true);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:74:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:75:        $this->autocomplete->setBound($bound);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:77:        $this->assertSame($bound, $this->autocomplete->getBound());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:82:        $southWestCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:83:        $northEastCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:85:        $this->autocomplete->setBound($southWestCoordinate, $northEastCoordinate);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:87:        $this->assertSame($southWestCoordinate, $this->autocomplete->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:88:        $this->assertSame($northEastCoordinate, $this->autocomplete->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:93:        $this->autocomplete->setBound(1, 2, 3, 4, true, false);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:95:        $this->assertSame(1, $this->autocomplete->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:96:        $this->assertSame(2, $this->autocomplete->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:97:        $this->assertTrue($this->autocomplete->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:99:        $this->assertEquals(3, $this->autocomplete->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:100:        $this->assertEquals(4, $this->autocomplete->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:101:        $this->assertFalse($this->autocomplete->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:106:        $this->autocomplete->setBound(1, 2, 3, 4);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:107:        $this->autocomplete->setBound(null);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:109:        $this->assertNull($this->autocomplete->getBound());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:116:     * - function setBound(Ivory\GoogleMap\Base\Bound $bound)
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:117:     * - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:118:     * - function setBound(
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:129:        $this->autocomplete->setBound('foo');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:135:        $this->autocomplete->setTypes($types);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:137:        $this->assertSame($types, $this->autocomplete->getTypes());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:139:        $this->assertTrue($this->autocomplete->hasTypes());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:140:        $this->assertTrue($this->autocomplete->hasType(AutocompleteType::ESTABLISHMENT));
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:149:        $this->autocomplete->addType('foo');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:158:        $this->autocomplete->addType(AutocompleteType::ESTABLISHMENT);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:159:        $this->autocomplete->addType(AutocompleteType::ESTABLISHMENT);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:164:        $this->autocomplete->addType(AutocompleteType::ESTABLISHMENT);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:165:        $this->autocomplete->removeType(AutocompleteType::ESTABLISHMENT);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:167:        $this->assertFalse($this->autocomplete->hasType(AutocompleteType::ESTABLISHMENT));
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:176:        $this->autocomplete->removeType(AutocompleteType::ESTABLISHMENT);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:182:        $this->autocomplete->setComponentRestrictions($componentRestrictions);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:184:        $this->assertSame($componentRestrictions, $this->autocomplete->getComponentRestrictions());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:186:        $this->assertTrue($this->autocomplete->hasComponentRestrictions());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:187:        $this->assertSame($componentRestrictions, $this->autocomplete->getComponentRestrictions());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:189:        $this->assertTrue($this->autocomplete->hasComponentRestriction(AutocompleteComponentRestriction::COUNTRY));
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:190:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:192:            $this->autocomplete->getComponentRestriction(AutocompleteComponentRestriction::COUNTRY)
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:202:        $this->autocomplete->getComponentRestriction(AutocompleteComponentRestriction::COUNTRY);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:211:        $this->autocomplete->addComponentRestriction('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:220:        $this->autocomplete->addComponentRestriction(AutocompleteComponentRestriction::COUNTRY, 'foo');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:221:        $this->autocomplete->addComponentRestriction(AutocompleteComponentRestriction::COUNTRY, 'bar');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:226:        $this->autocomplete->addComponentRestriction(AutocompleteComponentRestriction::COUNTRY, 'foo');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:227:        $this->autocomplete->removeComponentRestriction(AutocompleteComponentRestriction::COUNTRY);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:229:        $this->assertFalse($this->autocomplete->hasComponentRestriction(AutocompleteComponentRestriction::COUNTRY));
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:238:        $this->autocomplete->removeComponentRestriction(AutocompleteComponentRestriction::COUNTRY);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:243:        $this->autocomplete->setInputAttributes(array('foo' => 'bar'));
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:245:        $inputAttributes = $this->autocomplete->getInputAttributes();
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:247:        $this->assertArrayHasKey('foo', $inputAttributes);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:248:        $this->assertSame('bar', $inputAttributes['foo']);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:253:        $this->autocomplete->setInputAttribute('foo', 'bar');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:254:        $this->autocomplete->setInputAttribute('foo', null);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:256:        $this->assertArrayNotHasKey('foo', $this->autocomplete->getInputAttributes());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:261:        $this->autocomplete->setAsync(true);
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:263:        $this->assertTrue($this->autocomplete->isAsync());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:272:        $this->autocomplete->setAsync('foo');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:277:        $this->autocomplete->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTest.php:279:        $this->assertSame('fr', $this->autocomplete->getLanguage());
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteTypeTest.php:25:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Places/AutocompleteComponentRestrictionTest.php:25:        $this->assertSame(
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:31:        $this->size = new Size();
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:39:        unset($this->size);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:44:        $this->assertSame('size_', substr($this->size->getJavascriptVariable(), 0, 5));
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:46:        $this->assertSame(1, $this->size->getWidth());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:47:        $this->assertSame(1, $this->size->getHeight());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:49:        $this->assertFalse($this->size->hasUnits());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:50:        $this->assertNull($this->size->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:51:        $this->assertNull($this->size->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:56:        $this->size = new Size(2, 3, 'px', '%');
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:58:        $this->assertSame(2, $this->size->getWidth());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:59:        $this->assertSame(3, $this->size->getHeight());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:61:        $this->assertTrue($this->size->hasUnits());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:62:        $this->assertSame('px', $this->size->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:63:        $this->assertSame('%', $this->size->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:68:        $this->size->setWidth(2);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:70:        $this->assertSame(2, $this->size->getWidth());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:79:        $this->size->setWidth(true);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:84:        $this->size->setHeight(2);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:86:        $this->assertSame(2, $this->size->getHeight());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:95:        $this->size->setHeight(true);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:100:        $this->size->setWidthUnit('px');
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:102:        $this->assertSame('px', $this->size->getWidthUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:111:        $this->size->setWidthUnit(true);
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:116:        $this->size->setHeightUnit('px');
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:118:        $this->assertSame('px', $this->size->getHeightUnit());
./tests/Ivory/Tests/GoogleMap/Base/SizeTest.php:127:        $this->size->setHeightUnit(true);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:31:        $this->bound = new Bound();
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:39:        unset($this->bound);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:44:        $this->assertSame('bound_', substr($this->bound->getJavascriptVariable(), 0, 6));
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:45:        $this->assertFalse($this->bound->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:46:        $this->assertFalse($this->bound->hasExtends());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:51:        $southWest = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:52:        $northEast = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:53:        $extends = array($this->getMock('Ivory\GoogleMap\Overlays\ExtendableInterface'));
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:55:        $this->bound = new Bound($southWest, $northEast, $extends);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:57:        $this->assertTrue($this->bound->hasCoordinates());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:58:        $this->assertSame($southWest, $this->bound->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:59:        $this->assertSame($northEast, $this->bound->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:61:        $this->assertTrue($this->bound->hasExtends());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:62:        $this->assertSame($extends, $this->bound->getExtends());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:67:        $southWest = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:68:        $this->bound->setSouthWest($southWest);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:70:        $this->assertSame($southWest, $this->bound->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:75:        $this->bound->setSouthWest(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:77:        $this->assertSame(1, $this->bound->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:78:        $this->assertSame(2, $this->bound->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:79:        $this->assertFalse($this->bound->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:84:        $this->bound->setSouthWest(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:85:        $this->bound->setSouthWest(null);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:87:        $this->assertNull($this->bound->getSouthWest());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:95:     *  - function setSouthWest(Ivory\GoogleMap\Base\Coordinate $southWest)
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:96:     *  - function setSouthWest(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:100:        $this->bound->setSouthWest('foo');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:105:        $northEast = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:106:        $this->bound->setNorthEast($northEast);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:108:        $this->assertSame($northEast, $this->bound->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:113:        $this->bound->setNorthEast(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:115:        $this->assertSame(1, $this->bound->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:116:        $this->assertSame(2, $this->bound->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:117:        $this->assertFalse($this->bound->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:122:        $this->bound->setNorthEast(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:123:        $this->bound->setNorthEast(null);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:125:        $this->assertNull($this->bound->getNorthEast());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:133:     *  - function setNorthEast(Ivory\GoogleMap\Base\Coordinate $northEast)
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:134:     *  - function setNorthEast(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:138:        $this->bound->setNorthEast('foo');
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:143:        $this->bound->setSouthWest(-1, 0, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:144:        $this->bound->setNorthEast(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:146:        $center = $this->bound->getCenter();
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:148:        $this->assertSame(0, $center->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:149:        $this->assertSame(1, $center->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/BoundTest.php:150:        $this->assertTrue($center->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:31:        $this->point = new Point();
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:39:        unset($this->point);
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:44:        $this->assertSame('point_', substr($this->point->getJavascriptVariable(), 0, 6));
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:45:        $this->assertSame(0, $this->point->getX());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:46:        $this->assertSame(0, $this->point->getY());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:51:        $this->point = new Point(1, 2);
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:53:        $this->assertSame(1, $this->point->getX());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:54:        $this->assertSame(2, $this->point->getY());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:59:        $this->point->setX(1);
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:61:        $this->assertSame(1, $this->point->getX());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:70:        $this->point->setX(true);
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:75:        $this->point->setY(1);
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:77:        $this->assertSame(1, $this->point->getY());
./tests/Ivory/Tests/GoogleMap/Base/PointTest.php:86:        $this->point->setY(true);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:31:        $this->coordinate = new Coordinate();
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:39:        unset($this->coordinate);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:44:        $this->assertSame('coordinate_', substr($this->coordinate->getJavascriptVariable(), 0, 11));
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:45:        $this->assertSame(0, $this->coordinate->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:46:        $this->assertSame(0, $this->coordinate->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:47:        $this->assertTrue($this->coordinate->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:52:        $this->coordinate = new Coordinate(1, 2, false);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:54:        $this->assertSame(1, $this->coordinate->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:55:        $this->assertSame(2, $this->coordinate->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:56:        $this->assertFalse($this->coordinate->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:61:        $this->coordinate->setLatitude(1);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:62:        $this->assertSame(1, $this->coordinate->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:67:        $this->coordinate->setLatitude(null);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:68:        $this->assertNull($this->coordinate->getLatitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:77:        $this->coordinate->setLatitude(true);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:82:        $this->coordinate->setLongitude(1);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:83:        $this->assertSame(1, $this->coordinate->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:88:        $this->coordinate->setLongitude(null);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:89:        $this->assertNull($this->coordinate->getLongitude());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:98:        $this->coordinate->setLongitude(true);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:103:        $this->coordinate->setNoWrap(false);
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:104:        $this->assertFalse($this->coordinate->isNoWrap());
./tests/Ivory/Tests/GoogleMap/Base/CoordinateTest.php:113:        $this->coordinate->setNoWrap('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:36:        $this->map = new Map();
./tests/Ivory/Tests/GoogleMap/MapTest.php:44:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/MapTest.php:46:            ->expects($this->any())
./tests/Ivory/Tests/GoogleMap/MapTest.php:47:            ->method('hasCoordinates')
./tests/Ivory/Tests/GoogleMap/MapTest.php:48:            ->will($this->returnValue(true));
./tests/Ivory/Tests/GoogleMap/MapTest.php:50:        $this->map->setBound($bound);
./tests/Ivory/Tests/GoogleMap/MapTest.php:58:        unset($this->map);
./tests/Ivory/Tests/GoogleMap/MapTest.php:63:        $this->assertSame('map_canvas', $this->map->getHtmlContainerId());
./tests/Ivory/Tests/GoogleMap/MapTest.php:64:        $this->assertFalse($this->map->isAsync());
./tests/Ivory/Tests/GoogleMap/MapTest.php:65:        $this->assertFalse($this->map->isAutoZoom());
./tests/Ivory/Tests/GoogleMap/MapTest.php:67:        $this->assertSame($this->map->getCenter()->getLatitude(), 0);
./tests/Ivory/Tests/GoogleMap/MapTest.php:68:        $this->assertSame($this->map->getCenter()->getLongitude(), 0);
./tests/Ivory/Tests/GoogleMap/MapTest.php:69:        $this->assertTrue($this->map->getCenter()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/MapTest.php:71:        $this->assertNull($this->map->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/MapTest.php:72:        $this->assertNull($this->map->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/MapTest.php:73:        $this->assertEmpty($this->map->getBound()->getExtends());
./tests/Ivory/Tests/GoogleMap/MapTest.php:75:        $this->assertSame(array('mapTypeId' => 'roadmap','zoom' => 3), $this->map->getMapOptions());
./tests/Ivory/Tests/GoogleMap/MapTest.php:76:        $this->assertSame(array('width' => '300px', 'height' => '300px'), $this->map->getStylesheetOptions());
./tests/Ivory/Tests/GoogleMap/MapTest.php:78:        $this->assertFalse($this->map->hasMapTypeControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:79:        $this->assertFalse($this->map->hasOverviewMapControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:80:        $this->assertFalse($this->map->hasPanControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:81:        $this->assertFalse($this->map->hasRotateControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:82:        $this->assertFalse($this->map->hasScaleControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:83:        $this->assertFalse($this->map->hasStreetViewControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:84:        $this->assertFalse($this->map->hasZoomControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:86:        $this->assertInstanceOf('Ivory\GoogleMap\Events\EventManager', $this->map->getEventManager());
./tests/Ivory/Tests/GoogleMap/MapTest.php:87:        $this->assertInstanceOf('Ivory\GoogleMap\Overlays\MarkerCluster', $this->map->getMarkerCluster());
./tests/Ivory/Tests/GoogleMap/MapTest.php:89:        $this->assertEmpty($this->map->getMarkers());
./tests/Ivory/Tests/GoogleMap/MapTest.php:90:        $this->assertEmpty($this->map->getInfoWindows());
./tests/Ivory/Tests/GoogleMap/MapTest.php:91:        $this->assertEmpty($this->map->getPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:92:        $this->assertEmpty($this->map->getPolygons());
./tests/Ivory/Tests/GoogleMap/MapTest.php:93:        $this->assertEmpty($this->map->getEncodedPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:94:        $this->assertEmpty($this->map->getRectangles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:95:        $this->assertEmpty($this->map->getCircles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:96:        $this->assertEmpty($this->map->getGroundOverlays());
./tests/Ivory/Tests/GoogleMap/MapTest.php:98:        $this->assertEmpty($this->map->getKMLLayers());
./tests/Ivory/Tests/GoogleMap/MapTest.php:100:        $this->assertFalse($this->map->hasLibraries());
./tests/Ivory/Tests/GoogleMap/MapTest.php:101:        $this->assertSame('en', $this->map->getLanguage());
./tests/Ivory/Tests/GoogleMap/MapTest.php:106:        $this->map->setHtmlContainerId('html_container_id');
./tests/Ivory/Tests/GoogleMap/MapTest.php:108:        $this->assertSame('html_container_id', $this->map->getHtmlContainerId());
./tests/Ivory/Tests/GoogleMap/MapTest.php:117:        $this->map->setHtmlContainerId(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:122:        $this->map->setAsync(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:124:        $this->assertTrue($this->map->isAsync());
./tests/Ivory/Tests/GoogleMap/MapTest.php:133:        $this->map->setAsync('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:138:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:140:        $this->assertTrue($this->map->isAutoZoom());
./tests/Ivory/Tests/GoogleMap/MapTest.php:149:        $this->map->setAutoZoom('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:154:        $coordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/MapTest.php:155:        $this->map->setCenter($coordinate);
./tests/Ivory/Tests/GoogleMap/MapTest.php:157:        $this->assertSame($coordinate, $this->map->getCenter());
./tests/Ivory/Tests/GoogleMap/MapTest.php:162:        $this->map->setCenter(1, 2, false);
./tests/Ivory/Tests/GoogleMap/MapTest.php:164:        $this->assertEquals(1, $this->map->getCenter()->getLatitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:165:        $this->assertEquals(2, $this->map->getCenter()->getLongitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:166:        $this->assertFalse($this->map->getCenter()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/MapTest.php:173:     * - function setCenter(Ivory\GoogleMap\Base\Coordinate $center)
./tests/Ivory/Tests/GoogleMap/MapTest.php:174:     * - function setCenter(double $latitude, double $longitude, boolean $noWrap = true)
./tests/Ivory/Tests/GoogleMap/MapTest.php:178:        $this->map->setCenter('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:183:        $bound = $this->getMock('Ivory\GoogleMap\Base\Bound');
./tests/Ivory/Tests/GoogleMap/MapTest.php:184:        $this->map->setBound($bound);
./tests/Ivory/Tests/GoogleMap/MapTest.php:186:        $this->assertSame($bound, $this->map->getBound());
./tests/Ivory/Tests/GoogleMap/MapTest.php:191:        $southWestCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/MapTest.php:192:        $northEastCoordinate = $this->getMock('Ivory\GoogleMap\Base\Coordinate');
./tests/Ivory/Tests/GoogleMap/MapTest.php:194:        $this->map->setBound($southWestCoordinate, $northEastCoordinate);
./tests/Ivory/Tests/GoogleMap/MapTest.php:196:        $this->assertSame($southWestCoordinate, $this->map->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/MapTest.php:197:        $this->assertSame($northEastCoordinate, $this->map->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/MapTest.php:202:        $this->map->setBound(1, 2, 3, 4, true, false);
./tests/Ivory/Tests/GoogleMap/MapTest.php:204:        $this->assertSame(1, $this->map->getBound()->getSouthWest()->getLatitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:205:        $this->assertSame(2, $this->map->getBound()->getSouthWest()->getLongitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:206:        $this->assertTrue($this->map->getBound()->getSouthWest()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/MapTest.php:208:        $this->assertEquals(3, $this->map->getBound()->getNorthEast()->getLatitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:209:        $this->assertEquals(4, $this->map->getBound()->getNorthEast()->getLongitude());
./tests/Ivory/Tests/GoogleMap/MapTest.php:210:        $this->assertFalse($this->map->getBound()->getNorthEast()->isNoWrap());
./tests/Ivory/Tests/GoogleMap/MapTest.php:215:        $this->map->setBound(1, 2, 3, 4);
./tests/Ivory/Tests/GoogleMap/MapTest.php:216:        $this->map->setBound(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:218:        $this->assertNull($this->map->getBound()->getSouthWest());
./tests/Ivory/Tests/GoogleMap/MapTest.php:219:        $this->assertNull($this->map->getBound()->getNorthEast());
./tests/Ivory/Tests/GoogleMap/MapTest.php:226:     * - function setBound(Ivory\GoogleMap\Base\Bound $bound)
./tests/Ivory/Tests/GoogleMap/MapTest.php:227:     * - function setBount(Ivory\GoogleMap\Base\Coordinate $southWest, Ivory\GoogleMap\Base\Coordinate $northEast)
./tests/Ivory/Tests/GoogleMap/MapTest.php:228:     * - function setBound(
./tests/Ivory/Tests/GoogleMap/MapTest.php:239:        $this->map->setBound('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:244:        $this->assertTrue($this->map->hasMapOption('zoom'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:245:        $this->assertFalse($this->map->hasMapOption('foo'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:254:        $this->map->hasMapOption(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:259:        $this->map->setMapOptions(array('foo' => 'bar'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:261:        $this->assertSame('bar', $this->map->getMapOption('foo'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:269:        $this->map->setMapOption(true, false);
./tests/Ivory/Tests/GoogleMap/MapTest.php:277:        $this->map->getMapOption('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:282:        $this->map->removeMapOption('zoom');
./tests/Ivory/Tests/GoogleMap/MapTest.php:284:        $this->assertFalse($this->map->hasMapOption('zoom'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:293:        $this->map->removeMapOption('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:298:        $this->assertTrue($this->map->hasStylesheetOption('width'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:299:        $this->assertFalse($this->map->hasStylesheetOption('foo'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:308:        $this->map->hasStylesheetOption(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:313:        $this->map->setStylesheetOptions(array('foo' => 'bar'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:315:        $this->assertSame('bar', $this->map->getStylesheetOption('foo'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:323:        $this->map->setStylesheetOption(true, false);
./tests/Ivory/Tests/GoogleMap/MapTest.php:331:        $this->map->getStylesheetOption('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:336:        $this->map->removeStylesheetOption('width');
./tests/Ivory/Tests/GoogleMap/MapTest.php:338:        $this->assertFalse($this->map->hasStylesheetOption('width'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:347:        $this->map->removeStylesheetOption('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:352:        $mapTypeControl = $this->getMock('Ivory\GoogleMap\Controls\MapTypeControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:353:        $this->map->setMapTypeControl($mapTypeControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:355:        $this->assertSame($mapTypeControl, $this->map->getMapTypeControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:356:        $this->assertTrue($this->map->getMapOption('mapTypeControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:365:        $this->map->setMapTypeControl($mapTypeIds, $controlPosition, $mapTypeControlStyle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:367:        $this->assertSame($mapTypeIds, $this->map->getMapTypeControl()->getMapTypeIds());
./tests/Ivory/Tests/GoogleMap/MapTest.php:368:        $this->assertSame($controlPosition, $this->map->getMapTypeControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:369:        $this->assertSame($mapTypeControlStyle, $this->map->getMapTypeControl()->getMapTypeControlStyle());
./tests/Ivory/Tests/GoogleMap/MapTest.php:371:        $this->assertTrue($this->map->getMapOption('mapTypeControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:376:        $this->map->setMapTypeControl($this->getMock('Ivory\GoogleMap\Controls\MapTypeControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:377:        $this->map->setMapTypeControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:379:        $this->assertNull($this->map->getMapTypeControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:380:        $this->assertFalse($this->map->hasMapOption('mapTypeControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:387:     * - function setMapTypeControl(Ivory\GoogleMap\Controls\MapTypeControl $mapTypeControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:388:     * - function setMaptypeControl(array $mapTypeIds, string $controlPosition, string $mapTypeControlStyle)
./tests/Ivory/Tests/GoogleMap/MapTest.php:392:        $this->map->setMapTypeControl('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:397:        $overviewMapControl = $this->getMock('Ivory\GoogleMap\Controls\OverviewMapControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:398:        $this->map->setOverviewMapControl($overviewMapControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:400:        $this->assertSame($overviewMapControl, $this->map->getOverviewMapControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:401:        $this->assertTrue($this->map->getMapOption('overviewMapControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:406:        $this->map->setOverviewMapControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:408:        $this->assertTrue($this->map->getOverviewMapControl()->isOpened());
./tests/Ivory/Tests/GoogleMap/MapTest.php:409:        $this->assertTrue($this->map->getMapOption('overviewMapControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:414:        $this->map->setOverviewMapControl($this->getMock('Ivory\GoogleMap\Controls\OverviewMapControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:415:        $this->map->setOverviewMapControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:417:        $this->assertNull($this->map->getOverviewMapControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:418:        $this->assertFalse($this->map->hasMapOption('overviewMapControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:425:     * - function setOverviewMapControl(Ivory\GoogleMap\Controls\OverviewMapControl $overviewMapControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:426:     * - function setOverviewMapControl(boolean $opened)
./tests/Ivory/Tests/GoogleMap/MapTest.php:430:        $this->map->setOverviewMapControl('foo');
./tests/Ivory/Tests/GoogleMap/MapTest.php:435:        $panControl = $this->getMock('Ivory\GoogleMap\Controls\PanControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:436:        $this->map->setPanControl($panControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:438:        $this->assertSame($panControl, $this->map->getPanControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:439:        $this->assertTrue($this->map->getMapOption('panControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:444:        $this->map->setPanControl(ControlPosition::BOTTOM_CENTER);
./tests/Ivory/Tests/GoogleMap/MapTest.php:446:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->map->getPanControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:447:        $this->assertTrue($this->map->getMapOption('panControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:452:        $this->map->setPanControl($this->getMock('Ivory\GoogleMap\Controls\PanControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:453:        $this->map->setPanControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:455:        $this->assertNull($this->map->getPanControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:456:        $this->assertFalse($this->map->hasMapOption('panControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:463:     * - function setPanControl(Ivory\GoogleMap\Controls\PanControl $panControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:464:     * - function setPanControl(string $controlPosition)
./tests/Ivory/Tests/GoogleMap/MapTest.php:468:        $this->map->setPanControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:473:        $rotateControl = $this->getMock('Ivory\GoogleMap\Controls\RotateControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:474:        $this->map->setRotateControl($rotateControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:476:        $this->assertSame($rotateControl, $this->map->getRotateControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:477:        $this->assertTrue($this->map->getMapOption('rotateControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:482:        $this->map->setRotateControl(ControlPosition::BOTTOM_CENTER);
./tests/Ivory/Tests/GoogleMap/MapTest.php:484:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->map->getRotateControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:485:        $this->assertTrue($this->map->getMapOption('rotateControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:490:        $this->map->setRotateControl($this->getMock('Ivory\GoogleMap\Controls\RotateControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:491:        $this->map->setRotateControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:493:        $this->assertNull($this->map->getRotateControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:494:        $this->assertFalse($this->map->hasMapOption('rotateControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:501:     * - function setRotateControl(Ivory\GoogleMap\Controls\RotateControl $rotateControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:502:     * - function setRotateControl(string $controlPosition)
./tests/Ivory/Tests/GoogleMap/MapTest.php:506:        $this->map->setRotateControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:511:        $scaleControl = $this->getMock('Ivory\GoogleMap\Controls\ScaleControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:512:        $this->map->setScaleControl($scaleControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:514:        $this->assertSame($scaleControl, $this->map->getScaleControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:515:        $this->assertTrue($this->map->getMapOption('scaleControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:523:        $this->map->setScaleControl($controlPosition, $scaleControlStyle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:525:        $this->assertSame($controlPosition, $this->map->getScaleControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:526:        $this->assertSame($scaleControlStyle, $this->map->getScaleControl()->getScaleControlStyle());
./tests/Ivory/Tests/GoogleMap/MapTest.php:528:        $this->assertTrue($this->map->getMapOption('scaleControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:533:        $this->map->setScaleControl($this->getMock('Ivory\GoogleMap\Controls\ScaleControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:534:        $this->map->setScaleControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:536:        $this->assertNull($this->map->getScaleControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:537:        $this->assertFalse($this->map->hasMapOption('scaleControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:544:     * - function setScaleControl(Ivory\GoogleMap\Controls\ScaleControl $scaleControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:545:     * - function setScaleControl(string $controlPosition, string $scaleControlStyle)
./tests/Ivory/Tests/GoogleMap/MapTest.php:549:        $this->map->setScaleControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:554:        $streetViewControl = $this->getMock('Ivory\GoogleMap\Controls\StreetViewControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:555:        $this->map->setStreetViewControl($streetViewControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:557:        $this->assertSame($streetViewControl, $this->map->getStreetViewControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:558:        $this->assertTrue($this->map->getMapOption('streetViewControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:563:        $this->map->setStreetViewControl(ControlPosition::BOTTOM_CENTER);
./tests/Ivory/Tests/GoogleMap/MapTest.php:565:        $this->assertSame(ControlPosition::BOTTOM_CENTER, $this->map->getStreetViewControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:566:        $this->assertTrue($this->map->getMapOption('streetViewControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:571:        $this->map->setStreetViewControl($this->getMock('Ivory\GoogleMap\Controls\StreetViewControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:572:        $this->map->setStreetViewControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:574:        $this->assertNull($this->map->getStreetViewControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:575:        $this->assertFalse($this->map->hasMapOption('streetViewControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:582:     * - function setStreetViewControl(Ivory\GoogleMap\Controls\StreetViewControl $streetViewControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:583:     * - function setStreetViewControl(string $controlPosition)
./tests/Ivory/Tests/GoogleMap/MapTest.php:587:        $this->map->setStreetViewControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:592:        $zoomControl = $this->getMock('Ivory\GoogleMap\Controls\ZoomControl');
./tests/Ivory/Tests/GoogleMap/MapTest.php:593:        $this->map->setZoomControl($zoomControl);
./tests/Ivory/Tests/GoogleMap/MapTest.php:595:        $this->assertSame($zoomControl, $this->map->getZoomControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:596:        $this->assertTrue($this->map->getMapOption('zoomControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:604:        $this->map->setZoomControl($controlPosition, $zoomControlStyle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:606:        $this->assertSame($controlPosition, $this->map->getZoomControl()->getControlPosition());
./tests/Ivory/Tests/GoogleMap/MapTest.php:607:        $this->assertSame($zoomControlStyle, $this->map->getZoomControl()->getZoomControlStyle());
./tests/Ivory/Tests/GoogleMap/MapTest.php:608:        $this->assertTrue($this->map->getMapOption('zoomControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:613:        $this->map->setZoomControl($this->getMock('Ivory\GoogleMap\Controls\ZoomControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:614:        $this->map->setZoomControl(null);
./tests/Ivory/Tests/GoogleMap/MapTest.php:616:        $this->assertNull($this->map->getZoomControl());
./tests/Ivory/Tests/GoogleMap/MapTest.php:617:        $this->assertFalse($this->map->hasMapOption('zoomControl'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:624:     * - function setZoomControl(Ivory\GoogleMap\Controls\ZoomControl $zoomControl = null)
./tests/Ivory/Tests/GoogleMap/MapTest.php:625:     * - function setZoomControl(string $controlPosition, string $zoomControlStyle)
./tests/Ivory/Tests/GoogleMap/MapTest.php:629:        $this->map->setZoomControl(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:634:        $eventManager = $this->getMock('Ivory\GoogleMap\Events\EventManager');
./tests/Ivory/Tests/GoogleMap/MapTest.php:635:        $this->map->setEventManager($eventManager);
./tests/Ivory/Tests/GoogleMap/MapTest.php:637:        $this->assertSame($eventManager, $this->map->getEventManager());
./tests/Ivory/Tests/GoogleMap/MapTest.php:642:        $markerCluster = $this->getMock('Ivory\GoogleMap\Overlays\MarkerCluster');
./tests/Ivory/Tests/GoogleMap/MapTest.php:643:        $this->map->setMarkerCluster($markerCluster);
./tests/Ivory/Tests/GoogleMap/MapTest.php:645:        $this->assertSame($markerCluster, $this->map->getMarkerCluster());
./tests/Ivory/Tests/GoogleMap/MapTest.php:650:        $marker = $this->getMock('Ivory\GoogleMap\Overlays\Marker');
./tests/Ivory/Tests/GoogleMap/MapTest.php:651:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:653:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:654:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:655:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:656:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:657:            ->with($this->equalTo($marker));
./tests/Ivory/Tests/GoogleMap/MapTest.php:659:        $this->map->addMarker($marker);
./tests/Ivory/Tests/GoogleMap/MapTest.php:661:        $this->assertSame(array($marker), $this->map->getMarkers());
./tests/Ivory/Tests/GoogleMap/MapTest.php:666:        $marker = $this->getMock('Ivory\GoogleMap\Overlays\Marker');
./tests/Ivory/Tests/GoogleMap/MapTest.php:668:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:669:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:670:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:671:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:673:        $this->map->addMarker($marker);
./tests/Ivory/Tests/GoogleMap/MapTest.php:675:        $this->assertSame(array($marker), $this->map->getMarkers());
./tests/Ivory/Tests/GoogleMap/MapTest.php:680:        $infoWindow = $this->getMock('Ivory\GoogleMap\Overlays\InfoWindow');
./tests/Ivory/Tests/GoogleMap/MapTest.php:681:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:683:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:684:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:685:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:686:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:687:            ->with($this->equalTo($infoWindow));
./tests/Ivory/Tests/GoogleMap/MapTest.php:689:        $this->map->addInfoWindow($infoWindow);
./tests/Ivory/Tests/GoogleMap/MapTest.php:691:        $this->assertSame(array($infoWindow), $this->map->getInfoWindows());
./tests/Ivory/Tests/GoogleMap/MapTest.php:696:        $infoWindow = $this->getMock('Ivory\GoogleMap\Overlays\InfoWindow');
./tests/Ivory/Tests/GoogleMap/MapTest.php:698:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:699:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:700:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:701:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:703:        $this->map->addInfoWindow($infoWindow);
./tests/Ivory/Tests/GoogleMap/MapTest.php:705:        $this->assertSame(array($infoWindow), $this->map->getInfoWindows());
./tests/Ivory/Tests/GoogleMap/MapTest.php:710:        $polyline = $this->getMock('Ivory\GoogleMap\Overlays\Polyline');
./tests/Ivory/Tests/GoogleMap/MapTest.php:711:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:713:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:714:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:715:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:716:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:717:            ->with($this->equalTo($polyline));
./tests/Ivory/Tests/GoogleMap/MapTest.php:719:        $this->map->addPolyline($polyline);
./tests/Ivory/Tests/GoogleMap/MapTest.php:721:        $this->assertSame(array($polyline), $this->map->getPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:726:        $polyline = $this->getMock('Ivory\GoogleMap\Overlays\Polyline');
./tests/Ivory/Tests/GoogleMap/MapTest.php:728:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:729:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:730:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:731:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:733:        $this->map->addPolyline($polyline);
./tests/Ivory/Tests/GoogleMap/MapTest.php:735:        $this->assertSame(array($polyline), $this->map->getPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:740:        $encodedPolyline = $this->getMock('Ivory\GoogleMap\Overlays\EncodedPolyline');
./tests/Ivory/Tests/GoogleMap/MapTest.php:741:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:743:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:744:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:745:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:746:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:747:            ->with($this->equalTo($encodedPolyline));
./tests/Ivory/Tests/GoogleMap/MapTest.php:749:        $this->map->addEncodedPolyline($encodedPolyline);
./tests/Ivory/Tests/GoogleMap/MapTest.php:751:        $this->assertSame(array($encodedPolyline), $this->map->getEncodedPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:756:        $encodedPolyline = $this->getMock('Ivory\GoogleMap\Overlays\EncodedPolyline');
./tests/Ivory/Tests/GoogleMap/MapTest.php:758:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:759:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:760:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:761:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:763:        $this->map->addEncodedPolyline($encodedPolyline);
./tests/Ivory/Tests/GoogleMap/MapTest.php:765:        $this->assertSame(array($encodedPolyline), $this->map->getEncodedPolylines());
./tests/Ivory/Tests/GoogleMap/MapTest.php:770:        $polygon = $this->getMock('Ivory\GoogleMap\Overlays\Polygon');
./tests/Ivory/Tests/GoogleMap/MapTest.php:771:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:773:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:774:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:775:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:776:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:777:            ->with($this->equalTo($polygon));
./tests/Ivory/Tests/GoogleMap/MapTest.php:779:        $this->map->addPolygon($polygon);
./tests/Ivory/Tests/GoogleMap/MapTest.php:781:        $this->assertSame(array($polygon), $this->map->getPolygons());
./tests/Ivory/Tests/GoogleMap/MapTest.php:786:        $polygon = $this->getMock('Ivory\GoogleMap\Overlays\Polygon');
./tests/Ivory/Tests/GoogleMap/MapTest.php:788:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:789:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:790:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:791:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:793:        $this->map->addPolygon($polygon);
./tests/Ivory/Tests/GoogleMap/MapTest.php:795:        $this->assertSame(array($polygon), $this->map->getPolygons());
./tests/Ivory/Tests/GoogleMap/MapTest.php:800:        $rectangle = $this->getMock('Ivory\GoogleMap\Overlays\Rectangle');
./tests/Ivory/Tests/GoogleMap/MapTest.php:801:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:803:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:804:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:805:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:806:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:807:            ->with($this->equalTo($rectangle));
./tests/Ivory/Tests/GoogleMap/MapTest.php:809:        $this->map->addRectangle($rectangle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:811:        $this->assertSame(array($rectangle), $this->map->getRectangles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:816:        $rectangle = $this->getMock('Ivory\GoogleMap\Overlays\Rectangle');
./tests/Ivory/Tests/GoogleMap/MapTest.php:818:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:819:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:820:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:821:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:823:        $this->map->addRectangle($rectangle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:825:        $this->assertSame(array($rectangle), $this->map->getRectangles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:830:        $circle = $this->getMock('Ivory\GoogleMap\Overlays\Circle');
./tests/Ivory/Tests/GoogleMap/MapTest.php:831:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:833:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:834:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:835:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:836:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:837:            ->with($this->equalTo($circle));
./tests/Ivory/Tests/GoogleMap/MapTest.php:839:        $this->map->addCircle($circle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:841:        $this->assertSame(array($circle), $this->map->getCircles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:846:        $circle = $this->getMock('Ivory\GoogleMap\Overlays\Circle');
./tests/Ivory/Tests/GoogleMap/MapTest.php:848:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:849:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:850:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:851:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:853:        $this->map->addCircle($circle);
./tests/Ivory/Tests/GoogleMap/MapTest.php:855:        $this->assertSame(array($circle), $this->map->getCircles());
./tests/Ivory/Tests/GoogleMap/MapTest.php:860:        $groundOverlay = $this->getMock('Ivory\GoogleMap\Overlays\GroundOverlay');
./tests/Ivory/Tests/GoogleMap/MapTest.php:861:        $this->map->setAutoZoom(true);
./tests/Ivory/Tests/GoogleMap/MapTest.php:863:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:864:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:865:            ->expects($this->once())
./tests/Ivory/Tests/GoogleMap/MapTest.php:866:            ->method('extend')
./tests/Ivory/Tests/GoogleMap/MapTest.php:867:            ->with($this->equalTo($groundOverlay));
./tests/Ivory/Tests/GoogleMap/MapTest.php:869:        $this->map->addGroundOverlay($groundOverlay);
./tests/Ivory/Tests/GoogleMap/MapTest.php:871:        $this->assertSame(array($groundOverlay), $this->map->getGroundOverlays());
./tests/Ivory/Tests/GoogleMap/MapTest.php:876:        $groundOverlay = $this->getMock('Ivory\GoogleMap\Overlays\GroundOverlay');
./tests/Ivory/Tests/GoogleMap/MapTest.php:878:        $this->setUpBound();
./tests/Ivory/Tests/GoogleMap/MapTest.php:879:        $this->map->getBound()
./tests/Ivory/Tests/GoogleMap/MapTest.php:880:            ->expects($this->never())
./tests/Ivory/Tests/GoogleMap/MapTest.php:881:            ->method('extend');
./tests/Ivory/Tests/GoogleMap/MapTest.php:883:        $this->map->addGroundOverlay($groundOverlay);
./tests/Ivory/Tests/GoogleMap/MapTest.php:885:        $this->assertSame(array($groundOverlay), $this->map->getGroundOverlays());
./tests/Ivory/Tests/GoogleMap/MapTest.php:890:        $kmlLayer = $this->getMock('Ivory\GoogleMap\Layers\KMLLayer');
./tests/Ivory/Tests/GoogleMap/MapTest.php:891:        $this->map->addKMLLayer($kmlLayer);
./tests/Ivory/Tests/GoogleMap/MapTest.php:893:        $this->assertSame(array($kmlLayer), $this->map->getKMLLayers());
./tests/Ivory/Tests/GoogleMap/MapTest.php:898:        $this->map->setLibraries(array('foo'));
./tests/Ivory/Tests/GoogleMap/MapTest.php:900:        $this->assertTrue($this->map->hasLibraries());
./tests/Ivory/Tests/GoogleMap/MapTest.php:901:        $this->assertSame(array('foo'), $this->map->getLibraries());
./tests/Ivory/Tests/GoogleMap/MapTest.php:906:        $this->map->setLanguage('fr');
./tests/Ivory/Tests/GoogleMap/MapTest.php:908:        $this->assertSame('fr', $this->map->getLanguage());
./tests/bootstrap.php:16:$loader->add('Ivory\\Tests', __DIR__);
./.git/logs/refs/heads/master:1:0000000000000000000000000000000000000000 3385185ea0e2df4e41f987bdd5376838cafe60fc Marek Rychlik <marek@marekrychlik.com> 1406123521 -0700	clone: from https://github.com/mrychlik/ivory-google-map.git
./.git/logs/refs/heads/master:2:3385185ea0e2df4e41f987bdd5376838cafe60fc d40fdcde6b245a78f8c8fd5d1853aef5c6b589f5 Marek Rychlik <marek@marekrychlik.com> 1406123639 -0700	commit: *** empty log message ***
./.git/logs/refs/remotes/upstream/refactoring:1:0000000000000000000000000000000000000000 945abac5eeab18466c9d97ad4ef902c7926a5b15 Marek Rychlik <marek@catapult.rychliks.org> 1406123569 -0700	fetch upstream: storing head
./.git/logs/refs/remotes/upstream/master:1:0000000000000000000000000000000000000000 3385185ea0e2df4e41f987bdd5376838cafe60fc Marek Rychlik <marek@catapult.rychliks.org> 1406123569 -0700	fetch upstream: storing head
./.git/logs/refs/remotes/origin/HEAD:1:0000000000000000000000000000000000000000 3385185ea0e2df4e41f987bdd5376838cafe60fc Marek Rychlik <marek@marekrychlik.com> 1406123521 -0700	clone: from https://github.com/mrychlik/ivory-google-map.git
./.git/logs/HEAD:1:0000000000000000000000000000000000000000 3385185ea0e2df4e41f987bdd5376838cafe60fc Marek Rychlik <marek@marekrychlik.com> 1406123521 -0700	clone: from https://github.com/mrychlik/ivory-google-map.git
./.git/logs/HEAD:2:3385185ea0e2df4e41f987bdd5376838cafe60fc d40fdcde6b245a78f8c8fd5d1853aef5c6b589f5 Marek Rychlik <marek@marekrychlik.com> 1406123639 -0700	commit: *** empty log message ***
./.git/FETCH_HEAD:1:3385185ea0e2df4e41f987bdd5376838cafe60fc	not-for-merge	branch 'master' of https://github.com/egeloen/ivory-google-map
./.git/FETCH_HEAD:2:945abac5eeab18466c9d97ad4ef902c7926a5b15	not-for-merge	branch 'refactoring' of https://github.com/egeloen/ivory-google-map
./.git/info/exclude:1:# git ls-files --others --exclude-from=.git/info/exclude
./.git/hooks/commit-msg.sample:5:# that has the commit message.  The hook should exit with non-zero
./.git/hooks/commit-msg.sample:9:# To enable this hook, rename this file to "commit-msg".
./.git/hooks/commit-msg.sample:11:# Uncomment the below to add a Signed-off-by line to the message.
./.git/hooks/commit-msg.sample:12:# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
./.git/hooks/commit-msg.sample:15:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./.git/hooks/commit-msg.sample:16:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./.git/hooks/commit-msg.sample:18:# This example catches duplicate Signed-off-by lines.
./.git/hooks/commit-msg.sample:20:test "" = "$(grep '^Signed-off-by: ' "$1" |
./.git/hooks/commit-msg.sample:21:	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
./.git/hooks/commit-msg.sample:22:	echo >&2 Duplicate Signed-off-by lines.
./.git/hooks/pre-push.sample:5:# pushed.  If this script exits with a non-zero status nothing will be pushed.
./.git/hooks/pre-push.sample:9:# $1 -- Name of the remote to which the push is being done
./.git/hooks/pre-push.sample:10:# $2 -- URL to which the push is being done
./.git/hooks/pre-push.sample:44:		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
./.git/hooks/pre-push.sample:45:		if [ -n "$commit" ]
./.git/hooks/update.sample:4:# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
./.git/hooks/update.sample:9:# ------
./.git/hooks/update.sample:27:# --- Command line
./.git/hooks/update.sample:32:# --- Safety check
./.git/hooks/update.sample:33:if [ -z "$GIT_DIR" ]; then
./.git/hooks/update.sample:40:if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
./.git/hooks/update.sample:45:# --- Config
./.git/hooks/update.sample:46:allowunannotated=$(git config --bool hooks.allowunannotated)
./.git/hooks/update.sample:47:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
./.git/hooks/update.sample:48:denycreatebranch=$(git config --bool hooks.denycreatebranch)
./.git/hooks/update.sample:49:allowdeletetag=$(git config --bool hooks.allowdeletetag)
./.git/hooks/update.sample:50:allowmodifytag=$(git config --bool hooks.allowmodifytag)
./.git/hooks/update.sample:53:projectdesc=$(sed -e '1q' "$GIT_DIR/description")
./.git/hooks/update.sample:61:# --- Check types
./.git/hooks/update.sample:67:	newrev_type=$(git cat-file -t $newrev)
./.git/hooks/update.sample:72:		# un-annotated tag
./.git/hooks/update.sample:75:			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
./.git/hooks/update.sample:76:			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
./.git/hooks/update.sample:89:		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
./.git/hooks/update.sample:98:		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
./.git/hooks/update.sample:127:# --- Finished
./.git/hooks/pre-applypatch.sample:4:# by applypatch from an e-mail message.
./.git/hooks/pre-applypatch.sample:6:# The hook should exit with non-zero status after issuing an
./.git/hooks/pre-applypatch.sample:9:# To enable this hook, rename this file to "pre-applypatch".
./.git/hooks/pre-applypatch.sample:11:. git-sh-setup
./.git/hooks/pre-applypatch.sample:12:test -x "$GIT_DIR/hooks/pre-commit" &&
./.git/hooks/pre-applypatch.sample:13:	exec "$GIT_DIR/hooks/pre-commit" ${1+"$@"}
./.git/hooks/applypatch-msg.sample:4:# applypatch from an e-mail message.
./.git/hooks/applypatch-msg.sample:6:# The hook should exit with non-zero status after issuing an
./.git/hooks/applypatch-msg.sample:10:# To enable this hook, rename this file to "applypatch-msg".
./.git/hooks/applypatch-msg.sample:12:. git-sh-setup
./.git/hooks/applypatch-msg.sample:13:test -x "$GIT_DIR/hooks/commit-msg" &&
./.git/hooks/applypatch-msg.sample:14:	exec "$GIT_DIR/hooks/commit-msg" ${1+"$@"}
./.git/hooks/pre-rebase.sample:5:# The "pre-rebase" hook is run just before "git rebase" starts doing
./.git/hooks/pre-rebase.sample:7:# non-zero status.
./.git/hooks/pre-rebase.sample:11:# $1 -- the upstream the series was forked from.
./.git/hooks/pre-rebase.sample:12:# $2 -- the branch being rebased (or empty when rebasing the current branch).
./.git/hooks/pre-rebase.sample:24:	topic=`git symbolic-ref HEAD` ||
./.git/hooks/pre-rebase.sample:40:git show-ref -q "$topic" || {
./.git/hooks/pre-rebase.sample:46:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
./.git/hooks/pre-rebase.sample:47:if test -z "$not_in_master"
./.git/hooks/pre-rebase.sample:54:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
./.git/hooks/pre-rebase.sample:55:only_next_2=`git rev-list ^master           ${publish} | sort`
./.git/hooks/pre-rebase.sample:58:	not_in_topic=`git rev-list "^$topic" master`
./.git/hooks/pre-rebase.sample:59:	if test -z "$not_in_topic"
./.git/hooks/pre-rebase.sample:61:		echo >&2 "$topic is already up-to-date with master"
./.git/hooks/pre-rebase.sample:67:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
./.git/hooks/pre-rebase.sample:68:	/usr/bin/perl -e '
./.git/hooks/pre-rebase.sample:72:			/^([0-9a-f]+) /;
./.git/hooks/pre-rebase.sample:76:				/^([0-9a-f]+) (.*)$/;
./.git/hooks/pre-rebase.sample:79:			if (!exists $not_in_next{$elem->[0]}) {
./.git/hooks/pre-rebase.sample:84:				print STDERR " $elem->[1]\n";
./.git/hooks/pre-rebase.sample:127:    build on top of it -- other people may already want to
./.git/hooks/pre-rebase.sample:135:		   o---o---o---o---o---o---o---o---o---o "next"
./.git/hooks/pre-rebase.sample:137:		 /   a---a---b A     /           /
./.git/hooks/pre-rebase.sample:139:	       /   /   c---c---c---c B         /
./.git/hooks/pre-rebase.sample:141:	     /   /   /   b---b C     \       /
./.git/hooks/pre-rebase.sample:143:    ---o---o---o---o---o---o---o---o---o---o---o "master"
./.git/hooks/pre-rebase.sample:160:	git rev-list ^master ^topic next
./.git/hooks/pre-rebase.sample:161:	git rev-list ^master        next
./.git/hooks/pre-rebase.sample:167:	git rev-list master..topic
./.git/hooks/prepare-commit-msg.sample:7:# message file.  If the hook fails with a non-zero status,
./.git/hooks/prepare-commit-msg.sample:10:# To enable this hook, rename this file to "prepare-commit-msg".
./.git/hooks/prepare-commit-msg.sample:15:# The second includes the output of "git diff --name-status -r"
./.git/hooks/prepare-commit-msg.sample:17:# commented because it doesn't cope with --amend or with squashed
./.git/hooks/prepare-commit-msg.sample:20:# The third example adds a Signed-off-by line to the message, that can
./.git/hooks/prepare-commit-msg.sample:25:    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
./.git/hooks/prepare-commit-msg.sample:28:#   /usr/bin/perl -i.bak -pe '
./.git/hooks/prepare-commit-msg.sample:29:#      print "\n" . `git diff --cached --name-status -r`
./.git/hooks/prepare-commit-msg.sample:35:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./.git/hooks/prepare-commit-msg.sample:36:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./.git/hooks/pre-commit.sample:5:# exit with non-zero status after issuing an appropriate message if
./.git/hooks/pre-commit.sample:8:# To enable this hook, rename this file to "pre-commit".
./.git/hooks/pre-commit.sample:10:if git rev-parse --verify HEAD >/dev/null 2>&1
./.git/hooks/pre-commit.sample:18:# If you want to allow non-ascii filenames set this variable to true.
./.git/hooks/pre-commit.sample:24:# Cross platform projects tend to avoid non-ascii filenames; prevent
./.git/hooks/pre-commit.sample:31:	test $(git diff --cached --name-only --diff-filter=A -z $against |
./.git/hooks/pre-commit.sample:32:	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
./.git/hooks/pre-commit.sample:34:	echo "Error: Attempt to add a non-ascii file name."
./.git/hooks/pre-commit.sample:50:exec git diff-index --check --cached $against --
./.git/hooks/post-update.sample:6:# To enable this hook, rename this file to "post-update".
./.git/hooks/post-update.sample:8:exec git update-server-info
Binary file ./.git/index matches
Binary file ./.git/objects/81/9a1e9a39e6d5bb6d0ace2f1e5cd90e7383f096 matches
Binary file ./.git/objects/99/be71e29afa7d2734e9c91628a458cb2ba3e86b matches
Binary file ./.git/objects/pack/pack-a77b63b9a02c3a0681d1fbed3eadf7c0c73a98e5.pack matches
Binary file ./.git/objects/pack/pack-a77b63b9a02c3a0681d1fbed3eadf7c0c73a98e5.idx matches
Binary file ./.git/objects/b5/ccac4c179480527c230515e4bdac34ad2fae0c matches
Binary file ./.git/objects/e5/c0441dc4e2d2fac212cd05c309737fc13b5d9a matches
Binary file ./.git/objects/e3/19d94354ca3ac1b3b00388097869679dec3636 matches
./.git/config:7:	url = https://github.com/mrychlik/ivory-google-map.git
./.git/config:13:	url = https://github.com/egeloen/ivory-google-map.git
./.git/packed-refs:1:# pack-refs with: peeled fully-peeled 
./phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
./CHANGELOG.md:3:### 1.4.1 (????-??-??)
./CHANGELOG.md:5: * dbc3965 - [Travis][Composer] Remove --dev
./CHANGELOG.md:6: * 6203fee - [Composer] Upgrade to PSR-4
./CHANGELOG.md:7: * fba0016 - [Autoload] Remove dist file
./CHANGELOG.md:9:### 1.4.0 (2014-06-17)
./CHANGELOG.md:11: * c622643 - [Helper][Map] Introduce renderJsContainerExtra
./CHANGELOG.md:12: * c5a19df - [Services][Directions] Fix waypoint stopover
./CHANGELOG.md:13: * b5173e9 - [Helper][Extension] Fix InfoBox loading with async map
./CHANGELOG.md:14: * b10a1a2 - Add coveralls support
./CHANGELOG.md:15: * a1608ae - [Services] Check if the http adapter returns a valid response
./CHANGELOG.md:16: * ca767aa - [Places][Autocomplete] Fix exception + tests
./CHANGELOG.md:17: * 654744c - [Helper] Rely on egeloen/json-builder
./CHANGELOG.md:18: * 533a5b0 - [Places] Fix helper rendering bug + Add component restrictions support
./CHANGELOG.md:19: * ece9738 - Update new year
./CHANGELOG.md:21:### 1.3.0 (2013-12-12)
./CHANGELOG.md:23: * a308662 - [MapHelper] Fix default info window open support
./CHANGELOG.md:24: * b6a4372 - Service request language can now have 2 or 5 characteres
./CHANGELOG.md:25: * 074cd0a - Increase time between each directions tests
./CHANGELOG.md:26: * 234ad66 - [Travis] Only build the master branch
./CHANGELOG.md:27: * 9234b44 - [Service] Add business account support
./CHANGELOG.md:28: * 0520430 - [Service] Replace kriswallsmith/buzz by widop/http-adapter
./CHANGELOG.md:30:### 1.2.0 (2013-10-09)
./CHANGELOG.md:32: * 94a73a1 - [Helper] Remove FORCE_JSON_ENCODE for js marker cluster + rely on json builder
./CHANGELOG.md:33: * 3fd9afb - [Asset] Enforce javascript variable unicity
./CHANGELOG.md:34: * edcea0a - [Services] Add xml support
./CHANGELOG.md:35: * 0305bbc - [Helper] Add InfoBox support
./CHANGELOG.md:36: * 3089dce - [Helper] Add extension support
./CHANGELOG.md:37: * 472461d - [Helper][Utils] Make JsonBuilder::setValues more readable
./CHANGELOG.md:39:### 1.1.0 (2013-08-22)
./CHANGELOG.md:41: * bdc9014 - [Helper] Add json builder utility class
./CHANGELOG.md:42: * ca6060c - [Doc] Add a section about geocoder provider registration
./CHANGELOG.md:43: * 7c485c3 - [Overlays] Add marker cluster support
./CHANGELOG.md:44: * 2578a5d - [Helper] Fix map language with google loader
./CHANGELOG.md:46:### 1.0.0 (2013-06-07)
./CHANGELOG.md:48: * 0845763 - Add Distance Matrix support
./CHANGELOG.md:49: * d0f2282 - [DirectionsRequest] Add transit travel mode support
./CHANGELOG.md:50: * 2444de8 - [Map] Allow to specify additional libraries
./CHANGELOG.md:51: * ebe2210 - Add Places Autocomplete support
./CHANGELOG.md:52: * b5bcd66 - [Directions] Make route copyrights optional
./CHANGELOG.md:53: * 1aa0083 - [Travis] Use --prefer-source to avoid random build fail
./CHANGELOG.md:55:### 0.9.1 (2013-04-10)
./CHANGELOG.md:57: * 13f108a - [Exception] Rename TemplatingException to HelperException
./CHANGELOG.md:58: * 4e340c3 - [Helper] Use Google Loader for loading Google Map API v3
./CHANGELOG.md:59: * ff6b973 - [Helper] Add JS container
./CHANGELOG.md:60: * 31d7346 - Fix annotation typo
./CHANGELOG.md:61: * 28ffe07 - PSR2 compatibility
./CHANGELOG.md:62: * db3d23f - Rename 'Ivory\GoogleMap\Templating\Helper' namespace to 'Ivory\GoogleMap\Helper'
./CHANGELOG.md:64:### 0.9.0 (2013-03-23)
./composer.json:2:    "name": "egeloen/google-map",
./composer.json:14:        "egeloen/json-builder": "~1.0"
./composer.json:16:    "require-dev": {
./composer.json:18:        "widop/http-adapter": "~1.0,<1.1",
./composer.json:20:        "satooshi/php-coveralls": "~0.6"
./composer.json:23:        "widop/http-adapter": "Allows to use services",
./composer.json:27:        "psr-4": { "Ivory\\GoogleMap\\": "src/Ivory/GoogleMap/" }
./composer.json:30:        "bin-dir": "bin/"
./composer.json:33:        "branch-alias": {
./composer.json:34:            "dev-master": "1.4-dev"
./.coveralls.yml:1:service_name: travis-ci
./README.md:3:[![Build Status](https://secure.travis-ci.org/egeloen/ivory-google-map.png?branch=master)](http://travis-ci.org/egeloen/ivory-google-map)
./README.md:4:[![Coverage Status](https://coveralls.io/repos/egeloen/ivory-google-map/badge.png?branch=master)](https://coveralls.io/r/egeloen/ivory-google-map?branch=master)
./README.md:11:   1. [Installation](http://github.com/egeloen/ivory-google-map/blob/master/doc/installation.md)
./README.md:12:   2. [Usage](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage.md)
./README.md:13:      - [Map](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/map.md)
./README.md:14:      - [Overlays](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/index.md)
./README.md:15:         - [Marker](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker.md)
./README.md:16:         - [Info window](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_window.md)
./README.md:17:         - [Info box](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/info_box.md)
./README.md:18:         - [Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polyline.md)
./README.md:19:         - [Encoded Polyline](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/encoded_polyline.md)
./README.md:20:         - [Polygon](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/polygon.md)
./README.md:21:         - [Rectangle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/rectangle.md)
./README.md:22:         - [Circle](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/circle.md)
./README.md:23:         - [Ground overlay](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/ground_overlay.md)
./README.md:24:         - [Marker cluster](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/overlays/marker_cluster.md)
./README.md:25:      - [Controls](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/index.md)
./README.md:26:         - [Map type](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/map_type.md)
./README.md:27:         - [Overview](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/overview.md)
./README.md:28:         - [Pan](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/pan.md)
./README.md:29:         - [Rotate](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/rotate.md)
./README.md:30:         - [Scale](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/scale.md)
./README.md:31:         - [Street view](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/street_view.md)
./README.md:32:         - [Zoom](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/controls/zoom.md)
./README.md:33:      - [Layers](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/layers/index.md)
./README.md:34:         - [KML Layer](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/layers/kml_layer.md)
./README.md:35:      - [Events](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/events.md)
./README.md:36:      - [Places](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/places/index.md)
./README.md:37:         - [Autocomplete](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/places/autocomplete.md)
./README.md:38:      - [Services](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/index.md)
./README.md:39:         - [Geocoding API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/geocoding/geocoder.md)
./README.md:40:         - [Directions API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/directions/directions.md)
./README.md:41:         - [Distance Matrix API](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/distance_matrix/distance_matrix.md)
./README.md:42:         - [Business Account](http://github.com/egeloen/ivory-google-map/blob/master/doc/usage/services/business_account.md)
./README.md:47:the test suite, check the travis [configuration](https://github.com/egeloen/ivory-google-map/blob/master/.travis.yml).
./README.md:56:[LICENSE](https://github.com/egeloen/ivory-google-map/blob/master/LICENSE) file that was distributed with this source
./.travis.yml:4:    - 5.3.3
./.travis.yml:5:    - 5.3
./.travis.yml:6:    - 5.4
./.travis.yml:7:    - 5.5
./.travis.yml:9:before_script: composer install --prefer-source
./.travis.yml:11:script: bin/phpunit --coverage-clover clover.xml
